{"version":3,"sources":["Store/action/MainAction.js","componentsJS/Header/Header.js","componentsJS/SlotsScenes/ScrenScene/Bookmark.js","componentsJS/SlotsScenes/ScrenScene/DetailСofiguration/Symbols/Symbols.js","componentsJS/SlotsScenes/ScrenScene/DetailСofiguration/Paytable/Paytable.js","componentsJS/SlotsScenes/ScrenScene/DetailСofiguration/Substitutes/Substitutes.js","componentsJS/SlotsScenes/ScrenScene/DetailСofiguration/Secial/Secial.js","componentsJS/SlotsScenes/ScrenScene/DetailСofiguration/Reelstrip/Reelstrip.js","componentsJS/SlotsScenes/ScrenScene/DetailСofiguration/DetailСofiguration.js","componentsJS/SlotsScenes/ScrenScene/ScrenScene.js","componentsJS/SlotsScenes/SlotsScenes.js","App/App.js","reportWebVitals.js","Store/reducers/initialState.js","Store/reducers/components/CreateScene.js","Store/reducers/components/Inputs.js","Store/reducers/components/Deletes.js","Store/reducers/components/Select.js","Store/reducers/components/StartReset.js","Store/reducers/components/AddSymbol.js","Store/reducers/components/DeleteSymbol.js","Store/reducers/DefaultOperation.js","Store/reducers/MainReducer.js","index.js","Store/CreateStore.js"],"names":["CreateAction","Type","value","type","paylot","Header","DefaultOperation","this","props","state","className","FirstInputId","style","width","height","marginLeft","onChange","undefined","Game","InputFid","FirstInputName","InputFname","onClick","PressFirstBut","FirstBut","justifyContent","marginRight","Component","connect","dispatch","event","target","Bookmark","Id","Select","backgroundColor","BookmarkList","backg","SceneList","SceneName","Symbols","margin","borderRight","overflow","keys","length","map","key","name","e","InputSymN","vID","vKEY","p","targetV","InputSymID","id","DeleteSymbol","v1","v2","AddSymbol","console","log","Paytable","maxWidth","minWidth","border","n","key1","InputSymPayT","vKEY1","textAlign","Substiture","Checkbox","checked","InputSymSub","color","Special","InputSymSpec","Reelstrip","display","InputSymReel","butStyle","SlectedB","background","SlectedD","DetailСofiguration","marginTop","SelectMC","ScernTypeOfConf","ScrenScene","NS","InputNS","GT","InputGT","NOR","num","parseInt","replace","isNaN","InputNOR","ScrenList","InputLabel","labelId","GameType","MenuItem","NumberOfReels","Delete","SlotsScenes","borderBottom","borderLeft","AddScene","App","State","AddContact","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","CreateScene","GameName","0","Reels","1","2","3","4","Substitutes","SlectedScernTypeOfConf","TotalRTP","BaseGameRTP","FreespinsRTP","BonusGameRTP","BasegameHitRate","HitRate","Combinations","Returns","BookmarkOn","N","C","i","action","InputFN","InputSN","Nof","nValue","symbols","a","omit","DeleteScene","k","v","s","s2","StartReset","masKey","PayT","Subst","Reel","isWild","isScatter","isSpecific","sarray","DefaultOpration","combineReducers","store","createStore","MainReducer","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.14c113a4.chunk.js","sourcesContent":["export const CreateAction =(Type, value) => {\r\n    return {\r\n        type: Type,\r\n        paylot:value,\r\n        \r\n    }\r\n}\r\n \r\n","\r\nimport {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport './Header.css'\r\nimport {CreateAction} from '../../Store/action/MainAction';\r\n\r\nclass Header extends Component {\r\n  \r\n  render(){\r\n    const{DefaultOperation}=this.props.state\r\n    return (\r\n      <div className=\"Header\">\r\n        <div className=\"container_row\">\r\n            <input className=\"con_input\" value={DefaultOperation.FirstInputId} style={{width:\"50px\",height:\"30px\",marginLeft:\"10px\"}} onChange={DefaultOperation.Game==undefined?this.props.InputFid:()=>{}}/>\r\n                \r\n            \r\n            <input className=\"con_input\" value={DefaultOperation.FirstInputName} style={{height:\"30px\",marginLeft:\"10px\"}}  onChange={ DefaultOperation.Game==undefined?this.props.InputFname:()=>{}}/>\r\n                \r\n            \r\n            <div className=\"con_but\" style={{width:\"90px\",height:\"30px\",marginLeft:\"10px\"}} onClick={()=>this.props.PressFirstBut(DefaultOperation)}>\r\n                {\r\n                    DefaultOperation.FirstBut \r\n                }\r\n                \r\n            </div>\r\n        </div>\r\n        <div className=\"container_row\" style={{justifyContent:'flex-end'}}>\r\n             <div className=\"con_but\" style={{width:\"90px\",height:\"30px\"}}>\r\n                export\r\n            </div>\r\n            <div className=\"con_but\" style={{width:\"90px\",height:\"30px\",marginLeft:\"10px\", marginRight:\"10px\"}}>\r\n                import\r\n            </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n  \r\n}\r\n\r\nexport default connect(\r\n  state=>({state:state}),\r\n  dispatch => ({\r\n    PressFirstBut: (DefaultOperation, value) => {\r\n      if(DefaultOperation.Game==undefined)\r\n        dispatch(CreateAction(\"ADD_NEW_SCENE\", value))\r\n        dispatch(CreateAction(\"START_RESET\"))\r\n    },\r\n    InputFid: (event) => {\r\n        dispatch(CreateAction(\"INPUT_FID\", event.target.value))\r\n    },\r\n    InputFname: (event) => {\r\n        dispatch(CreateAction(\"INPUT_FNAME\", event.target.value))\r\n    }\r\n  })\r\n)(Header);","\r\nimport {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport {CreateAction} from '../../../Store/action/MainAction';\r\n\r\n\r\nclass Bookmark extends Component {\r\n  \r\n  render(){\r\n    const{DefaultOperation}=this.props.state\r\n    const{Id}=this.props\r\n    return (\r\n      <div className=\"Bookmark\" onClick={()=>this.props.Select(this.props.Id)} style={{backgroundColor:DefaultOperation.BookmarkList[Id].backg}}>\r\n         {DefaultOperation.Game.SceneList[Id].SceneName}\r\n      </div>\r\n    );\r\n  }\r\n  \r\n}\r\n\r\nexport default connect(\r\n  state=>({state:state}),\r\n  dispatch => ({Select: (value) => {\r\n    \r\n      dispatch(CreateAction(\"SELECT\", value))\r\n      \r\n  },\r\n})\r\n)(Bookmark);\r\n","import {keys} from \"lodash\"\r\nimport {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport {CreateAction} from '../../../../../Store/action/MainAction';\r\n\r\n\r\nclass Symbols extends Component {\r\n    \r\n    \r\n  render(){\r\n    const{DefaultOperation}=this.props.state\r\n    const{Id}=this.props\r\n    return (\r\n      <div className=\"container_column\">\r\n          <div className=\"container_row\" style={{margin:\"20px\"}}>\r\n            <div className=\"container_column\" style={{width:\"100px\", borderRight:\"1px solid black\"}}>\r\n                \r\n                    <div className=\"container_row\" style={{width:\"100px\", borderRight:\"1px solid black\"}}>\r\n                        Symbols Name\r\n                    </div>\r\n                    \r\n                \r\n                \r\n                    <div className=\"container_row\" style={{width:\"100px\", borderRight:\"1px solid black\"}}>\r\n                        ID\r\n                    </div>\r\n                \r\n            </div>\r\n            \r\n            <div className=\"container_row\"  style={{overflow:\"auto\"}}>\r\n            {\r\n                        keys(DefaultOperation.Game.SceneList[Id].Symbols).length!=0?\r\n                            keys(DefaultOperation.Game.SceneList[Id].Symbols)\r\n                            .map((key) =>\r\n                            <div className=\"container_column\" key={key} style={{width:\"120px\"}}>\r\n                                <div className=\"container_row\">\r\n                                    <input name=\"SymbolName\" onChange={(e)=>this.props.InputSymN( {vID:Id, vKEY:key, p:this.props, targetV:e})} value={DefaultOperation.Game.SceneList[Id].Symbols[key].name} style={{width:\"100%\"}}/>\r\n                                    \r\n                                </div>\r\n                                <div className=\"container_row\">\r\n                                    <input onChange={(e)=>this.props.InputSymID({vID:Id, vKEY:key, p:this.props, targetV:e})} value={DefaultOperation.Game.SceneList[Id].Symbols[key].id} style={{width:\"100%\"}}/>\r\n                                    \r\n                                </div>\r\n                                <div className=\"con_but\" onClick={()=>this.props.DeleteSymbol({v1:Id,v2:key})}>\r\n                                    remove\r\n                                </div>\r\n                                \r\n                            </div>\r\n                                ):<div></div>\r\n                                \r\n                        \r\n                    }\r\n            </div>\r\n            <div className=\"con_but\" style={{width:\"50px\"}} onClick={()=>this.props.AddSymbol(Id)}>\r\n                +\r\n            </div>\r\n          </div>\r\n          <div className=\"container_row\">\r\n              <div style={{width:\"50px\"}}  >\r\n\r\n              </div>\r\n          </div>\r\n      </div>\r\n    );\r\n  }\r\n  \r\n}\r\n\r\nexport default connect(\r\n  state=>({state:state}),\r\n  dispatch => ({\r\n      AddSymbol: (value) => {\r\n\r\n        \r\n    \r\n      dispatch(CreateAction(\"ADD_SYMBOL\", value))\r\n      \r\n      \r\n  },\r\n  DeleteSymbol: (value) => {\r\n    \r\n    dispatch(CreateAction(\"DELETE_SYMBOL\", value))\r\n    \r\n    },\r\n    InputSymN: (value) => {\r\n       \r\n    \r\n        dispatch(CreateAction(\"INPUT_SYMBOL_NAME\", value))\r\n        \r\n    },\r\n    InputSymID: (value) => {\r\n       \r\n        console.log(value)\r\n        dispatch(CreateAction(\"INPUT_SYMBOL_ID\", value))\r\n        \r\n    },\r\n})\r\n)(Symbols);\r\n","import {keys} from \"lodash\"\r\nimport {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport {CreateAction} from '../../../../../Store/action/MainAction';\r\n\r\n\r\nclass Paytable extends Component {\r\n  \r\n  render(){\r\n    const{DefaultOperation}=this.props.state\r\n    const{Id}=this.props\r\n    return (\r\n      <div className=\"container_column\" style={{overflow:\"auto\", maxWidth:\"600px\"}}>\r\n          <div className=\"container_row\" >\r\n            <div className=\"container_row\" style={{minWidth:\"100px\",border:\"1px solid black\"}}>\r\n                Symbol\r\n            </div>\r\n            {\r\n                \r\n                keys(DefaultOperation.Game.SceneList[Id].Symbols).length!=0?\r\n                keys(DefaultOperation.Game.SceneList[Id].Symbols)\r\n                            .map((key, n=1)=>\r\n                            <div key={key}  className=\"container_row\" style={{maxWidth:\"40px\", border:\"1px solid black\", justifyContent:\"center\"}}>\r\n                                \r\n                                {n+1}\r\n                            </div>)\r\n                :<div></div>\r\n            }\r\n          </div>\r\n          {\r\n                \r\n                keys(DefaultOperation.Game.SceneList[Id].Symbols).length!=0?\r\n                keys(DefaultOperation.Game.SceneList[Id].Symbols)\r\n                            .map((key)=>\r\n                            <div className=\"container_column\"  key={key}>\r\n                                <div className=\"container_row\">\r\n                                <div  className=\"container_row\" style={{minWidth:\"100px\", border:\"1px solid black\", justifyContent:\"center\", overflow:\"hidden\"}}>\r\n                                    {DefaultOperation.Game.SceneList[Id].Symbols[key].name}\r\n                                </div>\r\n                                {keys(DefaultOperation.Game.SceneList[Id].Symbols[key].Paytable).map((key1)=>\r\n                                    <input onChange={(e)=>this.props.InputSymPayT({vID:Id, vKEY:key, vKEY1:key1, targetV:e})} value={DefaultOperation.Game.SceneList[Id].Symbols[key].Paytable[key1]} key={key1}  className=\"container_row\" style={{maxWidth:\"40px\", border:\"1px solid black\", textAlign:\"center\"}}/>\r\n                                    \r\n                                )}\r\n                                </div>\r\n                                \r\n                                \r\n                            </div>\r\n                            )\r\n                :<div></div>\r\n            }\r\n    </div>   \r\n    );\r\n  }\r\n  \r\n}\r\n\r\nexport default connect(\r\n  state=>({state:state}),\r\n  dispatch => ({\r\n    InputSymPayT: (value) => {\r\n       \r\n    \r\n      dispatch(CreateAction(\"INPUT_SYMBOL_PAYTABLE\", value))\r\n    },\r\n  })\r\n)(Paytable);\r\n","import {keys} from \"lodash\"\r\nimport {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport {CreateAction} from '../../../../../Store/action/MainAction';\r\n\r\n\r\nclass Substiture extends Component {\r\n  \r\n  render(){\r\n    const{DefaultOperation}=this.props.state\r\n    const{Id}=this.props\r\n    return (\r\n      <div className=\"container_column\" style={{overflow:\"auto\", maxWidth:\"800px\"}}>\r\n          <div className=\"container_row\" >\r\n            <div className=\"container_row\" style={{minWidth:\"100px\",border:\"1px solid black\"}}>\r\n                Substiture\r\n            </div>\r\n            {\r\n                \r\n                keys(DefaultOperation.Game.SceneList[Id].Symbols).length!=0?\r\n                keys(DefaultOperation.Game.SceneList[Id].Symbols)\r\n                            .map((key)=>\r\n                            <div key={key}  className=\"container_row\" style={{minWidth:\"100px\", border:\"1px solid black\", justifyContent:\"center\"}}>\r\n                                {DefaultOperation.Game.SceneList[Id].Symbols[key].name}\r\n                            </div>)\r\n                :<div></div>\r\n            }\r\n          </div>\r\n          {\r\n                \r\n                keys(DefaultOperation.Game.SceneList[Id].Symbols).length!=0?\r\n                keys(DefaultOperation.Game.SceneList[Id].Symbols)\r\n                            .map((key)=>\r\n                            <div className=\"container_column\"  key={key}>\r\n                                <div className=\"container_row\">\r\n                                <div  className=\"container_row\" style={{minWidth:\"100px\", border:\"1px solid black\", justifyContent:\"center\", overflow:\"hidden\"}}>\r\n                                    {DefaultOperation.Game.SceneList[Id].Symbols[key].name}\r\n                                </div>\r\n                                {keys(DefaultOperation.Game.SceneList[Id].Symbols[key].Substiture).map((key1)=>\r\n                                    <div key={key1}  className=\"container_row\" style={{minWidth:\"100px\", border:\"1px solid black\", justifyContent:\"center\"}}>\r\n                                      <Checkbox\r\n                                        checked={DefaultOperation.Game.SceneList[Id].Symbols[key].Substiture[key1].value}\r\n                                        onChange={()=>this.props.InputSymSub({vID:Id, vKEY:key, vKEY1:key1})}\r\n                                        \r\n                                        color=\"primary\"\r\n                                      />\r\n                                      \r\n                                    </div>\r\n                                )}\r\n                                </div>\r\n                                \r\n                                \r\n                            </div>\r\n                            )\r\n                :<div></div>\r\n            }\r\n    </div>   \r\n    );\r\n  }\r\n  \r\n}\r\n\r\nexport default connect(\r\n  state=>({state:state}),\r\n  dispatch => ({\r\n    InputSymSub: (value) => {\r\n       \r\n    \r\n      dispatch(CreateAction(\"INPUT_SYMBOL_SUBSTITURE\", value))\r\n    },\r\n  })\r\n)(Substiture);\r\n","import {keys} from \"lodash\"\r\nimport {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\n\r\nimport {CreateAction} from '../../../../../Store/action/MainAction';\r\n\r\n\r\nclass Special extends Component {\r\n  \r\n  render(){\r\n    const{DefaultOperation}=this.props.state\r\n    const{Id}=this.props\r\n    return (\r\n      <div className=\"container_column\" style={{overflow:\"auto\", maxWidth:\"800px\"}}>\r\n          <div className=\"container_row\" >\r\n            <div className=\"container_row\" style={{minWidth:\"100px\",border:\"1px solid black\"}}>\r\n                Symbols\r\n            </div>\r\n            \r\n                \r\n                \r\n                            <div  className=\"container_row\" style={{minWidth:\"100px\", border:\"1px solid black\", justifyContent:\"center\"}}>\r\n                                sWild\r\n                            </div>\r\n                            <div  className=\"container_row\" style={{minWidth:\"100px\", border:\"1px solid black\", justifyContent:\"center\"}}>\r\n                                isScatter\r\n                            </div>\r\n                            <div  className=\"container_row\" style={{minWidth:\"100px\", border:\"1px solid black\", justifyContent:\"center\"}}>\r\n                                isSpecific\r\n                            </div>\r\n                \r\n            \r\n          </div>\r\n          {\r\n                \r\n                keys(DefaultOperation.Game.SceneList[Id].Symbols).length!=0?\r\n                keys(DefaultOperation.Game.SceneList[Id].Symbols)\r\n                            .map((key)=>\r\n                            <div className=\"container_column\"  key={key}>\r\n                                <div className=\"container_row\">\r\n                                <div  className=\"container_row\" style={{minWidth:\"100px\", border:\"1px solid black\", justifyContent:\"center\", overflow:\"hidden\"}}>\r\n                                    {DefaultOperation.Game.SceneList[Id].Symbols[key].name}\r\n                                </div>\r\n                                {keys(DefaultOperation.Game.SceneList[Id].Symbols[key].Special).map((key1)=>\r\n                                    <div key={key1}  className=\"container_row\" style={{minWidth:\"100px\", border:\"1px solid black\", justifyContent:\"center\"}}>\r\n                                        <Checkbox\r\n                                        checked={DefaultOperation.Game.SceneList[Id].Symbols[key].Special[key1]}\r\n                                        onChange={()=>this.props.InputSymSpec({vID:Id, vKEY:key, vKEY1:key1})}\r\n                                        color=\"primary\"\r\n                                      />\r\n                                        \r\n                                    </div>\r\n                                )}\r\n                                </div>\r\n                                \r\n                                \r\n                            </div>\r\n                            )\r\n                :<div></div>\r\n            }\r\n    </div>   \r\n    );\r\n  }\r\n  \r\n}\r\n\r\nexport default connect(\r\n  state=>({state:state}),\r\n  dispatch => ({\r\n    InputSymSpec: (value) => {\r\n       \r\n    \r\n        dispatch(CreateAction(\"INPUT_SYMBOL_SPECIAL\", value))\r\n      },\r\n  })\r\n)(Special);\r\n","import {keys} from \"lodash\"\r\nimport {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport {CreateAction} from '../../../../../Store/action/MainAction';\r\n\r\n\r\nclass Paytable extends Component {\r\n  \r\n  render(){\r\n    const{DefaultOperation}=this.props.state\r\n    const{Id}=this.props\r\n    return (\r\n      <div className=\"container_column\" style={{overflow:\"auto\", maxWidth:\"600px\"}}>\r\n          <div className=\"container_row\" >\r\n            <div className=\"container_row\" style={{minWidth:\"100px\",border:\"1px solid black\"}}>\r\n                Symbol\r\n            </div>\r\n            {\r\n                \r\n                keys(DefaultOperation.Game.SceneList[Id].Symbols).length!=0?\r\n                    DefaultOperation.Game.SceneList[Id].Symbols[keys(DefaultOperation.Game.SceneList[Id].Symbols)[0]].Reelstrip!=0?\r\n                keys(DefaultOperation.Game.SceneList[Id].Symbols[keys(DefaultOperation.Game.SceneList[Id].Symbols)[0]].Reelstrip)\r\n                            .map((key, n=1)=>\r\n                            <div key={key}  className=\"container_row\" style={{minWidth:\"60px\", border:\"1px solid black\", justifyContent:\"center\"}}>\r\n                                \r\n                                {\"Reel \"+(n+1)}\r\n                            </div>)\r\n                :<div style={{display:\"none\"}}></div>:<div style={{display:\"none\"}}></div>\r\n            }\r\n          </div>\r\n          {\r\n                \r\n                keys(DefaultOperation.Game.SceneList[Id].Symbols).length!=0?\r\n                keys(DefaultOperation.Game.SceneList[Id].Symbols)\r\n                            .map((key)=>\r\n                            <div className=\"container_column\"  key={key}>\r\n                                <div className=\"container_row\">\r\n                                <div  className=\"container_row\" style={{minWidth:\"100px\", border:\"1px solid black\", justifyContent:\"center\", overflow:\"hidden\"}}>\r\n                                    {DefaultOperation.Game.SceneList[Id].Symbols[key].name}\r\n                                </div>\r\n                                {\r\n                                    keys(DefaultOperation.Game.SceneList[Id].Symbols[key].Reelstrip).map((key1)=>\r\n                                        <input onChange={(e)=>this.props.InputSymReel({vID:Id, vKEY:key, vKEY1:key1, targetV:e})} value={DefaultOperation.Game.SceneList[Id].Symbols[key].Reelstrip[key1]} key={key1}  className=\"container_row\" style={{minWidth:\"60px\", border:\"1px solid black\", textAlign:\"center\"}}/>\r\n                                    \r\n                                    )\r\n                                }\r\n                                </div>\r\n                                \r\n                                \r\n                            </div>\r\n                            )\r\n                :<div style={{display:\"none\"}}></div>\r\n            }\r\n    </div>   \r\n    );\r\n  }\r\n  \r\n}\r\n\r\nexport default connect(\r\n  state=>({state:state}),\r\n  dispatch => ({\r\n    InputSymReel: (value) => {\r\n       \r\n    \r\n      dispatch(CreateAction(\"INPUT_SYMBOL_REELSTRIP\", value))\r\n    },\r\n  })\r\n)(Paytable);\r\n","\r\nimport {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport {CreateAction} from '../../../../Store/action/MainAction';\r\nimport './DetailСofiguration.css'\r\nimport Symbols from './Symbols/Symbols'\r\nimport Paytable from './Paytable/Paytable'\r\nimport Substiture from './Substitutes/Substitutes'\r\nimport Special from './Secial/Secial'\r\nimport Reelstrip from './Reelstrip/Reelstrip'\r\n\r\nlet butStyle={height:\"30px\", justifyContent:\"flex-start\" }\r\nlet SlectedB={background:\"green\",height:\"30px\", justifyContent:\"flex-start\" }\r\nlet SlectedD={display:\"flex\"}\r\nclass DetailСofiguration extends Component {\r\n\r\n  render(){\r\n    const{DefaultOperation}=this.props.state\r\n    const{Id}=this.props\r\n    return (\r\n        <div className=\"containe_column\" style={{marginTop:\"40px\",}}>\r\n            <div className=\"con_sub\" onClick={()=>this.props.SelectMC({v1:\"Symbols\",v2:Id})} style={DefaultOperation.Game.SceneList[Id].ScernTypeOfConf.Symbols?SlectedB:butStyle}>\r\n                Symbols\r\n            </div>\r\n            <div className=\"table_scrin\" style={DefaultOperation.Game.SceneList[Id].ScernTypeOfConf.Symbols?SlectedD:{display:\"none\"}}>\r\n                <Symbols\r\n                    Id={Id}\r\n                />\r\n            </div>\r\n            <div className=\"con_sub\" onClick={()=>this.props.SelectMC({v1:\"Paytable\",v2:Id})} style={DefaultOperation.Game.SceneList[Id].ScernTypeOfConf.Paytable?SlectedB:butStyle}>\r\n                Paytable\r\n            </div>\r\n            <div className=\"table_scrin\" style={DefaultOperation.Game.SceneList[Id].ScernTypeOfConf.Paytable?SlectedD:{display:\"none\"}}>\r\n                <Paytable\r\n                    Id={Id}\r\n                />\r\n            </div>\r\n            <div className=\"con_sub\" onClick={()=>this.props.SelectMC({v1:\"Substiture\",v2:Id})} style={DefaultOperation.Game.SceneList[Id].ScernTypeOfConf.Substiture?SlectedB:butStyle}>\r\n                Substiture\r\n            </div>\r\n            <div className=\"table_scrin\" style={DefaultOperation.Game.SceneList[Id].ScernTypeOfConf.Substiture?SlectedD:{display:\"none\"}}>\r\n                \r\n                <Substiture Id={Id}/>\r\n            </div>\r\n            <div className=\"con_sub\" onClick={()=>this.props.SelectMC({v1:\"Special\",v2:Id})} style={DefaultOperation.Game.SceneList[Id].ScernTypeOfConf.Special?SlectedB:butStyle}>\r\n                Special\r\n            </div>\r\n            <div className=\"table_scrin\" style={DefaultOperation.Game.SceneList[Id].ScernTypeOfConf.Special?SlectedD:{display:\"none\"}}>\r\n                <Special\r\n                     Id={Id}\r\n                />\r\n            </div>\r\n            <div className=\"con_sub\" onClick={()=>this.props.SelectMC({v1:\"Reelstrip\",v2:Id})} style={DefaultOperation.Game.SceneList[Id].ScernTypeOfConf.Reelstrip?SlectedB:butStyle}>\r\n                Reelstrip\r\n            </div>\r\n            <div className=\"table_scrin\" style={DefaultOperation.Game.SceneList[Id].ScernTypeOfConf.Reelstrip?SlectedD:{display:\"none\"}}>\r\n                <Reelstrip\r\n                    Id={Id}\r\n                />\r\n            </div>\r\n        </div>\r\n    );\r\n  }\r\n  \r\n}\r\n\r\nexport default connect(\r\n  state=>({state:state}),\r\n  dispatch => ({SelectMC: (value) => {\r\n    \r\n      dispatch(CreateAction(\"SELECT_MENU_CONFIG\", value))\r\n      \r\n  },\r\n})\r\n)(DetailСofiguration);\r\n","\r\nimport {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\nimport Select from '@material-ui/core/Select';\r\nimport InputLabel from '@material-ui/core/InputLabel'\r\nimport MenuItem from '@material-ui/core/MenuItem'\r\n\r\n\r\nimport {CreateAction} from '../../../Store/action/MainAction';\r\nimport './ScrenScene.css'\r\nimport DetailConfiguration from './DetailСofiguration/DetailСofiguration'\r\n\r\n\r\nclass ScrenScene extends Component {\r\n  NS=(event)=>{\r\n    this.props.InputNS({v1:event.target.value, v2:this.props.Id})\r\n  }\r\n  GT = (event) => {\r\n   \r\n    this.props.InputGT({v1:event.target.value, v2:this.props.Id} );\r\n  };\r\n  NOR=(event)=>{\r\n    let num\r\n    let a = NaN\r\n     if(event.target.value!=\"\"){\r\n      num = parseInt(event.target.value.replace(/\\D+/g,\"\"))\r\n      \r\n      if(isNaN(num)){\r\n        num = \"\"\r\n        \r\n      }\r\n      this.props.InputNOR({v1:num, v2:this.props.Id} );\r\n     }\r\n    \r\n    else {\r\n      num = \"\"\r\n      this.props.InputNOR({v1:num, v2:this.props.Id} );\r\n    }\r\n    \r\n  }\r\n  render(){\r\n    const{DefaultOperation}=this.props.state\r\n    const{Id}=this.props\r\n    return (\r\n      <div className=\"ScrenScene\" style={{display:DefaultOperation.ScrenList[Id].display}}>\r\n          <div className=\"container_column\">\r\n            <div   className=\"container_row\">\r\n\r\n            <div  className=\"container_column\">\r\n            \r\n            <InputLabel id=\"SceneName\">SceneName </InputLabel>\r\n            <input className=\"con_input\" value={DefaultOperation.Game.SceneList[Id].SceneName} onChange={this.NS} style={{height:\"30px\"}}/>\r\n          \r\n            <InputLabel id=\"GameType\">GameType</InputLabel>\r\n            <Select labelId=\"GameType\" id=\"select\" onChange={this.GT} value={DefaultOperation.Game.SceneList[Id].GameType}>\r\n              <MenuItem value=\"Slot\">Slot</MenuItem>\r\n              <MenuItem value=\"Bonus\">Bonus</MenuItem>\r\n            </Select>\r\n          \r\n          \r\n            <InputLabel id=\"NumberofReels\">Number of Reels </InputLabel>\r\n            <input className=\"con_input\" onChange={this.NOR} style={{height:\"30px\"}} value={DefaultOperation.Game.SceneList[Id].NumberOfReels}/>\r\n          \r\n          </div>\r\n          <div className=\"container_row\" style={{justifyContent:\"flex-end\"}}>\r\n            <div className=\"con_but\" style={{width:\"90px\",height:\"25px\"}} onClick={()=>this.props.Delete(Id)}>\r\n              Delete\r\n            </div>\r\n          </div>\r\n\r\n            </div>\r\n            <DetailConfiguration\r\n              Id={Id}\r\n            />\r\n          </div>  \r\n      </div>\r\n    );\r\n  }\r\n  \r\n}\r\n\r\nexport default connect(\r\n  state=>({state:state}),\r\n  dispatch => ({\r\n    Delete: (value) => {\r\n      dispatch(CreateAction(\"DELETE_SCENE\", value))\r\n    },\r\n    InputNS: (value) => {\r\n        dispatch(CreateAction(\"INPUT_SCENE_NAME\", value))\r\n    },\r\n    InputGT: (value) => {\r\n        dispatch(CreateAction(\"INPUT_GAME_TYPE\", value))\r\n    },\r\n    InputNOR: (value) => {\r\n      dispatch(CreateAction(\"INPUT_NUM_REELS\", value))\r\n  },\r\n  })\r\n)(ScrenScene);\r\n","import {keys} from \"lodash\"\r\nimport {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport {CreateAction} from '../../Store/action/MainAction';\r\nimport './SlotsScenes.css'\r\nimport Bookmark from './ScrenScene/Bookmark'\r\nimport ScrenScene from './ScrenScene/ScrenScene'\r\n\r\n\r\nclass SlotsScenes extends Component {\r\n   \r\n\r\n  render(){\r\n    const{DefaultOperation}=this.props.state\r\n    return (\r\n      <div className=\"SlotsScenes\">\r\n        <div className=\"container_row\" style={{height:\"30px\",borderBottom:\"1px solid green\"}}>\r\n            <div className=\"container_row\">\r\n                \r\n                {\r\n                   DefaultOperation.Game!=undefined?\r\n                    keys(DefaultOperation.Game.SceneList)\r\n                    .map((key) =>\r\n                        <Bookmark key={key}\r\n                            Id={key}\r\n                        />\r\n                    ):<div></div>\r\n                    \r\n                        \r\n                }\r\n            </div>\r\n            <div className=\"con_but\" style={{height:\"100%\", width:\"30px\",border:\"none\",borderLeft:\"1px solid black\"}} onClick={this.props.AddScene}>\r\n                +\r\n            </div>\r\n        </div>\r\n        <div className=\"container_column\">\r\n        {\r\n                   DefaultOperation.Game!=undefined?\r\n                    keys(DefaultOperation.Game.SceneList)\r\n                    .map((key) =>\r\n                        <ScrenScene key={key}\r\n                            Id={key}\r\n                        />\r\n                    ):<div></div>\r\n                    \r\n                        \r\n                }\r\n             \r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n  \r\n}\r\n\r\nexport default connect(\r\n  state=>({state:state}),\r\n  dispatch => ({\r\n    AddScene: (state) => {\r\n        \r\n          dispatch(CreateAction(\"ADD_NEW_SCENE\"))\r\n          \r\n      },\r\n  })\r\n)(SlotsScenes);\r\n","import '../common/Style/main.css'\nimport {Component} from 'react'\nimport {connect} from 'react-redux'\n\nimport {CreateAction} from '../Store/action/MainAction';\nimport Header from '../componentsJS/Header/Header'\nimport SlotsScenes from '../componentsJS/SlotsScenes/SlotsScenes'\n\nclass App extends Component {\n  \n  render(){\n    return (\n      <div className=\"App\">\n         <Header/>\n         {\n                this.props.State.DefaultOperation.Game!=undefined?<SlotsScenes/>:<div></div>\n          }\n      </div>\n    );\n  }\n  \n}\n\nexport default connect(\n  state=>({State:state}),\n  dispatch => ({\n    AddContact: () => {\n      dispatch(CreateAction())\n    }\n  })\n)(App);\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","const initialState = {\r\n    FirstBut:\"Start\",\r\n    FirstInputId:\"\",\r\n    FirstInputName:\"\"\r\n}\r\n \r\nexport default initialState;","\r\nimport {keys} from \"lodash\"\r\nimport {omit} from 'lodash'\r\n\r\n\r\nfunction CreateScene(state){\r\n    if(state.FirstBut==\"Start\"){\r\n        return{\r\n            ...state,\r\n            Game:{\r\n                GameName:state.FirstInputName,\r\n                Id:state.FirstInputId,\r\n                SceneList:{\r\n                    0:{\r\n                        id:\"0\",\r\n                        SceneName : \"SceneName\",\r\n                        GameType : \"Slot\",\r\n                        NumberOfReels:5,\r\n                        Reels : {\r\n                            0:{\r\n                                name:\"Reel1\"\r\n                            },\r\n                            1:{\r\n                                name:\"Reel1\"\r\n                            },\r\n                            2:{\r\n                                name:\"Reel1\"\r\n                            },\r\n                            3:{\r\n                                name:\"Reel1\"\r\n                            },\r\n                            4:{\r\n                                name:\"Reel1\"\r\n                            },\r\n                        },\r\n                        ScernTypeOfConf:{\r\n                            Symbols:false,\r\n                            Paytable:false,\r\n                            Substitutes:false,\r\n                            Special:false,\r\n                            Reelstrip:false,\r\n                        },\r\n                        SlectedScernTypeOfConf:\"\",\r\n                        Symbols:{\r\n                            \r\n                        },\r\n                        \r\n                        TotalRTP: \"0\",\r\n                        BaseGameRTP: \"0\",\r\n                        FreespinsRTP: \"0\",\r\n                        BonusGameRTP: \"0\",\r\n                        BasegameHitRate: \"0\",\r\n                        HitRate:{},\r\n                        Combinations:{},\r\n                        Returns:{}\r\n                    }\r\n                }\r\n            },\r\n            \r\n            \r\n            ScrenList:{\r\n                ...state.ScrenList,\r\n                    0:{\r\n                        Id:\"\"+0+\"\",\r\n                        display:\"flex\"\r\n                    },\r\n                },\r\n                BookmarkList:{\r\n                    ...state.BookmarkList,\r\n                        0:{\r\n                            Id:\"\"+0+\"\",\r\n                            backg:\"green\"\r\n                        },\r\n                    },\r\n                BookmarkOn:0\r\n            \r\n        }\r\n           \r\n    }\r\n    else if(keys(state.Game.SceneList).length==0){\r\n        return{\r\n            ...state,\r\n            Game:{\r\n                GameName:state.FirstInputName,\r\n                Id:state.FirstInputId,\r\n                SceneList:{\r\n                    0:{\r\n                        id:\"0\",\r\n                        SceneName : \"SceneName\",\r\n                        GameType : \"Slot\",\r\n                        NumberOfReels:5,\r\n                        Reels : {\r\n                            0:{\r\n                                name:\"Reel1\"\r\n                            },\r\n                            1:{\r\n                                name:\"Reel1\"\r\n                            },\r\n                            2:{\r\n                                name:\"Reel1\"\r\n                            },\r\n                            3:{\r\n                                name:\"Reel1\"\r\n                            },\r\n                            4:{\r\n                                name:\"Reel1\"\r\n                            },\r\n                        },\r\n                        ScernTypeOfConf:{\r\n                            Symbols:false,\r\n                            Paytable:false,\r\n                            Substitutes:false,\r\n                            Special:false,\r\n                            Reelstrip:false,\r\n                        },\r\n                        SlectedScernTypeOfConf:\"\",\r\n                        Symbols:{\r\n                            \r\n                        },\r\n                        \r\n                        TotalRTP: \"0\",\r\n                        BaseGameRTP: \"0\",\r\n                        FreespinsRTP: \"0\",\r\n                        BonusGameRTP: \"0\",\r\n                        BasegameHitRate: \"0\",\r\n                        HitRate:{},\r\n                        Combinations:{},\r\n                        Returns:{}\r\n                    }\r\n                }\r\n            },\r\n            \r\n            \r\n            ScrenList:{\r\n                ...state.ScrenList,\r\n                    0:{\r\n                        Id:\"\"+0+\"\",\r\n                        display:\"flex\"\r\n                    },\r\n                },\r\n                BookmarkList:{\r\n                    ...state.BookmarkList,\r\n                        0:{\r\n                            Id:\"\"+0+\"\",\r\n                            backg:\"green\"\r\n                        },\r\n                    },\r\n                BookmarkOn:0\r\n            \r\n        }\r\n    }\r\n    else{\r\n        let N = 0\r\n        let C = false\r\n        while(!C){\r\n            \r\n            C=true;\r\n            for(let i = 0;i<keys(state.Game.SceneList).length;i++)\r\n            \r\n            {\r\n                if(N==keys(state.Game.SceneList)[i])\r\n                 C=false;\r\n            }\r\n            if(!C)\r\n                N++;\r\n            \r\n        }\r\n        \r\n        \r\n        \r\n        return{\r\n            ...state,\r\n            Game:{\r\n                ...state.Game,\r\n                SceneList:{\r\n                    ...state.Game.SceneList,\r\n                    [N]:{\r\n                        \r\n                        id:[N],\r\n                        SceneName : \"SceneName\",\r\n                        GameType : \"Slot\",\r\n                        NumberOfReels:5,\r\n                        Reels : {\r\n                            0:{\r\n                                name:\"Reel1\"\r\n                            },\r\n                            1:{\r\n                                name:\"Reel1\"\r\n                            },\r\n                            2:{\r\n                                name:\"Reel1\"\r\n                            },\r\n                            3:{\r\n                                name:\"Reel1\"\r\n                            },\r\n                            4:{\r\n                                name:\"Reel1\"\r\n                            }\r\n                        },\r\n                        ScernTypeOfConf:{\r\n                            Symbols:false,\r\n                            Paytable:false,\r\n                            Substitutes:false,\r\n                            Special:false,\r\n                            Reelstrip:false,\r\n                        },\r\n                        SlectedScernTypeOfConf:\"\",\r\n                        Symbols:{\r\n                            \r\n                        },\r\n                        \r\n                        TotalRTP: \"0\",\r\n                        BaseGameRTP: \"0\",\r\n                        FreespinsRTP: \"0\",\r\n                        BonusGameRTP: \"0\",\r\n                        BasegameHitRate: \"0\",\r\n                        HitRate:{},\r\n                        Combinations:{},\r\n                        Returns:{}\r\n                    }\r\n                }\r\n            },\r\n            ScrenList:{\r\n            ...state.ScrenList,\r\n                [N]:{\r\n                    Id:\"\"+N+\"\",\r\n                    display:\"none\"\r\n                },\r\n            },\r\n            BookmarkList:{\r\n                ...state.BookmarkList,\r\n                    [N]:{\r\n                        Id:\"\"+N+\"\",\r\n                        backg:\"white\"\r\n                    },\r\n                },\r\n        }\r\n    }\r\n    return state\r\n}\r\nexport default CreateScene","import {keys} from \"lodash\"\r\nimport {omit} from 'lodash'\r\n\r\nfunction InputFid(state, action){\r\n    return{\r\n        ...state,\r\n        FirstInputId: action.paylot\r\n    }\r\n}\r\nfunction InputFN(state, action){\r\n    return{\r\n        ...state,\r\n        FirstInputName: action.paylot\r\n    }\r\n}\r\nfunction InputSN(state, action){\r\n    return {\r\n        ...state,\r\n        Game:{\r\n            ...state.Game,\r\n            SceneList:{\r\n                ...state.Game.SceneList,\r\n                [action.paylot.v2]:{\r\n                    ...state.Game.SceneList[action.paylot.v2],\r\n                    SceneName : action.paylot.v1,\r\n                }\r\n            }\r\n        },\r\n        \r\n        \r\n    }\r\n}\r\nfunction InputGT(state, action){\r\n    return {\r\n        ...state,\r\n        Game:{\r\n            ...state.Game,\r\n            SceneList:{\r\n                ...state.Game.SceneList,\r\n                [action.paylot.v2]:{\r\n                    ...state.Game.SceneList[action.paylot.v2],\r\n                    GameType : action.paylot.v1,\r\n                }\r\n            }\r\n        },\r\n        \r\n        \r\n    }\r\n}\r\n\r\nfunction InputNOR(state, action){\r\n    let Nof = state.Game.SceneList[action.paylot.v2].NumberOfReels\r\n    let nValue = action.paylot.v1\r\n    let symbols=state.Game.SceneList[action.paylot.v2].Symbols\r\n    if(nValue<Nof){\r\n        for(let i = nValue+1;i<=Nof;i++){\r\n            for(let a = 0;a<keys(symbols).length;a++){\r\n                symbols={\r\n                    ...symbols,\r\n                    [keys(symbols)[a]]:{\r\n                        ...symbols[keys(symbols)[a]],\r\n                        Reelstrip:{\r\n                            ...omit(symbols[keys(symbols)[a]].Reelstrip, i)\r\n                        }\r\n                    }\r\n                }\r\n                \r\n            }\r\n        }\r\n    }\r\n    else if(nValue>Nof){\r\n        for(let i = Nof+1;i<=nValue;i++){\r\n            for(let a = 0;a<keys(symbols).length;a++){\r\n                symbols={\r\n                    ...symbols,\r\n                    [keys(symbols)[a]]:{\r\n                        ...symbols[keys(symbols)[a]],\r\n                        Reelstrip:{\r\n                            ...symbols[keys(symbols)[a]].Reelstrip,\r\n                            [i]:0\r\n                        }\r\n                    }\r\n                }\r\n                \r\n            }\r\n        }\r\n    }\r\n    return {\r\n        ...state,\r\n        Game:{\r\n            ...state.Game,\r\n            SceneList:{\r\n                ...state.Game.SceneList,\r\n                [action.paylot.v2]:{\r\n                    ...state.Game.SceneList[action.paylot.v2],\r\n                    NumberOfReels : nValue,\r\n                    Symbols:{\r\n                        ...symbols\r\n                    }\r\n                }\r\n            }\r\n        },\r\n        \r\n    }\r\n}\r\nfunction InputSymN(state, action){\r\n    let vID=action.paylot.vID, vKEY=action.paylot.vKEY, targetV=action.paylot.targetV.target.value\r\n        return {\r\n            ...state,\r\n            Game:{\r\n                ...state.Game,\r\n                SceneList:{\r\n                    ...state.Game.SceneList,\r\n                    [vID]:{\r\n                        ...state.Game.SceneList[vID],\r\n                        \r\n                        Symbols:{\r\n                            ...state.Game.SceneList[vID].Symbols,\r\n                            [vKEY]:{\r\n                                ...state.Game.SceneList[vID].Symbols[[vKEY]],\r\n                                name:targetV\r\n                            }\r\n                        },\r\n                    }\r\n                }\r\n            },\r\n            \r\n        }\r\n\r\n}\r\nfunction InputSymID(state, action){\r\n    let vID=action.paylot.vID, vKEY=action.paylot.vKEY, targetV=action.paylot.targetV.target.value\r\n        return {\r\n            ...state,\r\n            Game:{\r\n                ...state.Game,\r\n                SceneList:{\r\n                    ...state.Game.SceneList,\r\n                    [vID]:{\r\n                        ...state.Game.SceneList[vID],\r\n                        \r\n                        Symbols:{\r\n                            ...state.Game.SceneList[vID].Symbols,\r\n                            [vKEY]:{\r\n                                ...state.Game.SceneList[vID].Symbols[[vKEY]],\r\n                                id:targetV\r\n                            }\r\n                        },\r\n                    }\r\n                }\r\n            },\r\n            \r\n        }\r\n\r\n}\r\nfunction InputSymPayT(state, action){\r\n    let vID=action.paylot.vID, vKEY=action.paylot.vKEY, num\r\n    let vKEY1=action.paylot.vKEY1, targetV=action.paylot.targetV.target.value\r\n    if(targetV!=\"\"){\r\n             num = parseInt(targetV.replace(/\\D+/g,\"\"))\r\n             if(isNaN(num)){\r\n                num = \"\"\r\n                \r\n              }\r\n    }\r\n    else{\r\n        num=\"\"\r\n    }\r\n    \r\n        return {\r\n            ...state,\r\n            Game:{\r\n                ...state.Game,\r\n                SceneList:{\r\n                    ...state.Game.SceneList,\r\n                    [vID]:{\r\n                        ...state.Game.SceneList[vID],\r\n                        \r\n                        Symbols:{\r\n                            ...state.Game.SceneList[vID].Symbols,\r\n                            [vKEY]:{\r\n                                ...state.Game.SceneList[vID].Symbols[[vKEY]],\r\n                                Paytable:{\r\n                                    ...state.Game.SceneList[vID].Symbols[[vKEY]].Paytable,\r\n                                    [vKEY1]:num\r\n                                }\r\n                            }\r\n                        },\r\n                    }\r\n                }\r\n            },\r\n            \r\n        }\r\n\r\n}\r\n\r\nfunction InputSymSub(state, action){\r\n    let vID=action.paylot.vID, vKEY=action.paylot.vKEY\r\n    let vKEY1=action.paylot.vKEY1\r\n    let targetV=!state.Game.SceneList[vID].Symbols[vKEY].Substiture[vKEY1].value\r\n    \r\n    \r\n    \r\n        return {\r\n            ...state,\r\n            Game:{\r\n                ...state.Game,\r\n                SceneList:{\r\n                    ...state.Game.SceneList,\r\n                    [vID]:{\r\n                        ...state.Game.SceneList[vID],\r\n                        \r\n                        Symbols:{\r\n                            ...state.Game.SceneList[vID].Symbols,\r\n                            [vKEY]:{\r\n                                ...state.Game.SceneList[vID].Symbols[vKEY],\r\n                                Substiture:{\r\n                                    ...state.Game.SceneList[vID].Symbols[vKEY].Substiture,\r\n                                    [vKEY1]:{\r\n                                       ...state.Game.SceneList[vID].Symbols[vKEY].Substiture[vKEY1],\r\n                                       value:targetV \r\n                                    }\r\n                                }\r\n                                \r\n                            }\r\n                        },\r\n                    }\r\n                }\r\n            },\r\n            \r\n        }\r\n\r\n}\r\nfunction InputSymSpec(state, action){\r\n    let vID=action.paylot.vID, vKEY=action.paylot.vKEY\r\n    let vKEY1=action.paylot.vKEY1\r\n    let targetV=!state.Game.SceneList[vID].Symbols[vKEY].Special[vKEY1]\r\n    \r\n    \r\n    \r\n        return {\r\n            ...state,\r\n            Game:{\r\n                ...state.Game,\r\n                SceneList:{\r\n                    ...state.Game.SceneList,\r\n                    [vID]:{\r\n                        ...state.Game.SceneList[vID],\r\n                        \r\n                        Symbols:{\r\n                            ...state.Game.SceneList[vID].Symbols,\r\n                            [vKEY]:{\r\n                                ...state.Game.SceneList[vID].Symbols[vKEY],\r\n                                Special:{\r\n                                    ...state.Game.SceneList[vID].Symbols[vKEY].Special,\r\n                                    [vKEY1]:targetV \r\n                                }\r\n                                \r\n                            }\r\n                        },\r\n                    }\r\n                }\r\n            },\r\n            \r\n        }\r\n\r\n}\r\nfunction InputSymReel(state, action){\r\n    let vID=action.paylot.vID, vKEY=action.paylot.vKEY, num\r\n    let vKEY1=action.paylot.vKEY1, targetV=action.paylot.targetV.target.value\r\n    if(targetV!=\"\"){\r\n             num = parseInt(targetV.replace(/\\D+/g,\"\"))\r\n             if(isNaN(num)){\r\n                num = \"\"\r\n                \r\n              }\r\n    }\r\n    else{\r\n        num=\"\"\r\n    }\r\n    \r\n        return {\r\n            ...state,\r\n            Game:{\r\n                ...state.Game,\r\n                SceneList:{\r\n                    ...state.Game.SceneList,\r\n                    [vID]:{\r\n                        ...state.Game.SceneList[vID],\r\n                        \r\n                        Symbols:{\r\n                            ...state.Game.SceneList[vID].Symbols,\r\n                            [vKEY]:{\r\n                                ...state.Game.SceneList[vID].Symbols[[vKEY]],\r\n                                Reelstrip:{\r\n                                    ...state.Game.SceneList[vID].Symbols[[vKEY]].Reelstrip,\r\n                                    [vKEY1]:num\r\n                                }\r\n                            }\r\n                        },\r\n                    }\r\n                }\r\n            },\r\n            \r\n        }\r\n\r\n}\r\nexport {InputFid, InputFN, InputSN, InputGT, InputNOR, InputSymN, InputSymID, InputSymPayT, InputSymSub, InputSymSpec, InputSymReel}","import {keys} from \"lodash\"\r\nimport {omit} from 'lodash'\r\n\r\nfunction DeleteScene(state, action){\r\n    if(keys(state.BookmarkList).length==1)\r\n            return{\r\n                ...state,\r\n                Game:{\r\n                    ...state.Game,\r\n                    SceneList:{\r\n                        ...omit(state.Game.SceneList,action.paylot)\r\n                    }\r\n                    \r\n                },\r\n                BookmarkList:{\r\n                    ...omit(state.BookmarkList,action.paylot),\r\n                },\r\n                ScrenList:{\r\n                    ...omit(state.ScrenList,action.paylot)\r\n                },\r\n                BookmarkOn:0\r\n            }\r\n         else{\r\n             let k = keys(omit(state.ScrenList,action.paylot))[0]\r\n             \r\n            return{\r\n                ...state,\r\n                Game:{\r\n                    ...state.Game,\r\n                    SceneList:{\r\n                        \r\n                        ...omit(state.Game.SceneList,action.paylot),\r\n                        \r\n                    }\r\n                    \r\n                },\r\n                BookmarkList:{\r\n                    \r\n                    ...omit(state.BookmarkList,action.paylot),\r\n                    [k]:{\r\n                        Id:\"\"+k+\"\",\r\n                        backg:\"green\"\r\n                    },\r\n                },\r\n                ScrenList:{\r\n                    \r\n                    ...omit(state.ScrenList,action.paylot),\r\n                    [k]:{\r\n                        Id:\"\"+k+\"\",\r\n                        display:\"flex\"\r\n                    },\r\n                },\r\n                BookmarkOn:k\r\n            }\r\n         }\r\n}\r\n\r\nexport {DeleteScene}","import {keys} from \"lodash\"\r\nimport {omit} from 'lodash'\r\n\r\nfunction Select(state, action){\r\n    \r\n    if(state.BookmarkOn!=action.paylot)\r\n    return{\r\n        ...state,\r\n        ScrenList:{\r\n            ...state.ScrenList,\r\n                [action.paylot]:{\r\n                    Id:\"\"+action.paylot+\"\",\r\n                    display:\"flex\"\r\n                },\r\n                [state.BookmarkOn]:{\r\n                    Id:\"\"+[state.BookmarkOn]+\"\",\r\n                    display:\"none\"\r\n                },\r\n            },\r\n        BookmarkList:{\r\n                ...state.BookmarkList,\r\n                    [action.paylot]:{\r\n                        Id:\"\"+action.paylot+\"\",\r\n                        backg:\"green\"\r\n                    },\r\n                    [state.BookmarkOn]:{\r\n                        Id:\"\"+[state.BookmarkOn]+\"\",\r\n                        backg:\"white\"\r\n                    },\r\n        },\r\n        BookmarkOn:action.paylot\r\n    }\r\n    else{\r\n        return{\r\n            ...state\r\n        }\r\n    }\r\n}\r\n\r\nfunction SelectMC(state, action){\r\n    \r\n    let v, s=action.paylot.v1, s2=\"\"\r\n    switch(action.paylot.v1){\r\n        case \"Symbols\":{\r\n            \r\n            if(state.Game.SceneList[action.paylot.v2].ScernTypeOfConf.Symbols){\r\n                s2=\"\"\r\n                v=false\r\n            }\r\n            else{\r\n                if(state.Game.SceneList[action.paylot.v2].SlectedScernTypeOfConf!=\"Symbols\")\r\n                    s2=state.Game.SceneList[action.paylot.v2].SlectedScernTypeOfConf\r\n                v=true\r\n            }\r\n            break\r\n        }\r\n        case \"Paytable\":{\r\n            if(state.Game.SceneList[action.paylot.v2].ScernTypeOfConf.Paytable){\r\n                s2=\"\"\r\n                v=false\r\n            }\r\n            else{\r\n                if(state.Game.SceneList[action.paylot.v2].SlectedScernTypeOfConf!=\"Paytable\")\r\n                    s2=state.Game.SceneList[action.paylot.v2].SlectedScernTypeOfConf\r\n                v=true\r\n            }\r\n            break\r\n        }\r\n        case \"Substiture\":{\r\n            if(state.Game.SceneList[action.paylot.v2].ScernTypeOfConf.Substiture){\r\n                s2=\"\"\r\n                v=false\r\n            }\r\n            else{\r\n                if(state.Game.SceneList[action.paylot.v2].SlectedScernTypeOfConf!=\"Substiture\")\r\n                    s2=state.Game.SceneList[action.paylot.v2].SlectedScernTypeOfConf\r\n                v=true\r\n            }\r\n            break\r\n        }\r\n        case \"Special\":{\r\n            if(state.Game.SceneList[action.paylot.v2].ScernTypeOfConf.Special){\r\n                s2=\"\"\r\n                v=false\r\n            }\r\n            else{\r\n                if(state.Game.SceneList[action.paylot.v2].SlectedScernTypeOfConf!=\"Special\")\r\n                    s2=state.Game.SceneList[action.paylot.v2].SlectedScernTypeOfConf\r\n                v=true\r\n            }\r\n            break\r\n        }\r\n        case \"Reelstrip\":{\r\n            if(state.Game.SceneList[action.paylot.v2].ScernTypeOfConf.Reelstrip){\r\n                s2=\"\"\r\n                v=false\r\n            }\r\n            else{\r\n                if(state.Game.SceneList[action.paylot.v2].SlectedScernTypeOfConf!=\"Reelstrip\")\r\n                    s2=state.Game.SceneList[action.paylot.v2].SlectedScernTypeOfConf\r\n                v=true\r\n            }\r\n            break\r\n        }\r\n    }\r\n    if(s!=s2) \r\n    if(state.Game.SceneList[action.paylot.v2].SlectedScernTypeOfConf!=\"\") \r\n    return{\r\n        ...state,\r\n        Game:{\r\n            ...state.Game,\r\n            SceneList:{\r\n                ...state.Game.SceneList,\r\n                [action.paylot.v2]:{\r\n                    ...state.Game.SceneList[action.paylot.v2],\r\n                    \r\n                    ScernTypeOfConf:{\r\n                        ...state.Game.SceneList[action.paylot.v2].ScernTypeOfConf,\r\n                        [s]:v,\r\n                        [s2]:!v,\r\n                    },\r\n                    SlectedScernTypeOfConf:action.paylot.v1\r\n                }\r\n            }\r\n        },\r\n        \r\n    }\r\n    else\r\n    return{\r\n        ...state,\r\n        Game:{\r\n            ...state.Game,\r\n            SceneList:{\r\n                ...state.Game.SceneList,\r\n                [action.paylot.v2]:{\r\n                    ...state.Game.SceneList[action.paylot.v2],\r\n                    \r\n                    ScernTypeOfConf:{\r\n                        ...state.Game.SceneList[action.paylot.v2].ScernTypeOfConf,\r\n                        [s]:v,\r\n                        \r\n                    },\r\n                    SlectedScernTypeOfConf:action.paylot.v1\r\n                }\r\n            }\r\n        },\r\n        \r\n    }\r\n    return{\r\n        ...state,\r\n        Game:{\r\n            ...state.Game,\r\n            SceneList:{\r\n                ...state.Game.SceneList,\r\n                [action.paylot.v2]:{\r\n                    ...state.Game.SceneList[action.paylot.v2],\r\n                    \r\n                    ScernTypeOfConf:{\r\n                        ...state.Game.SceneList[action.paylot.v2].ScernTypeOfConf,\r\n                        [s]:v,\r\n                        \r\n                    },\r\n                    SlectedScernTypeOfConf:\"\"\r\n                }\r\n            }\r\n        },\r\n        \r\n    }\r\n}\r\n\r\nexport {Select, SelectMC}","import {keys} from \"lodash\"\r\nimport {omit} from 'lodash'\r\n\r\nfunction StartReset(state, action){\r\n    if(state.FirstBut==\"Start\"){\r\n        return{\r\n            ...state,\r\n            FirstBut:\"Reset\"\r\n        }\r\n    }\r\n    else{\r\n        return{\r\n            \r\n            \r\n            \r\n                FirstBut:\"Start\",\r\n                FirstInputId:\"\",\r\n                FirstInputName:\"\"\r\n            \r\n        }\r\n    }\r\n\r\n}\r\nexport {StartReset}","import {keys} from \"lodash\"\r\nimport {omit} from 'lodash'\r\n\r\nfunction AddSymbol(state, action){\r\n    let PayT={}\r\n    let Subst={}\r\n    let Reel={}\r\n    let masKey\r\n    let N=0\r\n    let symbols=state.Game.SceneList[action.paylot].Symbols\r\n    let S={}\r\n \r\n    let State = state\r\n    \r\n    if(keys(state.Game.SceneList[action.paylot].Symbols).length==0)\r\n    {\r\n        \r\n        N=0;\r\n        PayT={\r\n            ...PayT,\r\n            1:0\r\n        }\r\n        \r\n        for(let i = 0;i<state.Game.SceneList[action.paylot].NumberOfReels;i++){\r\n            Reel={\r\n                ...Reel,\r\n                [i+1]:0\r\n            }\r\n            \r\n        }\r\n        symbols={\r\n            \r\n            [N]:{\r\n                name:\"Symbol_\"+N,\r\n                id:\"s\"+N+\"w\",\r\n                Paytable:{\r\n                    [N+1]:0\r\n                },\r\n                Substiture:{\r\n                    [N]:{\r\n                        id:N,\r\n                        value:false\r\n                    }\r\n                   \r\n                },\r\n                Special:{\r\n                    isWild:false,\r\n                    isScatter:false,\r\n                    isSpecific:false\r\n                },\r\n                Reelstrip:{\r\n                    ...Reel\r\n                }\r\n            },\r\n            \r\n        }\r\n        \r\n    }\r\n        \r\n    else\r\n        {\r\n            \r\n            let C = false\r\n            while(!C){\r\n                \r\n                C=true;\r\n                for(let i = 0;i<keys(state.Game.SceneList[action.paylot].Symbols).length;i++)\r\n            \r\n                {\r\n                    if(N==keys(state.Game.SceneList[action.paylot].Symbols)[i])\r\n                    C=false;\r\n                }\r\n                if(!C)\r\n                    N++;\r\n            \r\n            }\r\n            \r\n            \r\n            masKey=keys(State.Game.SceneList[action.paylot].Symbols)\r\n            for(var i = 0;i<masKey.length+1;i++)\r\n            {\r\n                if(i<masKey.length)\r\n                symbols={\r\n                    ...symbols,\r\n                    [masKey[i]]:{\r\n                        ...symbols[masKey[i]],\r\n                        Paytable:{\r\n                            ...symbols[masKey[i]].Paytable,\r\n                            [masKey.length+1]:0\r\n                           \r\n                        }\r\n                    }\r\n                }\r\n                \r\n                \r\n            }\r\n            for(let i = 0;i<state.Game.SceneList[action.paylot].NumberOfReels;i++){\r\n                Reel={\r\n                    ...Reel,\r\n                    [i+1]:0\r\n                }\r\n            }\r\n                \r\n            for(let i = 1;i<=masKey.length+1;i++)\r\n            {\r\n                \r\n                PayT={\r\n                    ...PayT,\r\n                    [i]:0\r\n                }\r\n                if(i<masKey.length+1)\r\n                Subst={\r\n                    ...Subst,\r\n                    [masKey[i-1]]:{\r\n                        id:N,\r\n                        value:false\r\n                    }\r\n                }\r\n                else\r\n                Subst={\r\n                    ...Subst,\r\n                    [N]:{\r\n                        id:N,\r\n                        value:false\r\n                    }\r\n                }\r\n            }\r\n            for(var i = 0;i<masKey.length+1;i++)\r\n            {\r\n                if(i<masKey.length)\r\n                symbols={\r\n                    ...symbols,\r\n                    [masKey[i]]:{\r\n                        ...symbols[masKey[i]],\r\n                        Substiture:{\r\n                            ...symbols[masKey[i]].Substiture,\r\n                            [N]:{\r\n                                id:N,\r\n                                value:false\r\n                            }\r\n                            \r\n                        }\r\n                    }\r\n                }\r\n                \r\n                \r\n            }\r\n            symbols={\r\n              ...symbols,\r\n              [N]:{\r\n                name:\"Symbol_\"+N,\r\n                id:\"s\"+N+\"w\",\r\n                Paytable:{\r\n                    ...PayT,\r\n                },\r\n                Substiture:{\r\n                    ...Subst\r\n                },\r\n                Special:{\r\n                    isWild:false,\r\n                    isScatter:false,\r\n                    isSpecific:false\r\n                },\r\n                Reelstrip:{\r\n                    ...Reel\r\n                }\r\n              }\r\n            }\r\n            \r\n        }\r\n    return {\r\n        ...state,\r\n        Game:{\r\n            ...state.Game,\r\n            SceneList:{\r\n                ...state.Game.SceneList,\r\n                [action.paylot]:{\r\n                    ...state.Game.SceneList[action.paylot],\r\n                    \r\n                    Symbols:{\r\n                        ...symbols\r\n                    },\r\n                }\r\n            }\r\n        },\r\n        \r\n    }\r\n}\r\n\r\nexport {AddSymbol}","import {keys} from \"lodash\"\r\nimport {omit} from 'lodash'\r\n\r\nfunction DeleteSymbol(state, action){\r\n    let symbols = state.Game.SceneList[action.paylot.v1].Symbols\r\n    \r\n    \r\n    symbols={\r\n        \r\n        ...omit(symbols,action.paylot.v2)\r\n    }\r\n    let sarray=keys(symbols)\r\n    \r\n    \r\n    for(let i = 0;i<sarray.length;i++){\r\n        \r\n        \r\n        symbols={\r\n            ...symbols,\r\n            [sarray[i]]:{\r\n                ...symbols[sarray[i]],\r\n                Paytable:{\r\n                    ...omit(symbols[sarray[i]].Paytable, sarray.length+1)\r\n\r\n                }\r\n            }\r\n        }\r\n       \r\n        \r\n    }\r\n    for(let i = 0;i<sarray.length;i++){\r\n        \r\n       \r\n        symbols={\r\n            ...symbols,\r\n            [sarray[i]]:{\r\n                ...symbols[sarray[i]],\r\n                Substiture:{\r\n                    ...omit(symbols[sarray[i]].Substiture, action.paylot.v2)\r\n\r\n                }\r\n            }\r\n        }\r\n       \r\n        \r\n    }\r\n    \r\n    \r\n    return {\r\n        ...state,\r\n        Game:{\r\n            ...state.Game,\r\n            SceneList:{\r\n                ...state.Game.SceneList,\r\n                [action.paylot.v1]:{\r\n                    ...state.Game.SceneList[action.paylot.v1],\r\n                    \r\n                    Symbols:{\r\n                        \r\n                        ...symbols\r\n                    },\r\n                }\r\n            }\r\n        },\r\n        \r\n    }\r\n}\r\nexport {DeleteSymbol}","import {keys} from \"lodash\"\r\nimport {omit} from 'lodash'\r\n\r\nimport initialState from './initialState';\r\nimport CreateScene from './components/CreateScene'\r\nimport {InputFid, InputFN, InputSN, InputGT, InputNOR, InputSymN, InputSymID, InputSymPayT, InputSymSub, InputSymSpec, InputSymReel} from './components/Inputs'\r\nimport {DeleteScene} from './components/Deletes'\r\nimport {Select, SelectMC} from './components/Select' \r\nimport {StartReset} from './components/StartReset'\r\nimport {AddSymbol} from './components/AddSymbol'\r\nimport {DeleteSymbol} from './components/DeleteSymbol'\r\n\r\n function DefaultOpration(state = initialState, action){\r\n    switch(action.type) {\r\n        \r\n        \r\n        case \"ADD_NEW_SCENE\": {\r\n            return CreateScene(state, action)\r\n        }\r\n        case \"ADD_SYMBOL\": {\r\n            return AddSymbol(state, action)\r\n        }\r\n        case \"DELETE_SCENE\":{\r\n         return DeleteScene(state, action)\r\n        }\r\n        case \"DELETE_SYMBOL\":{\r\n            return DeleteSymbol(state, action)\r\n           }\r\n        case \"SELECT\":{\r\n            return Select(state, action)\r\n        }\r\n        case \"SELECT_MENU_CONFIG\":{\r\n            return SelectMC(state, action)\r\n        }\r\n        case \"START_RESET\":{\r\n            return StartReset(state, action)\r\n        }\r\n        case \"INPUT_FID\":{\r\n            return InputFid(state, action)\r\n        }\r\n        case \"INPUT_FNAME\":{\r\n           return InputFN(state, action)\r\n        }\r\n        case \"INPUT_SCENE_NAME\": {\r\n            return InputSN(state, action)\r\n        }\r\n        case \"INPUT_NUM_REELS\": {\r\n            return InputNOR(state, action)\r\n        }\r\n        case \"INPUT_GAME_TYPE\": {\r\n            return InputGT(state, action)\r\n        }\r\n        case \"INPUT_SYMBOL_NAME\":{\r\n            return InputSymN(state, action)\r\n        }\r\n        case \"INPUT_SYMBOL_ID\":{\r\n            return InputSymID(state, action)\r\n        }\r\n\r\n        case \"INPUT_SYMBOL_PAYTABLE\":{\r\n            return InputSymPayT(state, action)\r\n        }\r\n        case \"INPUT_SYMBOL_SUBSTITURE\":{\r\n            return InputSymSub(state, action)\r\n        }\r\n        case \"INPUT_SYMBOL_SPECIAL\":{\r\n            return InputSymSpec(state, action)\r\n        }\r\n        case \"INPUT_SYMBOL_REELSTRIP\":{\r\n            return InputSymReel(state, action)\r\n        }\r\n        \r\n        default: return state;\r\n    }\r\n} \r\nexport default DefaultOpration;","\r\n\r\nimport DefaultOperation from './DefaultOperation'\r\n\r\nimport { combineReducers } from 'redux';\r\n  \r\nexport default combineReducers({\r\n    \r\n    DefaultOperation,\r\n    \r\n    \r\n    \r\n\r\n  })\r\n  ","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux'\nimport App from './App/App';\nimport reportWebVitals from './reportWebVitals';\n\nimport configureStore  from './Store/CreateStore';\n\n\n  const store = configureStore();\n \n  //Note that subscribe() returns a function for unregistering the listener\n   \n\n\n\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n\nreportWebVitals();\n","import {createStore} from 'redux';  \r\nimport MainReducer from './reducers/MainReducer';  \r\n \r\n/*Create a function called configureStore */\r\n \r\nexport default function configureStore() {  \r\n  return createStore(MainReducer);\r\n}"],"sourceRoot":""}