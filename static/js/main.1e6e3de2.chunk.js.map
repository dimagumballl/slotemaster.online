{"version":3,"sources":["Store/action/MainAction.js","componentsJS/Header/Header.js","componentsJS/SlotsScenes/ScrenScene/Bookmark.js","componentsJS/SlotsScenes/ScrenScene/DetailСofiguration/Symbols/Symbols.js","componentsJS/SlotsScenes/ScrenScene/DetailСofiguration/Paytable/Paytable.js","componentsJS/SlotsScenes/ScrenScene/DetailСofiguration/Substitutes/Substitutes.js","componentsJS/SlotsScenes/ScrenScene/DetailСofiguration/Secial/Secial.js","componentsJS/SlotsScenes/ScrenScene/DetailСofiguration/Reelstrip/Reelstrip.js","componentsJS/SlotsScenes/ScrenScene/DetailСofiguration/NumberIfFreespin/NumberIfFreespin.js","componentsJS/SlotsScenes/ScrenScene/DetailСofiguration/DetailСofiguration.js","componentsJS/SlotsScenes/ScrenScene/ScrenScene.js","componentsJS/SlotsScenes/SlotsScenes.js","App/App.js","reportWebVitals.js","Store/reducers/initialState.js","Store/reducers/components/CreateScene.js","Store/reducers/components/Inputs.js","Store/reducers/components/Deletes.js","Store/reducers/components/Select.js","Store/reducers/components/StartReset.js","Store/reducers/components/AddSymbol.js","Store/reducers/components/DeleteSymbol.js","Store/reducers/components/WorkWithReels.js","Store/reducers/components/AddFreespinGame.js","Store/reducers/DefaultOperation.js","Store/reducers/MainReducer.js","index.js","Store/CreateStore.js"],"names":["CreateAction","Type","value","type","paylot","Header","DefaultOperation","this","props","state","className","FirstInputId","style","width","height","marginLeft","onChange","undefined","Game","InputFid","FirstInputName","InputFname","onClick","PressFirstBut","FirstBut","justifyContent","marginRight","Component","connect","dispatch","event","target","Bookmark","Id","Select","backgroundColor","BookmarkList","backg","SceneList","SceneName","Symbols","margin","borderRight","overflow","display","maxWidth","keys","length","map","key","name","e","InputSymN","vID","vKEY","p","targetV","InputSymID","id","DeleteSymbol","v1","v2","AddSymbol","console","log","Paytable","minWidth","border","Reelstrip","n","key1","InputSymPayT","vKEY1","textAlign","Substiture","Checkbox","checked","InputSymSub","color","Special","InputSymSpec","InputSymReel","marginTop","UpRTP","TotalRTP","BaseGameRTP","FreespinsRTP","NumberIfFreespin","Reels","InputNumberIfFreespin","butStyle","SlectedB","background","SlectedD","DetailСofiguration","SelectMC","ScernTypeOfConf","ScrenScene","NS","InputNS","GT","InputGT","NOR","num","parseInt","replace","isNaN","InputNOR","ReelSize","v3","NumberOfReels","ScrenList","InputLabel","labelId","GameType","MenuItem","InputFreesG","FreespinGame","AddFreespinGame","Delete","SlotsScenes","AddScene","App","State","AddContact","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","CreateScene","GameName","0","1","2","3","4","5","Substitutes","SlectedScernTypeOfConf","BonusGameRTP","BasegameHitRate","HitRate","Combinations","Returns","BookmarkOn","reels","i","N","C","action","InputFN","InputSN","Nof","nValue","symbols","NIF","omit","a","DeleteScene","sceneList","bookmarkList","screnList","k","Number","v","s","s2","StartReset","Subst","Reel","masKey","isWild","isScatter","isSpecific","sarray","WorkWithReels","KeySc","MasKey","WorkType","RTP_base","FreeGame","RTP","scene","NumS","NumW","NumSc","wild","ScInReel","p_Sc","p_no_Sc","check","SubArray","o","Num","NumInreel","NumNoreel","NumZW","NumInreelZW","NumNoreelZW","IsWithWild","p_Sc_win","ArrNoKay","las","start","mul","c","check1","start2","temp","q","m","TheBigestValues","index","p_sym_win","l","add","tick","keyFS","Action","DefaultOpration","combineReducers","store","createStore","MainReducer","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1e6e3de2.chunk.js","sourcesContent":["export const CreateAction =(Type, value) => {\r\n    return {\r\n        type: Type,\r\n        paylot:value,\r\n        \r\n    }\r\n}\r\n \r\n","\r\nimport {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport './Header.css'\r\nimport {CreateAction} from '../../Store/action/MainAction';\r\n\r\nclass Header extends Component {\r\n  \r\n  render(){\r\n    const{DefaultOperation}=this.props.state\r\n    return (\r\n      <div className=\"Header\">\r\n        <div className=\"container_row\">\r\n            <input className=\"con_input\" value={DefaultOperation.FirstInputId} style={{width:\"50px\",height:\"30px\",marginLeft:\"10px\"}} onChange={DefaultOperation.Game==undefined?this.props.InputFid:()=>{}}/>\r\n                \r\n            \r\n            <input className=\"con_input\" value={DefaultOperation.FirstInputName} style={{height:\"30px\",marginLeft:\"10px\"}}  onChange={ DefaultOperation.Game==undefined?this.props.InputFname:()=>{}}/>\r\n                \r\n            \r\n            <div className=\"con_but\" style={{width:\"90px\",height:\"30px\",marginLeft:\"10px\"}} onClick={()=>this.props.PressFirstBut(DefaultOperation)}>\r\n                {\r\n                    DefaultOperation.FirstBut \r\n                }\r\n                \r\n            </div>\r\n        </div>\r\n        <div className=\"container_row\" style={{justifyContent:'flex-end'}}>\r\n             <div className=\"con_but\" style={{width:\"90px\",height:\"30px\"}}>\r\n                export\r\n            </div>\r\n            <div className=\"con_but\" style={{width:\"90px\",height:\"30px\",marginLeft:\"10px\", marginRight:\"10px\"}}>\r\n                import\r\n            </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n  \r\n}\r\n\r\nexport default connect(\r\n  state=>({state:state}),\r\n  dispatch => ({\r\n    PressFirstBut: (DefaultOperation, value) => {\r\n      if(DefaultOperation.Game==undefined)\r\n        dispatch(CreateAction(\"ADD_NEW_SCENE\", value))\r\n        dispatch(CreateAction(\"START_RESET\"))\r\n    },\r\n    InputFid: (event) => {\r\n        dispatch(CreateAction(\"INPUT_FID\", event.target.value))\r\n    },\r\n    InputFname: (event) => {\r\n        dispatch(CreateAction(\"INPUT_FNAME\", event.target.value))\r\n    }\r\n  })\r\n)(Header);","\r\nimport {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport {CreateAction} from '../../../Store/action/MainAction';\r\n\r\n\r\nclass Bookmark extends Component {\r\n  \r\n  render(){\r\n    const{DefaultOperation}=this.props.state\r\n    const{Id}=this.props\r\n    return (\r\n      <div className=\"Bookmark\" onClick={()=>this.props.Select(this.props.Id)} style={{backgroundColor:DefaultOperation.BookmarkList[Id].backg}}>\r\n         {DefaultOperation.Game.SceneList[Id].SceneName}\r\n      </div>\r\n    );\r\n  }\r\n  \r\n}\r\n\r\nexport default connect(\r\n  state=>({state:state}),\r\n  dispatch => ({Select: (value) => {\r\n    \r\n      dispatch(CreateAction(\"SELECT\", value))\r\n      \r\n  },\r\n})\r\n)(Bookmark);\r\n","import {keys} from \"lodash\"\r\nimport {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport {CreateAction} from '../../../../../Store/action/MainAction';\r\n\r\n\r\nclass Symbols extends Component {\r\n    \r\n    \r\n  render(){\r\n    const{DefaultOperation}=this.props.state\r\n    const{Id}=this.props\r\n    return (\r\n      <div className=\"container_column\">\r\n          <div className=\"container_row\" style={{margin:\"20px\"}}>\r\n            <div className=\"container_column\" style={{width:\"100px\", borderRight:\"1px solid black\"}}>\r\n                \r\n                    <div className=\"container_row\" style={{height:\"30px\",width:\"100px\", borderRight:\"1px solid black\"}}>\r\n                        Symbols Name\r\n                    </div>\r\n                    \r\n                \r\n                \r\n                    <div className=\"container_row\" style={{height:\"30px\",width:\"100px\", borderRight:\"1px solid black\"}}>\r\n                        ID\r\n                    </div>\r\n                \r\n            </div>\r\n            \r\n            <div  style={{overflow:\"auto\",display:\"flex\", maxWidth:\"100%\"}}>\r\n            {\r\n                        keys(DefaultOperation.Game.SceneList[Id].Symbols).length!=0?\r\n                            keys(DefaultOperation.Game.SceneList[Id].Symbols)\r\n                            .map((key) =>\r\n                            <div className=\"container_column\" key={key} style={{height:\"100%\",width:\"120px\"}}>\r\n                                <div className=\"container_row\">\r\n                                    <input name=\"SymbolName\" onChange={(e)=>this.props.InputSymN( {vID:Id, vKEY:key, p:this.props, targetV:e})} value={DefaultOperation.Game.SceneList[Id].Symbols[key].name} style={{width:\"100%\"}}/>\r\n                                    \r\n                                </div>\r\n                                <div className=\"container_row\">\r\n                                    <input onChange={(e)=>this.props.InputSymID({vID:Id, vKEY:key, p:this.props, targetV:e})} value={DefaultOperation.Game.SceneList[Id].Symbols[key].id} style={{width:\"100%\"}}/>\r\n                                    \r\n                                </div>\r\n                                <div className=\"con_but\" onClick={()=>this.props.DeleteSymbol({vID:Id, v1:Id,v2:key})} style={{height:\"100%\"}}>\r\n                                    remove\r\n                                </div>\r\n                                \r\n                            </div>\r\n                                ):<div style={{display:\"none\"}}></div>\r\n                                \r\n                        \r\n                    }\r\n            </div>\r\n            <div className=\"con_but\" style={{width:\"50px\"}} onClick={()=>this.props.AddSymbol(Id)}>\r\n                +\r\n            </div>\r\n          </div>\r\n          <div className=\"container_row\">\r\n              <div style={{width:\"50px\"}}  >\r\n\r\n              </div>\r\n          </div>\r\n      </div>\r\n    );\r\n  }\r\n  \r\n}\r\n\r\nexport default connect(\r\n  state=>({state:state}),\r\n  dispatch => ({\r\n      AddSymbol: (value) => {\r\n\r\n        \r\n    \r\n      dispatch(CreateAction(\"ADD_SYMBOL\", value))\r\n      dispatch(CreateAction(\"WORK_WITH_REELS\", value))\r\n      \r\n  },\r\n  DeleteSymbol: (value) => {\r\n    \r\n    dispatch(CreateAction(\"DELETE_SYMBOL\", value))\r\n    dispatch(CreateAction(\"WORK_WITH_REELS\", value))\r\n    \r\n    },\r\n    InputSymN: (value) => {\r\n       \r\n    \r\n        dispatch(CreateAction(\"INPUT_SYMBOL_NAME\", value))\r\n        \r\n    },\r\n    InputSymID: (value) => {\r\n       \r\n        console.log(value)\r\n        dispatch(CreateAction(\"INPUT_SYMBOL_ID\", value))\r\n        \r\n    },\r\n})\r\n)(Symbols);\r\n","import {keys} from \"lodash\"\r\nimport {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport {CreateAction} from '../../../../../Store/action/MainAction';\r\n\r\n\r\nclass Paytable extends Component {\r\n  \r\n  render(){\r\n    const{DefaultOperation}=this.props.state\r\n    const{Id}=this.props\r\n    return (\r\n      <div className=\"container_column\" style={{overflow:\"auto\", maxWidth:\"100%\"}}>\r\n          <div className=\"container_row\" >\r\n            <div className=\"container_row\" style={{minWidth:\"100px\",border:\"1px solid black\"}}>\r\n                Symbol\r\n            </div>\r\n            {\r\n                \r\n                keys(DefaultOperation.Game.SceneList[Id].Symbols).length!=0?\r\n                    DefaultOperation.Game.SceneList[Id].Symbols[keys(DefaultOperation.Game.SceneList[Id].Symbols)[0]].Reelstrip!=0?\r\n                keys(DefaultOperation.Game.SceneList[Id].Symbols[keys(DefaultOperation.Game.SceneList[Id].Symbols)[0]].Reelstrip)\r\n                            .map((key, n=1)=>\r\n                            <div key={key}  className=\"container_row\" style={{minWidth:\"60px\", border:\"1px solid black\", justifyContent:\"center\"}}>\r\n                                \r\n                                {n+1}\r\n                            </div>)\r\n                :<div style={{display:\"none\"}}></div>:<div style={{display:\"none\"}}></div>\r\n            }\r\n          </div>\r\n          {\r\n                \r\n                keys(DefaultOperation.Game.SceneList[Id].Symbols).length!=0?\r\n                keys(DefaultOperation.Game.SceneList[Id].Symbols)\r\n                            .map((key)=>\r\n                            <div className=\"container_column\"  key={key}>\r\n                                <div className=\"container_row\">\r\n                                <div  className=\"container_row\" style={{minWidth:\"100px\", border:\"1px solid black\", justifyContent:\"center\", overflow:\"hidden\"}}>\r\n                                    {DefaultOperation.Game.SceneList[Id].Symbols[key].name}\r\n                                </div>\r\n                                {keys(DefaultOperation.Game.SceneList[Id].Symbols[key].Paytable).map((key1)=>\r\n                                    <input onChange={(e)=>this.props.InputSymPayT({vID:Id, vKEY:key, vKEY1:key1, targetV:e})} value={DefaultOperation.Game.SceneList[Id].Symbols[key].Paytable[key1]} key={key1}  className=\"container_row\" style={{minWidth:\"60px\", border:\"1px solid black\", textAlign:\"center\"}}/>\r\n                                    \r\n                                )}\r\n                                </div>\r\n                                \r\n                                \r\n                            </div>\r\n                            )\r\n                :<div></div>\r\n            }\r\n    </div>   \r\n    );\r\n  }\r\n  \r\n}\r\n\r\nexport default connect(\r\n  state=>({state:state}),\r\n  dispatch => ({\r\n    InputSymPayT: (value) => {\r\n       \r\n    \r\n      dispatch(CreateAction(\"INPUT_SYMBOL_PAYTABLE\", value))\r\n      dispatch(CreateAction(\"WORK_WITH_REELS\", value))\r\n    },\r\n  })\r\n)(Paytable);\r\n","import {keys} from \"lodash\"\r\nimport {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport {CreateAction} from '../../../../../Store/action/MainAction';\r\n\r\n\r\nclass Substiture extends Component {\r\n  \r\n  render(){\r\n    const{DefaultOperation}=this.props.state\r\n    const{Id}=this.props\r\n    return (\r\n      <div className=\"container_column\" style={{overflow:\"auto\", maxWidth:\"100%\"}}>\r\n          <div className=\"container_row\" >\r\n            <div className=\"container_row\" style={{minWidth:\"100px\",border:\"1px solid black\"}}>\r\n                Substitute\r\n            </div>\r\n            {\r\n                \r\n                keys(DefaultOperation.Game.SceneList[Id].Symbols).length!=0?\r\n                keys(DefaultOperation.Game.SceneList[Id].Symbols)\r\n                            .map((key)=>\r\n                            <div key={key}  className=\"container_row\" style={{minWidth:\"100px\", border:\"1px solid black\", justifyContent:\"center\"}}>\r\n                                {DefaultOperation.Game.SceneList[Id].Symbols[key].name}\r\n                            </div>)\r\n                :<div></div>\r\n            }\r\n          </div>\r\n          {\r\n                \r\n                keys(DefaultOperation.Game.SceneList[Id].Symbols).length!=0?\r\n                keys(DefaultOperation.Game.SceneList[Id].Symbols)\r\n                            .map((key)=>\r\n                            <div className=\"container_column\"  key={key}>\r\n                                <div className=\"container_row\">\r\n                                <div  className=\"container_row\" style={{minWidth:\"100px\", border:\"1px solid black\", justifyContent:\"center\", overflow:\"hidden\"}}>\r\n                                    {DefaultOperation.Game.SceneList[Id].Symbols[key].name}\r\n                                </div>\r\n                                {keys(DefaultOperation.Game.SceneList[Id].Symbols[key].Substiture).map((key1)=>\r\n                                    <div key={key1}  className=\"container_row\" style={{minWidth:\"100px\", border:\"1px solid black\", justifyContent:\"center\"}}>\r\n                                      <Checkbox\r\n                                        checked={DefaultOperation.Game.SceneList[Id].Symbols[key].Substiture[key1].value}\r\n                                        onChange={()=>this.props.InputSymSub({vID:Id, vKEY:key, vKEY1:key1})}\r\n                                        \r\n                                        color=\"primary\"\r\n                                      />\r\n                                      \r\n                                    </div>\r\n                                )}\r\n                                </div>\r\n                                \r\n                                \r\n                            </div>\r\n                            )\r\n                :<div></div>\r\n            }\r\n    </div>   \r\n    );\r\n  }\r\n  \r\n}\r\n\r\nexport default connect(\r\n  state=>({state:state}),\r\n  dispatch => ({\r\n    InputSymSub: (value) => {\r\n       \r\n    \r\n      dispatch(CreateAction(\"INPUT_SYMBOL_SUBSTITURE\", value))\r\n      dispatch(CreateAction(\"WORK_WITH_REELS\", value))\r\n    },\r\n  })\r\n)(Substiture);\r\n","import {keys} from \"lodash\"\r\nimport {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\n\r\nimport {CreateAction} from '../../../../../Store/action/MainAction';\r\n\r\n\r\nclass Special extends Component {\r\n  \r\n  render(){\r\n    const{DefaultOperation}=this.props.state\r\n    const{Id}=this.props\r\n    return (\r\n      <div className=\"container_column\" style={{overflow:\"auto\", maxWidth:\"100%\"}}>\r\n          <div className=\"container_row\" >\r\n            <div className=\"container_row\" style={{minWidth:\"100px\",border:\"1px solid black\"}}>\r\n                Symbols\r\n            </div>\r\n            \r\n                \r\n                \r\n                            <div  className=\"container_row\" style={{minWidth:\"100px\", border:\"1px solid black\", justifyContent:\"center\"}}>\r\n                                isWild\r\n                            </div>\r\n                            <div  className=\"container_row\" style={{minWidth:\"100px\", border:\"1px solid black\", justifyContent:\"center\"}}>\r\n                                isScatter\r\n                            </div>\r\n                            <div  className=\"container_row\" style={{minWidth:\"100px\", border:\"1px solid black\", justifyContent:\"center\"}}>\r\n                                isSpecific\r\n                            </div>\r\n                \r\n            \r\n          </div>\r\n          {\r\n                \r\n                keys(DefaultOperation.Game.SceneList[Id].Symbols).length!=0?\r\n                keys(DefaultOperation.Game.SceneList[Id].Symbols)\r\n                            .map((key)=>\r\n                            <div className=\"container_column\"  key={key}>\r\n                                <div className=\"container_row\">\r\n                                <div  className=\"container_row\" style={{minWidth:\"100px\", border:\"1px solid black\", justifyContent:\"center\", overflow:\"hidden\"}}>\r\n                                    {DefaultOperation.Game.SceneList[Id].Symbols[key].name}\r\n                                </div>\r\n                                {keys(DefaultOperation.Game.SceneList[Id].Symbols[key].Special).map((key1)=>\r\n                                    <div key={key1}  className=\"container_row\" style={{minWidth:\"100px\", border:\"1px solid black\", justifyContent:\"center\"}}>\r\n                                        <Checkbox\r\n                                        checked={DefaultOperation.Game.SceneList[Id].Symbols[key].Special[key1]}\r\n                                        onChange={()=>this.props.InputSymSpec({vID:Id, vKEY:key, vKEY1:key1})}\r\n                                        color=\"primary\"\r\n                                      />\r\n                                        \r\n                                    </div>\r\n                                )}\r\n                                </div>\r\n                                \r\n                                \r\n                            </div>\r\n                            )\r\n                :<div></div>\r\n            }\r\n    </div>   \r\n    );\r\n  }\r\n  \r\n}\r\n\r\nexport default connect(\r\n  state=>({state:state}),\r\n  dispatch => ({\r\n    InputSymSpec: (value) => {\r\n       \r\n    \r\n        dispatch(CreateAction(\"INPUT_SYMBOL_SPECIAL\", value))\r\n        dispatch(CreateAction(\"WORK_WITH_REELS\", value))\r\n      },\r\n  })\r\n)(Special);\r\n","import {keys} from \"lodash\"\r\nimport {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport {CreateAction} from '../../../../../Store/action/MainAction';\r\n\r\n\r\nclass Paytable extends Component {\r\n  \r\n  render(){\r\n    const{DefaultOperation}=this.props.state\r\n    const{Id}=this.props\r\n    return (\r\n      <div className=\"container_column\">\r\n        <div className=\"container_column\" style={{overflow:\"auto\", maxWidth:\"100%\"}}>\r\n          <div className=\"container_row\" >\r\n            <div className=\"container_row\" style={{minWidth:\"100px\",border:\"1px solid black\"}}>\r\n                Symbol\r\n            </div>\r\n            {\r\n                \r\n                keys(DefaultOperation.Game.SceneList[Id].Symbols).length!=0?\r\n                    DefaultOperation.Game.SceneList[Id].Symbols[keys(DefaultOperation.Game.SceneList[Id].Symbols)[0]].Reelstrip!=0?\r\n                keys(DefaultOperation.Game.SceneList[Id].Symbols[keys(DefaultOperation.Game.SceneList[Id].Symbols)[0]].Reelstrip)\r\n                            .map((key, n=1)=>\r\n                            <div key={key}  className=\"container_row\" style={{minWidth:\"60px\", border:\"1px solid black\", justifyContent:\"center\"}}>\r\n                                \r\n                                {\"Reel \"+(n+1)}\r\n                            </div>)\r\n                :<div style={{display:\"none\"}}></div>:<div style={{display:\"none\"}}></div>\r\n            }\r\n          </div>\r\n          {\r\n                \r\n                keys(DefaultOperation.Game.SceneList[Id].Symbols).length!=0?\r\n                keys(DefaultOperation.Game.SceneList[Id].Symbols)\r\n                            .map((key)=>\r\n                            <div className=\"container_column\"  key={key}>\r\n                                <div className=\"container_row\">\r\n                                <div  className=\"container_row\" style={{minWidth:\"100px\", border:\"1px solid black\", justifyContent:\"center\", overflow:\"hidden\"}}>\r\n                                    {DefaultOperation.Game.SceneList[Id].Symbols[key].name}\r\n                                </div>\r\n                                {\r\n                                    keys(DefaultOperation.Game.SceneList[Id].Symbols[key].Reelstrip).map((key1)=>\r\n                                        <input onChange={(e)=>this.props.InputSymReel({vID:Id, vKEY:key, vKEY1:key1, targetV:e})} value={DefaultOperation.Game.SceneList[Id].Symbols[key].Reelstrip[key1]} key={key1}  className=\"container_row\" style={{minWidth:\"60px\", border:\"1px solid black\", textAlign:\"center\"}}/>\r\n                                    \r\n                                    )\r\n                                }\r\n                                </div>\r\n                                \r\n                                \r\n                            </div>\r\n                            )\r\n                :<div style={{display:\"none\"}}></div>\r\n            }\r\n        </div>\r\n        <div className=\"con_but\" style={{width:\"90px\", marginTop:\"10px\"}}onClick={()=>this.props.UpRTP(Id)}>\r\n              Up RTP\r\n        </div>\r\n        <div className=\"container_row\">\r\n          TotalRTP:{DefaultOperation.Game.SceneList[Id].TotalRTP}\r\n        </div>\r\n        <div className=\"container_row\">\r\n          BaseGameRTP:{DefaultOperation.Game.SceneList[Id].BaseGameRTP}\r\n        </div>\r\n        <div className=\"container_row\">\r\n          FreespinsRTP:{DefaultOperation.Game.SceneList[Id].FreespinsRTP}\r\n        </div>\r\n      </div>   \r\n    );\r\n  }\r\n  \r\n}\r\n\r\nexport default connect(\r\n  state=>({state:state}),\r\n  dispatch => ({\r\n    InputSymReel: (value) => {\r\n       \r\n    \r\n      dispatch(CreateAction(\"INPUT_SYMBOL_REELSTRIP\", value))\r\n      dispatch(CreateAction(\"WORK_WITH_REELS\", value))\r\n    },\r\n    UpRTP: (value) => {\r\n       \r\n    \r\n      \r\n      dispatch(CreateAction(\"WORK_WITH_REELS\", value))\r\n    },\r\n  })\r\n)(Paytable);\r\n","import {keys} from \"lodash\"\r\nimport {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport {CreateAction} from '../../../../../Store/action/MainAction';\r\n\r\n\r\nclass NumberIfFreespin extends Component {\r\n  \r\n  render(){\r\n    const{DefaultOperation}=this.props.state\r\n    const{Id}=this.props\r\n    return (\r\n        <div className=\"container_column\" style={{overflow:\"auto\", maxWidth:\"100%\"}}>\r\n            <div className=\"container_row\">\r\n                \r\n                <div className=\"container_column\">\r\n                    <div className=\"container_row\" style={{minWidth:\"100px\",border:\"1px solid black\"}}>\r\n                        Num of Sc\r\n                    </div>\r\n                    \r\n                    <div className=\"container_row\" style={{minWidth:\"100px\",border:\"1px solid black\"}}>\r\n                        Num freespin\r\n                    </div>\r\n                </div>\r\n                {\r\n                    keys(DefaultOperation.Game.SceneList[Id].Reels).length!=0?\r\n                    keys(DefaultOperation.Game.SceneList[Id].NumberIfFreespin).map((key)=>\r\n                        <div className=\"container_column\" key={key} style={{minWidth:\"60px\", border:\"1px solid black\", justifyContent:\"center\"}}>\r\n                            <div className=\"container_row\" style={{justifyContent:\"center\"}}>\r\n                                {key}\r\n                            </div>\r\n                            <div className=\"container_row\" >\r\n                                \r\n                                <input onChange={(e)=>this.props.InputNumberIfFreespin({vID:Id, vKEY:key, targetV:e})} value={DefaultOperation.Game.SceneList[Id].NumberIfFreespin[key]} className=\"container_row\" style={{height:\"100%\", border:\"1px solid black\", textAlign:\"center\"}}/>\r\n                            </div>\r\n                        </div>\r\n                    ):<div style={{display:\"none\"}}></div>\r\n                }\r\n            </div>\r\n            \r\n        </div>   \r\n    );\r\n  }\r\n  \r\n}\r\n\r\nexport default connect(\r\n  state=>({state:state}),\r\n  dispatch => ({\r\n    InputNumberIfFreespin: (value) => {\r\n       \r\n    \r\n      dispatch(CreateAction(\"INPUT_NUMBER_IF_FREESPIN\", value))\r\n      dispatch(CreateAction(\"WORK_WITH_REELS\", value))\r\n    },\r\n  })\r\n)(NumberIfFreespin);\r\n","\r\nimport {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport {CreateAction} from '../../../../Store/action/MainAction';\r\nimport './DetailСofiguration.css'\r\nimport Symbols from './Symbols/Symbols'\r\nimport Paytable from './Paytable/Paytable'\r\nimport Substiture from './Substitutes/Substitutes'\r\nimport Special from './Secial/Secial'\r\nimport Reelstrip from './Reelstrip/Reelstrip'\r\nimport NumberIfFreespin from './NumberIfFreespin/NumberIfFreespin'\r\n\r\nlet butStyle={height:\"30px\", justifyContent:\"flex-start\" }\r\nlet SlectedB={background:\"green\",height:\"30px\", justifyContent:\"flex-start\" }\r\nlet SlectedD={display:\"flex\"}\r\nclass DetailСofiguration extends Component {\r\n\r\n  render(){\r\n    const{DefaultOperation}=this.props.state\r\n    const{Id}=this.props\r\n    return (\r\n        <div className=\"containe_column\" style={{marginTop:\"40px\",}}>\r\n            <div className=\"con_sub\" onClick={()=>this.props.SelectMC({v1:\"Symbols\",v2:Id})} style={DefaultOperation.Game.SceneList[Id].ScernTypeOfConf.Symbols?SlectedB:butStyle}>\r\n                Symbols\r\n            </div>\r\n            <div className=\"table_scrin\" style={DefaultOperation.Game.SceneList[Id].ScernTypeOfConf.Symbols?SlectedD:{display:\"none\"}}>\r\n                <Symbols\r\n                    Id={Id}\r\n                />\r\n            </div>\r\n            <div className=\"con_sub\" onClick={()=>this.props.SelectMC({v1:\"Paytable\",v2:Id})} style={DefaultOperation.Game.SceneList[Id].ScernTypeOfConf.Paytable?SlectedB:butStyle}>\r\n                Paytable\r\n            </div>\r\n            <div className=\"table_scrin\" style={DefaultOperation.Game.SceneList[Id].ScernTypeOfConf.Paytable?SlectedD:{display:\"none\"}}>\r\n                <Paytable\r\n                    Id={Id}\r\n                />\r\n            </div>\r\n            <div className=\"con_sub\" onClick={()=>this.props.SelectMC({v1:\"Substiture\",v2:Id})} style={DefaultOperation.Game.SceneList[Id].ScernTypeOfConf.Substiture?SlectedB:butStyle}>\r\n                Substitute\r\n            </div>\r\n            <div className=\"table_scrin\" style={DefaultOperation.Game.SceneList[Id].ScernTypeOfConf.Substiture?SlectedD:{display:\"none\"}}>\r\n                \r\n                <Substiture Id={Id}/>\r\n            </div>\r\n            <div className=\"con_sub\" onClick={()=>this.props.SelectMC({v1:\"Special\",v2:Id})} style={DefaultOperation.Game.SceneList[Id].ScernTypeOfConf.Special?SlectedB:butStyle}>\r\n                Special\r\n            </div>\r\n            <div className=\"table_scrin\" style={DefaultOperation.Game.SceneList[Id].ScernTypeOfConf.Special?SlectedD:{display:\"none\"}}>\r\n                <Special\r\n                     Id={Id}\r\n                />\r\n            </div>\r\n            <div className=\"con_sub\" onClick={()=>this.props.SelectMC({v1:\"NumberIfFreespin\",v2:Id})} style={DefaultOperation.Game.SceneList[Id].ScernTypeOfConf.NumberIfFreespin?SlectedB:butStyle}>\r\n                Number if freespin\r\n            </div>\r\n            <div className=\"table_scrin\" style={DefaultOperation.Game.SceneList[Id].ScernTypeOfConf.NumberIfFreespin?SlectedD:{display:\"none\"}}>\r\n                <NumberIfFreespin\r\n                    Id={Id}\r\n                />\r\n            </div>\r\n            <div className=\"con_sub\" onClick={()=>this.props.SelectMC({v1:\"Reelstrip\",v2:Id})} style={DefaultOperation.Game.SceneList[Id].ScernTypeOfConf.Reelstrip?SlectedB:butStyle}>\r\n                Reelstrip\r\n            </div>\r\n            <div className=\"table_scrin\" style={DefaultOperation.Game.SceneList[Id].ScernTypeOfConf.Reelstrip?SlectedD:{display:\"none\"}}>\r\n                <Reelstrip\r\n                    Id={Id}\r\n                />\r\n            </div>\r\n            \r\n        </div>\r\n    );\r\n  }\r\n  \r\n}\r\n\r\nexport default connect(\r\n  state=>({state:state}),\r\n  dispatch => ({SelectMC: (value) => {\r\n    \r\n      dispatch(CreateAction(\"SELECT_MENU_CONFIG\", value))\r\n      \r\n  },\r\n})\r\n)(DetailСofiguration);\r\n","import {keys} from \"lodash\"\r\nimport {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\nimport Select from '@material-ui/core/Select';\r\nimport InputLabel from '@material-ui/core/InputLabel'\r\nimport MenuItem from '@material-ui/core/MenuItem'\r\n\r\n\r\nimport {CreateAction} from '../../../Store/action/MainAction';\r\nimport './ScrenScene.css'\r\nimport DetailConfiguration from './DetailСofiguration/DetailСofiguration'\r\n\r\n\r\nclass ScrenScene extends Component {\r\n  NS=(event)=>{\r\n    this.props.InputNS({v1:event.target.value, v2:this.props.Id})\r\n  }\r\n  GT = (event) => {\r\n   \r\n    this.props.InputGT({v1:event.target.value, v2:this.props.Id} );\r\n  };\r\n  NOR=(event)=>{\r\n    let num\r\n    let a = NaN\r\n     if(event.target.value!=\"\"){\r\n      num = parseInt(event.target.value.replace(/\\D+/g,\"\"))\r\n      \r\n      if(isNaN(num)){\r\n        num = \"\"\r\n        \r\n      }\r\n      this.props.InputNOR({v1:num, v2:this.props.Id, ReelSize:true, v3:this.props.state.DefaultOperation.Game.SceneList[this.props.Id].NumberOfReels} );\r\n     }\r\n     \r\n    else {\r\n      num = \"\"\r\n      this.props.InputNOR({v1:num, v2:this.props.Id,ReelSize:true , v3:this.props.state.DefaultOperation.Game.SceneList[this.props.Id].NumberOfReels} );\r\n    }\r\n    \r\n  }\r\n  render(){\r\n    const{DefaultOperation}=this.props.state\r\n    const{Id}=this.props\r\n    return (\r\n      <div className=\"ScrenScene\" style={{display:DefaultOperation.ScrenList[Id].display}}>\r\n          <div className=\"container_column\">\r\n            <div   className=\"container_row\">\r\n\r\n            <div  className=\"container_column\">\r\n            \r\n            <InputLabel id=\"SceneName\">SceneName </InputLabel>\r\n            <input className=\"con_input\" value={DefaultOperation.Game.SceneList[Id].SceneName} onChange={this.NS} style={{height:\"30px\"}}/>\r\n          \r\n            <InputLabel id=\"GameType\">GameType</InputLabel>\r\n            <Select labelId=\"GameType\" id=\"select\" onChange={this.GT} value={DefaultOperation.Game.SceneList[Id].GameType}>\r\n              <MenuItem value=\"Slot\">Slot</MenuItem>\r\n              <MenuItem value=\"Bonus\">Bonus</MenuItem>\r\n            </Select>\r\n          \r\n          \r\n            <InputLabel id=\"NumberofReels\">Number of Reels </InputLabel>\r\n            <input className=\"con_input\" onChange={this.NOR} style={{height:\"30px\"}} value={DefaultOperation.Game.SceneList[Id].NumberOfReels}/>\r\n            <InputLabel id=\"FreespinGame\">Freespin Game </InputLabel>\r\n            <Select labelId=\"FreespinGame\" onChange={(e)=>this.props.InputFreesG({vID:Id, targetV:e})}  value={DefaultOperation.Game.SceneList[Id].FreespinGame!=undefined?DefaultOperation.Game.SceneList[Id].FreespinGame:\"u\"}>\r\n            <MenuItem value=\"u\"></MenuItem>\r\n              {\r\n                keys(DefaultOperation.Game.SceneList).length>1?\r\n                  keys(DefaultOperation.Game.SceneList).map((key)=>\r\n                    \r\n                    Id!=key?\r\n                    <MenuItem value={key} key={key}>{DefaultOperation.Game.SceneList[key].SceneName!=undefined?DefaultOperation.Game.SceneList[key].SceneName:\"u\"}</MenuItem>:\"\"\r\n                  \r\n                  )\r\n                :\"\"\r\n              }\r\n              <MenuItem value={Id}>Empty</MenuItem>\r\n              \r\n              \r\n            </Select>\r\n            <div className=\"con_but\" style={{height:\"30px\"}}  onClick={()=>this.props.AddFreespinGame(Id)} >\r\n              Create Freespin\r\n            </div>\r\n          </div>\r\n          <div className=\"container_row\" style={{justifyContent:\"flex-end\"}}>\r\n            <div className=\"con_but\" style={{width:\"90px\",height:\"25px\"}}onClick={()=>this.props.Delete(Id)}>\r\n              Delete\r\n            </div>\r\n          </div>\r\n\r\n            </div>\r\n            <DetailConfiguration\r\n              Id={Id}\r\n            />\r\n          </div>  \r\n      </div>\r\n    );\r\n  }\r\n  \r\n}\r\n\r\nexport default connect(\r\n  state=>({state:state}),\r\n  dispatch => ({\r\n    Delete: (value) => {\r\n      dispatch(CreateAction(\"DELETE_SCENE\", value))\r\n    },\r\n    InputNS: (value) => {\r\n        dispatch(CreateAction(\"INPUT_SCENE_NAME\", value))\r\n    },\r\n    InputGT: (value) => {\r\n        dispatch(CreateAction(\"INPUT_GAME_TYPE\", value))\r\n        dispatch(CreateAction(\"WORK_WITH_REELS\", value))\r\n    },\r\n    InputNOR: (value) => {\r\n      \r\n      dispatch(CreateAction(\"INPUT_NUM_REELS\", value))\r\n      \r\n      dispatch(CreateAction(\"WORK_WITH_REELS\", value))\r\n  },\r\n  InputFreesG: (value) => {\r\n      \r\n    dispatch(CreateAction(\"INPUT_FREESPIN_GAME\", value))\r\n    \r\n    dispatch(CreateAction(\"WORK_WITH_REELS\", value))\r\n  },\r\n  AddFreespinGame: (value) => {\r\n      \r\n    dispatch(CreateAction(\"ADD_FREESPIN_GAME\", value))\r\n    \r\n    dispatch(CreateAction(\"WORK_WITH_REELS\", value))\r\n  },\r\n  })\r\n)(ScrenScene);\r\n","import {keys} from \"lodash\"\r\nimport {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport {CreateAction} from '../../Store/action/MainAction';\r\nimport './SlotsScenes.css'\r\nimport Bookmark from './ScrenScene/Bookmark'\r\nimport ScrenScene from './ScrenScene/ScrenScene'\r\n\r\n\r\nclass SlotsScenes extends Component {\r\n   \r\n\r\n  render(){\r\n    const{DefaultOperation}=this.props.state\r\n    return (\r\n      <div className=\"SlotsScenes\">\r\n        <div className=\"container_row\" style={{height:\"50px\"}}>\r\n            <div  style={{display:\"flex\",maxWidth:\"100%\",overflow:\"auto\"}}>\r\n                \r\n                {\r\n                   DefaultOperation.Game!=undefined?\r\n                    keys(DefaultOperation.Game.SceneList)\r\n                    .map((key) =>\r\n                        <Bookmark key={key}\r\n                            Id={key}\r\n                        />\r\n                    ):<div style={{maxWidth:\"0\",display:\"none\"}}></div>\r\n                    \r\n                        \r\n                }\r\n            </div>\r\n            <div className=\"con_but\" style={{marginLeft:\"5px\",height:\"30px\", width:\"30px\", minWidth:\"30px\"}} onClick={this.props.AddScene}>\r\n                +\r\n            </div>\r\n        </div>\r\n        <div className=\"container_column\">\r\n        {\r\n                   DefaultOperation.Game!=undefined?\r\n                    keys(DefaultOperation.Game.SceneList)\r\n                    .map((key) =>\r\n                        <ScrenScene key={key}\r\n                            Id={key}\r\n                        />\r\n                    ):<div></div>\r\n                    \r\n                        \r\n                }\r\n             \r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n  \r\n}\r\n\r\nexport default connect(\r\n  state=>({state:state}),\r\n  dispatch => ({\r\n    AddScene: (state) => {\r\n        \r\n          dispatch(CreateAction(\"ADD_NEW_SCENE\"))\r\n          \r\n      },\r\n  })\r\n)(SlotsScenes);\r\n","import '../common/Style/main.css'\nimport {Component} from 'react'\nimport {connect} from 'react-redux'\n\nimport {CreateAction} from '../Store/action/MainAction';\nimport Header from '../componentsJS/Header/Header'\nimport SlotsScenes from '../componentsJS/SlotsScenes/SlotsScenes'\n\nclass App extends Component {\n  \n  render(){\n    return (\n      <div className=\"App\">\n         <Header/>\n         {\n                this.props.State.DefaultOperation.Game!=undefined?<SlotsScenes/>:<div></div>\n          }\n      </div>\n    );\n  }\n  \n}\n\nexport default connect(\n  state=>({State:state}),\n  dispatch => ({\n    AddContact: () => {\n      dispatch(CreateAction())\n    }\n  })\n)(App);\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","const initialState = {\r\n    FirstBut:\"Start\",\r\n    FirstInputId:\"\",\r\n    FirstInputName:\"\"\r\n}\r\n \r\nexport default initialState;","\r\nimport {keys} from \"lodash\"\r\nimport {omit} from 'lodash'\r\n\r\n\r\nfunction CreateScene(state){\r\n    if(state.FirstBut==\"Start\"){\r\n        let State={\r\n            ...state,\r\n            Game:{\r\n                GameName:state.FirstInputName,\r\n                Id:state.FirstInputId,\r\n                SceneList:{\r\n                    0:{\r\n                        id:\"0\",\r\n                        SceneName : \"SceneName_\"+0,\r\n                        GameType : \"Slot\",\r\n                        NumberOfReels:5,\r\n                        Reels : {\r\n                            1:{\r\n                                name:\"Reel1\"\r\n                            },\r\n                            2:{\r\n                                name:\"Reel2\"\r\n                            },\r\n                            3:{\r\n                                name:\"Reel3\"\r\n                            },\r\n                            4:{\r\n                                name:\"Reel4\"\r\n                            },\r\n                            5:{\r\n                                name:\"Reel5\"\r\n                            },\r\n                        },\r\n                        ScernTypeOfConf:{\r\n                            Symbols:false,\r\n                            Paytable:false,\r\n                            Substitutes:false,\r\n                            Special:false,\r\n                            Reelstrip:false,\r\n                            NumberIfFreespin:false\r\n                        },\r\n                        SlectedScernTypeOfConf:\"\",\r\n                        Symbols:{\r\n                            \r\n                        },\r\n                        FreespinGame:0,\r\n                        NumberIfFreespin:{},\r\n                        TotalRTP: \"0\",\r\n                        BaseGameRTP: \"0\",\r\n                        FreespinsRTP: \"0\",\r\n                        BonusGameRTP: \"0\",\r\n                        BasegameHitRate: \"0\",\r\n                        HitRate:{},\r\n                        Combinations:{},\r\n                        Returns:{}\r\n                    }\r\n                }\r\n            },\r\n            \r\n            \r\n            ScrenList:{\r\n                ...state.ScrenList,\r\n                    0:{\r\n                        Id:\"\"+0+\"\",\r\n                        display:\"flex\"\r\n                    },\r\n                },\r\n                BookmarkList:{\r\n                    ...state.BookmarkList,\r\n                        0:{\r\n                            Id:\"\"+0+\"\",\r\n                            backg:\"green\"\r\n                        },\r\n                    },\r\n                BookmarkOn:0\r\n            \r\n        }\r\n        let reels=State.Game.SceneList[0].Reels\r\n        for(let i = 1;i<=keys(reels).length;i++){\r\n            State={\r\n                ...State,\r\n                Game:{\r\n                    ...State.Game,\r\n                    SceneList:{\r\n                        ...State.Game.SceneList,\r\n                            [0]:{\r\n                                ...State.Game.SceneList[0],\r\n                                NumberIfFreespin:{\r\n                                    ...State.Game.SceneList[0].NumberIfFreespin,\r\n                                    [i]:0\r\n                                },\r\n                            }  \r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return{\r\n            ...State\r\n        }\r\n           \r\n    }\r\n    else{\r\n        \r\n        let N = 0\r\n        let C = false\r\n        while(!C){\r\n            \r\n            C=true;\r\n            for(let i = 0;i<keys(state.Game.SceneList).length;i++)\r\n            \r\n            {\r\n                if(N==keys(state.Game.SceneList)[i])\r\n                 C=false;\r\n            }\r\n            if(!C)\r\n                N++;\r\n            \r\n        }\r\n        let State={\r\n            ...state,\r\n            Game:{\r\n                ...state.Game,\r\n                SceneList:{\r\n                    ...state.Game.SceneList,\r\n                    [N]:{\r\n                        \r\n                        id:[N],\r\n                        SceneName : \"SceneName_\"+[N],\r\n                        GameType : \"Slot\",\r\n                        NumberOfReels:5,\r\n                        Reels : {\r\n                            1:{\r\n                                name:\"Reel1\"\r\n                            },\r\n                            2:{\r\n                                name:\"Reel2\"\r\n                            },\r\n                            3:{\r\n                                name:\"Reel3\"\r\n                            },\r\n                            4:{\r\n                                name:\"Reel4\"\r\n                            },\r\n                            5:{\r\n                                name:\"Reel5\"\r\n                            }\r\n                        },\r\n                        ScernTypeOfConf:{\r\n                            Symbols:false,\r\n                            Paytable:false,\r\n                            Substitutes:false,\r\n                            Special:false,\r\n                            Reelstrip:false,\r\n                            NumberIfFreespin:false\r\n                        },\r\n                        SlectedScernTypeOfConf:\"\",\r\n                        Symbols:{\r\n                            \r\n                        },\r\n                        FreespinGame:N,\r\n                        NumberIfFreespin:{},\r\n                        TotalRTP: \"0\",\r\n                        BaseGameRTP: \"0\",\r\n                        FreespinsRTP: \"0\",\r\n                        BonusGameRTP: \"0\",\r\n                        BasegameHitRate: \"0\",\r\n                        HitRate:{},\r\n                        Combinations:{},\r\n                        Returns:{}\r\n                    }\r\n                }\r\n            },\r\n            ScrenList:{\r\n            ...state.ScrenList,\r\n                [N]:{\r\n                    Id:\"\"+N+\"\",\r\n                    display:\"none\"\r\n                },\r\n            },\r\n            BookmarkList:{\r\n                ...state.BookmarkList,\r\n                    [N]:{\r\n                        Id:\"\"+N+\"\",\r\n                        backg:\"white\"\r\n                    },\r\n            },\r\n        }\r\n        let reels=State.Game.SceneList[N].Reels\r\n        for(let i = 1;i<=keys(reels).length;i++){\r\n            State={\r\n                ...State,\r\n                Game:{\r\n                    ...State.Game,\r\n                    SceneList:{\r\n                        ...State.Game.SceneList,\r\n                            [N]:{\r\n                                ...State.Game.SceneList[N],\r\n                                NumberIfFreespin:{\r\n                                    ...State.Game.SceneList[N].NumberIfFreespin,\r\n                                    [i]:0\r\n                                },\r\n                            }  \r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return{\r\n            ...State\r\n        }\r\n    }\r\n    return state\r\n}\r\nexport default CreateScene","import {keys} from \"lodash\"\r\nimport {omit} from 'lodash'\r\n\r\nfunction InputFid(state, action){\r\n    return{\r\n        ...state,\r\n        FirstInputId: action.paylot\r\n    }\r\n}\r\nfunction InputFN(state, action){\r\n    return{\r\n        ...state,\r\n        FirstInputName: action.paylot\r\n    }\r\n}\r\nfunction InputSN(state, action){\r\n    return {\r\n        ...state,\r\n        Game:{\r\n            ...state.Game,\r\n            SceneList:{\r\n                ...state.Game.SceneList,\r\n                [action.paylot.v2]:{\r\n                    ...state.Game.SceneList[action.paylot.v2],\r\n                    SceneName : action.paylot.v1,\r\n                }\r\n            }\r\n        },\r\n        \r\n        \r\n    }\r\n}\r\nfunction InputGT(state, action){\r\n    return {\r\n        ...state,\r\n        Game:{\r\n            ...state.Game,\r\n            SceneList:{\r\n                ...state.Game.SceneList,\r\n                [action.paylot.v2]:{\r\n                    ...state.Game.SceneList[action.paylot.v2],\r\n                    GameType : action.paylot.v1,\r\n                }\r\n            }\r\n        },\r\n        \r\n        \r\n    }\r\n}\r\n\r\nfunction InputNOR(state, action){\r\n    let Nof = state.Game.SceneList[action.paylot.v2].NumberOfReels\r\n    let nValue = action.paylot.v1\r\n    let symbols=state.Game.SceneList[action.paylot.v2].Symbols\r\n    let NIF = state.Game.SceneList[action.paylot.v2].NumberIfFreespin\r\n\r\n    if(nValue<Nof){\r\n        for(let i = nValue+1;i<=Nof;i++){\r\n            NIF={\r\n                \r\n                ...omit(NIF, i)\r\n            }\r\n            for(let a = 0;a<keys(symbols).length;a++){\r\n                symbols={\r\n                    ...symbols,\r\n                    [keys(symbols)[a]]:{\r\n                        ...symbols[keys(symbols)[a]],\r\n                        Reelstrip:{\r\n                            ...omit(symbols[keys(symbols)[a]].Reelstrip, i)\r\n                        },\r\n                        Paytable:{\r\n                            ...omit(symbols[keys(symbols)[a]].Paytable, i)\r\n                        }\r\n                    }\r\n                }\r\n                \r\n            }\r\n        }\r\n    }\r\n    else if(nValue>Nof){\r\n        \r\n        for(let i = Nof+1;i<=nValue;i++){\r\n            NIF={\r\n                \r\n                ...NIF,\r\n                [i]:0\r\n            }\r\n            for(let a = 0;a<keys(symbols).length;a++){\r\n                symbols={\r\n                    ...symbols,\r\n                    [keys(symbols)[a]]:{\r\n                        ...symbols[keys(symbols)[a]],\r\n                        Reelstrip:{\r\n                            ...symbols[keys(symbols)[a]].Reelstrip,\r\n                            [i]:0\r\n                        },\r\n                        Paytable:{\r\n                            ...symbols[keys(symbols)[a]].Paytable,\r\n                            [i]:0\r\n                        }\r\n                    }\r\n                }\r\n                \r\n            }\r\n        }\r\n    }\r\n    return {\r\n        ...state,\r\n        Game:{\r\n            ...state.Game,\r\n            SceneList:{\r\n                ...state.Game.SceneList,\r\n                [action.paylot.v2]:{\r\n                    ...state.Game.SceneList[action.paylot.v2],\r\n                    NumberOfReels : nValue,\r\n                    Symbols:{\r\n                        ...symbols\r\n                    },\r\n                    NumberIfFreespin:{\r\n                        ...NIF\r\n                    }\r\n                }\r\n            }\r\n        },\r\n        \r\n    }\r\n}\r\nfunction InputSymN(state, action){\r\n    let vID=action.paylot.vID, vKEY=action.paylot.vKEY, targetV=action.paylot.targetV.target.value\r\n        return {\r\n            ...state,\r\n            Game:{\r\n                ...state.Game,\r\n                SceneList:{\r\n                    ...state.Game.SceneList,\r\n                    [vID]:{\r\n                        ...state.Game.SceneList[vID],\r\n                        \r\n                        Symbols:{\r\n                            ...state.Game.SceneList[vID].Symbols,\r\n                            [vKEY]:{\r\n                                ...state.Game.SceneList[vID].Symbols[[vKEY]],\r\n                                name:targetV\r\n                            }\r\n                        },\r\n                    }\r\n                }\r\n            },\r\n            \r\n        }\r\n\r\n}\r\nfunction InputSymID(state, action){\r\n    let vID=action.paylot.vID, vKEY=action.paylot.vKEY, targetV=action.paylot.targetV.target.value\r\n        return {\r\n            ...state,\r\n            Game:{\r\n                ...state.Game,\r\n                SceneList:{\r\n                    ...state.Game.SceneList,\r\n                    [vID]:{\r\n                        ...state.Game.SceneList[vID],\r\n                        \r\n                        Symbols:{\r\n                            ...state.Game.SceneList[vID].Symbols,\r\n                            [vKEY]:{\r\n                                ...state.Game.SceneList[vID].Symbols[[vKEY]],\r\n                                id:targetV\r\n                            }\r\n                        },\r\n                    }\r\n                }\r\n            },\r\n            \r\n        }\r\n\r\n}\r\nfunction InputSymPayT(state, action){\r\n    let vID=action.paylot.vID, vKEY=action.paylot.vKEY, num\r\n    let vKEY1=action.paylot.vKEY1, targetV=action.paylot.targetV.target.value\r\n    if(targetV!=\"\"){\r\n             num = parseInt(targetV.replace(/\\D+/g,\"\"))\r\n             if(isNaN(num)){\r\n                num = \"\"\r\n                \r\n              }\r\n    }\r\n    else{\r\n        num=\"\"\r\n    }\r\n    \r\n        return {\r\n            ...state,\r\n            Game:{\r\n                ...state.Game,\r\n                SceneList:{\r\n                    ...state.Game.SceneList,\r\n                    [vID]:{\r\n                        ...state.Game.SceneList[vID],\r\n                        \r\n                        Symbols:{\r\n                            ...state.Game.SceneList[vID].Symbols,\r\n                            [vKEY]:{\r\n                                ...state.Game.SceneList[vID].Symbols[[vKEY]],\r\n                                Paytable:{\r\n                                    ...state.Game.SceneList[vID].Symbols[[vKEY]].Paytable,\r\n                                    [vKEY1]:num\r\n                                }\r\n                            }\r\n                        },\r\n                    }\r\n                }\r\n            },\r\n            \r\n        }\r\n\r\n}\r\n\r\nfunction InputSymSub(state, action){\r\n    let vID=action.paylot.vID, vKEY=action.paylot.vKEY\r\n    let vKEY1=action.paylot.vKEY1\r\n    let targetV=!state.Game.SceneList[vID].Symbols[vKEY].Substiture[vKEY1].value\r\n    \r\n    \r\n    \r\n        return {\r\n            ...state,\r\n            Game:{\r\n                ...state.Game,\r\n                SceneList:{\r\n                    ...state.Game.SceneList,\r\n                    [vID]:{\r\n                        ...state.Game.SceneList[vID],\r\n                        \r\n                        Symbols:{\r\n                            ...state.Game.SceneList[vID].Symbols,\r\n                            [vKEY]:{\r\n                                ...state.Game.SceneList[vID].Symbols[vKEY],\r\n                                Substiture:{\r\n                                    ...state.Game.SceneList[vID].Symbols[vKEY].Substiture,\r\n                                    [vKEY1]:{\r\n                                       ...state.Game.SceneList[vID].Symbols[vKEY].Substiture[vKEY1],\r\n                                       value:targetV \r\n                                    }\r\n                                }\r\n                                \r\n                            },\r\n                            [vKEY1]:{\r\n                                ...state.Game.SceneList[vID].Symbols[vKEY1],\r\n                                Substiture:{\r\n                                    ...state.Game.SceneList[vID].Symbols[vKEY1].Substiture,\r\n                                    [vKEY]:{\r\n                                       ...state.Game.SceneList[vID].Symbols[vKEY1].Substiture[vKEY],\r\n                                       value:targetV \r\n                                    }\r\n                                }\r\n                                \r\n                            }\r\n                        },\r\n                    }\r\n                }\r\n            },\r\n            \r\n        }\r\n\r\n}\r\nfunction InputSymSpec(state, action){\r\n    let vID=action.paylot.vID, vKEY=action.paylot.vKEY\r\n    let vKEY1=action.paylot.vKEY1\r\n    let targetV=!state.Game.SceneList[vID].Symbols[vKEY].Special[vKEY1]\r\n    \r\n    \r\n    \r\n        return {\r\n            ...state,\r\n            Game:{\r\n                ...state.Game,\r\n                SceneList:{\r\n                    ...state.Game.SceneList,\r\n                    [vID]:{\r\n                        ...state.Game.SceneList[vID],\r\n                        \r\n                        Symbols:{\r\n                            ...state.Game.SceneList[vID].Symbols,\r\n                            [vKEY]:{\r\n                                ...state.Game.SceneList[vID].Symbols[vKEY],\r\n                                Special:{\r\n                                    ...state.Game.SceneList[vID].Symbols[vKEY].Special,\r\n                                    [vKEY1]:targetV \r\n                                }\r\n                                \r\n                            }\r\n                        },\r\n                    }\r\n                }\r\n            },\r\n            \r\n        }\r\n\r\n}\r\nfunction InputSymReel(state, action){\r\n    let vID=action.paylot.vID, vKEY=action.paylot.vKEY, num\r\n    let vKEY1=action.paylot.vKEY1, targetV=action.paylot.targetV.target.value\r\n    if(targetV!=\"\"){\r\n             num = parseInt(targetV.replace(/\\D+/g,\"\"))\r\n             if(isNaN(num)){\r\n                num = \"\"\r\n                \r\n              }\r\n    }\r\n    else{\r\n        num=\"\"\r\n    }\r\n    \r\n        return {\r\n            ...state,\r\n            Game:{\r\n                ...state.Game,\r\n                SceneList:{\r\n                    ...state.Game.SceneList,\r\n                    [vID]:{\r\n                        ...state.Game.SceneList[vID],\r\n                        \r\n                        Symbols:{\r\n                            ...state.Game.SceneList[vID].Symbols,\r\n                            [vKEY]:{\r\n                                ...state.Game.SceneList[vID].Symbols[[vKEY]],\r\n                                Reelstrip:{\r\n                                    ...state.Game.SceneList[vID].Symbols[[vKEY]].Reelstrip,\r\n                                    [vKEY1]:num\r\n                                }\r\n                            }\r\n                        },\r\n                    }\r\n                }\r\n            },\r\n            \r\n        }\r\n\r\n}\r\n function InputNumberIfFreespin(state, action){\r\n    let vID=action.paylot.vID, vKEY=action.paylot.vKEY, targetV=action.paylot.targetV.target.value, num\r\n    if(targetV!=\"\"){\r\n             num = parseInt(targetV.replace(/\\D+/g,\"\"))\r\n             if(isNaN(num)){\r\n                num = \"\"\r\n                \r\n              }\r\n    }\r\n    else{\r\n        num=\"\"\r\n    }\r\n    return{\r\n        ...state,\r\n            Game:{\r\n                ...state.Game,\r\n                SceneList:{\r\n                    ...state.Game.SceneList,\r\n                    [vID]:{\r\n                        ...state.Game.SceneList[vID],\r\n                        NumberIfFreespin:{\r\n                            ...state.Game.SceneList[vID].NumberIfFreespin,\r\n                            [vKEY]:num\r\n                        }\r\n                        \r\n                    }\r\n                }\r\n            },\r\n    }\r\n }\r\n function InputFreesG(state, action){\r\n     \r\n    let vID=action.paylot.vID, targetV=action.paylot.targetV.target.value\r\n    \r\n    return{\r\n        ...state,\r\n            Game:{\r\n                ...state.Game,\r\n                SceneList:{\r\n                    ...state.Game.SceneList,\r\n                    [vID]:{\r\n                        ...state.Game.SceneList[vID],\r\n                        FreespinGame:targetV\r\n                        \r\n                    }\r\n                }\r\n            },\r\n    }\r\n }\r\nexport {InputFreesG, InputNumberIfFreespin,InputFid, InputFN, InputSN, InputGT, InputNOR, InputSymN, InputSymID, InputSymPayT, InputSymSub, InputSymSpec, InputSymReel}","import {keys} from \"lodash\"\r\nimport {omit} from 'lodash'\r\n\r\nfunction DeleteScene(state, action){\r\n    if(keys(state.BookmarkList).length==1){\r\n                let sceneList=state.Game.SceneList\r\n                let bookmarkList=state.BookmarkList\r\n                let screnList=state.ScrenList\r\n                sceneList={\r\n                    ...omit(state.Game.SceneList,action.paylot)\r\n                }\r\n                bookmarkList={\r\n                    ...omit(state.BookmarkList,action.paylot)\r\n                }\r\n                screnList={\r\n                    ...omit(state.ScrenList,action.paylot)\r\n                }\r\n                sceneList={\r\n                    0:{\r\n                        id:\"0\",\r\n                        SceneName : \"SceneName_\"+0,\r\n                        GameType : \"Slot\",\r\n                        NumberOfReels:5,\r\n                        Reels : {\r\n                            1:{\r\n                                name:\"Reel1\"\r\n                            },\r\n                            2:{\r\n                                name:\"Reel1\"\r\n                            },\r\n                            3:{\r\n                                name:\"Reel1\"\r\n                            },\r\n                            4:{\r\n                                name:\"Reel1\"\r\n                            },\r\n                            5:{\r\n                                name:\"Reel1\"\r\n                            },\r\n                        },\r\n\r\n                        ScernTypeOfConf:{\r\n                            Symbols:false,\r\n                            Paytable:false,\r\n                            Substitutes:false,\r\n                            Special:false,\r\n                            Reelstrip:false,\r\n                            NumberIfFreespin:false\r\n                        },\r\n                        SlectedScernTypeOfConf:\"\",\r\n                        Symbols:{\r\n                            \r\n                        },\r\n                        FreespinGame:0,\r\n                        NumberIfFreespin:{},\r\n                        TotalRTP: \"0\",\r\n                        BaseGameRTP: \"0\",\r\n                        FreespinsRTP: \"0\",\r\n                        BonusGameRTP: \"0\",\r\n                        BasegameHitRate: \"0\",\r\n                        HitRate:{},\r\n                        Combinations:{},\r\n                        Returns:{}\r\n                    }\r\n                }\r\n                bookmarkList={\r\n                    ...state.bookmarkList,\r\n                        0:{\r\n                            Id:\"\"+0+\"\",\r\n                            backg:\"green\"\r\n                        },\r\n                }\r\n                screnList={\r\n                    ...state.screnList,\r\n                    0:{\r\n                        Id:\"\"+0+\"\",\r\n                        display:\"flex\"\r\n                    },\r\n                }\r\n                let reels=sceneList[0].Reels\r\n                for(let i = 1;i<=keys(reels).length;i++){\r\n                    \r\n                        \r\n                            \r\n                                sceneList={\r\n                                    ...sceneList,\r\n                                        [0]:{\r\n                                            ...sceneList[0],\r\n                                            NumberIfFreespin:{\r\n                                                ...sceneList[0].NumberIfFreespin,\r\n                                                [i]:0\r\n                                            },\r\n                                        }  \r\n                                }\r\n                        \r\n                    \r\n                }\r\n                return{\r\n                    ...state,\r\n                    Game:{\r\n                        ...state.Game,\r\n                        SceneList:{\r\n                            ...sceneList\r\n                        }\r\n                    \r\n                    },\r\n                    BookmarkList:{\r\n                        ...bookmarkList\r\n                    },\r\n                    ScrenList:{\r\n                        ...screnList\r\n                    },\r\n                    BookmarkOn:0\r\n                }\r\n        }\r\n         else{\r\n             let k = keys(omit(state.ScrenList,action.paylot))[0]\r\n             let State = {...state}\r\n             \r\n             for(let i = 0;i<keys(State.Game.SceneList).length;i++){\r\n                 if(keys(State.Game.SceneList)[i]!=action.paylot){\r\n                     if(State.Game.SceneList[keys(State.Game.SceneList)[i]].FreespinGame==action.paylot){\r\n                         \r\n                        State={\r\n                            ...State,\r\n                            Game:{\r\n                                ...State.Game,\r\n                                SceneList:{\r\n                                    ...State.Game.SceneList,\r\n                                    [keys(State.Game.SceneList)[i]]:{\r\n                                        ...State.Game.SceneList[keys(State.Game.SceneList)[i]],\r\n                                        FreespinGame:Number(keys(State.Game.SceneList)[i])\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                     }\r\n                 }\r\n             }\r\n             \r\n             State={\r\n                ...State,\r\n                Game:{\r\n                    ...State.Game,\r\n                    SceneList:{\r\n                        \r\n                        ...omit(State.Game.SceneList,action.paylot),\r\n                        \r\n                    }\r\n                    \r\n                },\r\n                BookmarkList:{\r\n                    \r\n                    ...omit(State.BookmarkList,action.paylot),\r\n                    [k]:{\r\n                        Id:\"\"+k+\"\",\r\n                        backg:\"green\"\r\n                    },\r\n                },\r\n                ScrenList:{\r\n                    \r\n                    ...omit(State.ScrenList,action.paylot),\r\n                    [k]:{\r\n                        Id:\"\"+k+\"\",\r\n                        display:\"flex\"\r\n                    },\r\n                },\r\n                BookmarkOn:k\r\n            }\r\n            \r\n            return{\r\n                ...State\r\n            }\r\n         }\r\n}\r\n\r\nexport {DeleteScene}","import {keys} from \"lodash\"\r\nimport {omit} from 'lodash'\r\n\r\nfunction Select(state, action){\r\n    \r\n    if(state.BookmarkOn!=action.paylot)\r\n    return{\r\n        ...state,\r\n        ScrenList:{\r\n            ...state.ScrenList,\r\n                [action.paylot]:{\r\n                    Id:\"\"+action.paylot+\"\",\r\n                    display:\"flex\"\r\n                },\r\n                [state.BookmarkOn]:{\r\n                    Id:\"\"+[state.BookmarkOn]+\"\",\r\n                    display:\"none\"\r\n                },\r\n            },\r\n        BookmarkList:{\r\n                ...state.BookmarkList,\r\n                    [action.paylot]:{\r\n                        Id:\"\"+action.paylot+\"\",\r\n                        backg:\"green\"\r\n                    },\r\n                    [state.BookmarkOn]:{\r\n                        Id:\"\"+[state.BookmarkOn]+\"\",\r\n                        backg:\"white\"\r\n                    },\r\n        },\r\n        BookmarkOn:action.paylot\r\n    }\r\n    else{\r\n        return{\r\n            ...state\r\n        }\r\n    }\r\n}\r\n\r\nfunction SelectMC(state, action){\r\n    \r\n    let v, s=action.paylot.v1, s2=\"\"\r\n    switch(action.paylot.v1){\r\n        case \"Symbols\":{\r\n            \r\n            if(state.Game.SceneList[action.paylot.v2].ScernTypeOfConf.Symbols){\r\n                s2=\"\"\r\n                v=false\r\n            }\r\n            else{\r\n                if(state.Game.SceneList[action.paylot.v2].SlectedScernTypeOfConf!=\"Symbols\")\r\n                    s2=state.Game.SceneList[action.paylot.v2].SlectedScernTypeOfConf\r\n                v=true\r\n            }\r\n            break\r\n        }\r\n        case \"Paytable\":{\r\n            if(state.Game.SceneList[action.paylot.v2].ScernTypeOfConf.Paytable){\r\n                s2=\"\"\r\n                v=false\r\n            }\r\n            else{\r\n                if(state.Game.SceneList[action.paylot.v2].SlectedScernTypeOfConf!=\"Paytable\")\r\n                    s2=state.Game.SceneList[action.paylot.v2].SlectedScernTypeOfConf\r\n                v=true\r\n            }\r\n            break\r\n        }\r\n        case \"Substiture\":{\r\n            if(state.Game.SceneList[action.paylot.v2].ScernTypeOfConf.Substiture){\r\n                s2=\"\"\r\n                v=false\r\n            }\r\n            else{\r\n                if(state.Game.SceneList[action.paylot.v2].SlectedScernTypeOfConf!=\"Substiture\")\r\n                    s2=state.Game.SceneList[action.paylot.v2].SlectedScernTypeOfConf\r\n                v=true\r\n            }\r\n            break\r\n        }\r\n        case \"Special\":{\r\n            if(state.Game.SceneList[action.paylot.v2].ScernTypeOfConf.Special){\r\n                s2=\"\"\r\n                v=false\r\n            }\r\n            else{\r\n                if(state.Game.SceneList[action.paylot.v2].SlectedScernTypeOfConf!=\"Special\")\r\n                    s2=state.Game.SceneList[action.paylot.v2].SlectedScernTypeOfConf\r\n                v=true\r\n            }\r\n            break\r\n        }\r\n        case \"Reelstrip\":{\r\n            if(state.Game.SceneList[action.paylot.v2].ScernTypeOfConf.Reelstrip){\r\n                s2=\"\"\r\n                v=false\r\n            }\r\n            else{\r\n                if(state.Game.SceneList[action.paylot.v2].SlectedScernTypeOfConf!=\"Reelstrip\")\r\n                    s2=state.Game.SceneList[action.paylot.v2].SlectedScernTypeOfConf\r\n                v=true\r\n            }\r\n            break\r\n        }\r\n        case \"NumberIfFreespin\":{\r\n            if(state.Game.SceneList[action.paylot.v2].ScernTypeOfConf.NumberIfFreespin){\r\n                s2=\"\"\r\n                v=false\r\n            }\r\n            else{\r\n                if(state.Game.SceneList[action.paylot.v2].SlectedScernTypeOfConf!=\"NumberIfFreespin\")\r\n                    s2=state.Game.SceneList[action.paylot.v2].SlectedScernTypeOfConf\r\n                v=true\r\n            }\r\n            break\r\n        }\r\n    }\r\n    if(s!=s2) \r\n    if(state.Game.SceneList[action.paylot.v2].SlectedScernTypeOfConf!=\"\") \r\n    return{\r\n        ...state,\r\n        Game:{\r\n            ...state.Game,\r\n            SceneList:{\r\n                ...state.Game.SceneList,\r\n                [action.paylot.v2]:{\r\n                    ...state.Game.SceneList[action.paylot.v2],\r\n                    \r\n                    ScernTypeOfConf:{\r\n                        ...state.Game.SceneList[action.paylot.v2].ScernTypeOfConf,\r\n                        [s]:v,\r\n                        [s2]:!v,\r\n                    },\r\n                    SlectedScernTypeOfConf:action.paylot.v1\r\n                }\r\n            }\r\n        },\r\n        \r\n    }\r\n    else\r\n    return{\r\n        ...state,\r\n        Game:{\r\n            ...state.Game,\r\n            SceneList:{\r\n                ...state.Game.SceneList,\r\n                [action.paylot.v2]:{\r\n                    ...state.Game.SceneList[action.paylot.v2],\r\n                    \r\n                    ScernTypeOfConf:{\r\n                        ...state.Game.SceneList[action.paylot.v2].ScernTypeOfConf,\r\n                        [s]:v,\r\n                        \r\n                    },\r\n                    SlectedScernTypeOfConf:action.paylot.v1\r\n                }\r\n            }\r\n        },\r\n        \r\n    }\r\n    return{\r\n        ...state,\r\n        Game:{\r\n            ...state.Game,\r\n            SceneList:{\r\n                ...state.Game.SceneList,\r\n                [action.paylot.v2]:{\r\n                    ...state.Game.SceneList[action.paylot.v2],\r\n                    \r\n                    ScernTypeOfConf:{\r\n                        ...state.Game.SceneList[action.paylot.v2].ScernTypeOfConf,\r\n                        [s]:v,\r\n                        \r\n                    },\r\n                    SlectedScernTypeOfConf:\"\"\r\n                }\r\n            }\r\n        },\r\n        \r\n    }\r\n}\r\n\r\nexport {Select, SelectMC}","import {keys} from \"lodash\"\r\nimport {omit} from 'lodash'\r\n\r\nfunction StartReset(state, action){\r\n    if(state.FirstBut==\"Start\"){\r\n        return{\r\n            ...state,\r\n            FirstBut:\"Reset\"\r\n        }\r\n    }\r\n    else{\r\n        return{\r\n            \r\n            \r\n            \r\n                FirstBut:\"Start\",\r\n                FirstInputId:\"\",\r\n                FirstInputName:\"\"\r\n            \r\n        }\r\n    }\r\n\r\n}\r\nexport {StartReset}","import {keys} from \"lodash\"\r\nimport {omit} from 'lodash'\r\n\r\nfunction AddSymbol(state, action){\r\n    \r\n    let Subst={}\r\n    let Reel={}\r\n    \r\n    let N=0\r\n    let symbols=state.Game.SceneList[action.paylot].Symbols\r\n    let masKey=keys(symbols)\r\n    \r\n    if(keys(state.Game.SceneList[action.paylot].Symbols).length==0)\r\n    {\r\n        \r\n        \r\n        \r\n        for(let i = 0;i<state.Game.SceneList[action.paylot].NumberOfReels;i++){\r\n            Reel={\r\n                ...Reel,\r\n                [i+1]:0\r\n            }\r\n            \r\n        }\r\n        symbols={\r\n            \r\n            [N]:{\r\n                name:\"Symbol_\"+N,\r\n                id:\"s\"+N+\"w\",\r\n                Paytable:{\r\n                    ...Reel\r\n                },\r\n                Substiture:{\r\n                    [N]:{\r\n                        id:N,\r\n                        value:false\r\n                    }\r\n                   \r\n                },\r\n                Special:{\r\n                    isWild:false,\r\n                    isScatter:false,\r\n                    isSpecific:false\r\n                },\r\n                Reelstrip:{\r\n                    ...Reel\r\n                }\r\n            },\r\n            \r\n        }\r\n        \r\n    }\r\n        \r\n    else\r\n        {\r\n            \r\n            let C = false\r\n            while(!C){\r\n                \r\n                C=true;\r\n                for(let i = 0;i<keys(state.Game.SceneList[action.paylot].Symbols).length;i++)\r\n            \r\n                {\r\n                    if(N==keys(state.Game.SceneList[action.paylot].Symbols)[i])\r\n                    C=false;\r\n                }\r\n                if(!C)\r\n                    N++;\r\n            \r\n            }\r\n            \r\n            \r\n            \r\n            for(let i = 0;i<state.Game.SceneList[action.paylot].NumberOfReels;i++){\r\n                Reel={\r\n                    ...Reel,\r\n                    [i+1]:0\r\n                }\r\n            }\r\n                \r\n            \r\n            for(var i = 0;i<masKey.length+1;i++)\r\n            {\r\n                if(i<masKey.length)\r\n                symbols={\r\n                    ...symbols,\r\n                    [masKey[i]]:{\r\n                        ...symbols[masKey[i]],\r\n                        Substiture:{\r\n                            ...symbols[masKey[i]].Substiture,\r\n                            [N]:{\r\n                                id:N,\r\n                                value:false\r\n                            }\r\n                            \r\n                        }\r\n                    }\r\n                }\r\n                \r\n                \r\n            }\r\n            for(let i=0;i<=masKey.length;i++){\r\n                if(i!=masKey.length){\r\n                    Subst={\r\n                        ...Subst,\r\n                        [masKey[i]]:{\r\n                            id:masKey[i],\r\n                            value:false\r\n                        }\r\n                    }\r\n                }\r\n                else{\r\n                    Subst={\r\n                        ...Subst,\r\n                        [N]:{\r\n                            id:[N],\r\n                            value:false\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            symbols={\r\n              ...symbols,\r\n              [N]:{\r\n                name:\"Symbol_\"+N,\r\n                id:\"s\"+N+\"w\",\r\n                Paytable:{\r\n                    ...Reel,\r\n                },\r\n                Substiture:{\r\n                    ...Subst\r\n                },\r\n                Special:{\r\n                    isWild:false,\r\n                    isScatter:false,\r\n                    isSpecific:false\r\n                },\r\n                Reelstrip:{\r\n                    ...Reel\r\n                }\r\n              }\r\n            }\r\n            \r\n        }\r\n    return {\r\n        ...state,\r\n        Game:{\r\n            ...state.Game,\r\n            SceneList:{\r\n                ...state.Game.SceneList,\r\n                [action.paylot]:{\r\n                    ...state.Game.SceneList[action.paylot],\r\n                    \r\n                    Symbols:{\r\n                        ...symbols\r\n                    },\r\n                }\r\n            }\r\n        },\r\n        \r\n    }\r\n}\r\n\r\nexport {AddSymbol}","import {keys} from \"lodash\"\r\nimport {omit} from 'lodash'\r\n\r\nfunction DeleteSymbol(state, action){\r\n    let symbols = state.Game.SceneList[action.paylot.v1].Symbols\r\n    \r\n    \r\n    symbols={\r\n        \r\n        ...omit(symbols,action.paylot.v2)\r\n    }\r\n    let sarray=keys(symbols)\r\n    \r\n    \r\n    \r\n    for(let i = 0;i<sarray.length;i++){\r\n        \r\n       \r\n        symbols={\r\n            ...symbols,\r\n            [sarray[i]]:{\r\n                ...symbols[sarray[i]],\r\n                Substiture:{\r\n                    ...omit(symbols[sarray[i]].Substiture, action.paylot.v2)\r\n\r\n                }\r\n            }\r\n        }\r\n       \r\n        \r\n    }\r\n    \r\n    \r\n    return {\r\n        ...state,\r\n        Game:{\r\n            ...state.Game,\r\n            SceneList:{\r\n                ...state.Game.SceneList,\r\n                [action.paylot.v1]:{\r\n                    ...state.Game.SceneList[action.paylot.v1],\r\n                    \r\n                    Symbols:{\r\n                        \r\n                        ...symbols\r\n                    },\r\n                }\r\n            }\r\n        },\r\n        \r\n    }\r\n}\r\nexport {DeleteSymbol}","import {keys} from \"lodash\"\r\nimport {omit} from 'lodash'\r\n\r\n\r\nfunction WorkWithReels(state, action){\r\n    let MasKey=keys(action.paylot)\r\n    let KeySc\r\n    let WorkType=false\r\n    let RTP_base = 0\r\n    let FreeGame = 0\r\n    let RTP = 0\r\n    \r\n    for(let i = 0;i<keys(action.paylot).length;i++){\r\n        if(MasKey[i]==\"vID\"){\r\n            KeySc=action.paylot.vID\r\n            \r\n            break\r\n        }\r\n         else if(MasKey[i]==\"v2\"){\r\n            \r\n            KeySc=action.paylot.v2\r\n            for(let i = 0;i<keys(action.paylot).length;i++){\r\n                if(MasKey[i]==\"ReelSize\"){\r\n                    WorkType=\"ReelSize\"\r\n                }\r\n            }\r\n        }\r\n        \r\n        else if(MasKey.length==1){\r\n            \r\n            KeySc=action.paylot\r\n        }\r\n    }\r\n    \r\n    let scene=state.Game.SceneList[KeySc]\r\n    let symbols = state.Game.SceneList[KeySc].Symbols\r\n    let reels=scene.Reels\r\n    if(WorkType==\"ReelSize\"){\r\n        \r\n        let Nof = action.paylot.v3\r\n        let nValue = parseInt((action.paylot.v1+\" \").replace(/\\D+/g,\"\"))\r\n        \r\n        if(isNaN(nValue)){\r\n            \r\n            reels={}\r\n        }\r\n        else if(keys(reels).length==0){\r\n\r\n            for(let i = 1;i<=nValue;i++){\r\n                \r\n                    reels={\r\n                \r\n                        ...reels,\r\n                        [i]:{\r\n                            name:\"Reel\"+[i],\r\n                            symbols:{\r\n                                ...symbols\r\n                            },\r\n                            NumS:0,\r\n                            NumW:0\r\n                        }\r\n                    }\r\n                \r\n            }\r\n        }\r\n        else{\r\n           \r\n            if(nValue<Nof){\r\n                \r\n                for(let i = nValue+1;i<=Nof;i++){\r\n                    for(let a = 0;a<keys(reels).length;a++){\r\n                    \r\n                        reels={\r\n                        \r\n                            ...omit(reels, i)\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            else if(nValue>Nof){\r\n            \r\n                    for(let i = Nof+1;i<=nValue;i++){\r\n                        for(let a = 0;a<keys(reels).length;a++){\r\n                            reels={\r\n                        \r\n                                ...reels,\r\n                                [i]:{\r\n                                    name:\"Reel\"+[i],\r\n                                    symbols:{\r\n                                        ...symbols\r\n                                    },\r\n                                    NumS:0,\r\n                                    NumW:0\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n            } \r\n        }\r\n       \r\n    }\r\n    else{\r\n        for(let i = 1;i<=keys(reels).length;i++){\r\n            \r\n            reels={     \r\n                ...reels,\r\n                [i]:{\r\n                    name:\"Reel\"+[i],\r\n                    symbols:{\r\n                        ...symbols\r\n                    },\r\n                    NumS:0,\r\n                    NumW:0,\r\n                    NumSc:0\r\n                }\r\n            }\r\n        }\r\n    }\r\n    if(keys(symbols).length!=0){\r\n        \r\n        let wild=undefined\r\n        for(let i=0;i<keys(symbols).length;i++){\r\n            if(symbols[keys(symbols)[i]].Special[\"isWild\"]){\r\n                wild=keys(symbols)[i]\r\n                break\r\n            }\r\n        }\r\n        for(let i = 1;i<=keys(reels).length;i++){\r\n            for(let a = 0;a<keys(symbols).length;a++){\r\n                if(symbols[keys(symbols)[a]].Reelstrip[i]==0){\r\n                    \r\n                    reels={\r\n                        ...reels,\r\n                        [i]:{\r\n                            ...reels[i],\r\n                            NumS:reels[i].NumS,\r\n                            NumW:reels[i].NumW,\r\n                            NumSc:reels[i].NumSc\r\n                        }\r\n                        \r\n                    }\r\n                }\r\n                else if(symbols[keys(symbols)[a]].Reelstrip[i]==\"\"){\r\n                    reels={\r\n                        ...reels,\r\n                        [i]:{\r\n                            ...reels[i],\r\n                            NumS:reels[i].NumS,\r\n                            NumW:reels[i].NumW,\r\n                            NumSc:reels[i].NumSc\r\n                        }\r\n                        \r\n                    }\r\n                }\r\n                else if(symbols[keys(symbols)[a]].Reelstrip[i]==undefined){\r\n                    reels={\r\n                        ...reels,\r\n                        [i]:{\r\n                            ...reels[i],\r\n                            NumS:reels[i].NumS,\r\n                            NumW:reels[i].NumW,\r\n                            NumSc:reels[i].NumSc\r\n                        }\r\n                        \r\n                    }\r\n                }\r\n                else{\r\n                   \r\n                    reels={\r\n                        ...reels,\r\n                        [i]:{\r\n                            ...reels[i],\r\n                            NumS:reels[i].NumS+symbols[keys(symbols)[a]].Reelstrip[i],\r\n                            NumW:symbols[keys(symbols)[a]].Special.isWild?reels[i].NumW+symbols[keys(symbols)[a]].Reelstrip[i]:reels[i].NumW,\r\n                            NumSc:reels[i].symbols[keys(symbols)[a]].Special.isScatter?reels[i].NumSc+symbols[keys(symbols)[a]].Reelstrip[i]:reels[i].NumSc,\r\n                        }\r\n                        \r\n                    }\r\n                }\r\n            }\r\n        }\r\n        \r\n        for(let a=1;a<=keys(reels).length;a++){\r\n            reels={\r\n                ...reels,\r\n                [a]:{\r\n                    ...reels[a],\r\n                    ScInReel:reels[a].NumSc*1\r\n                }\r\n            },\r\n            reels={\r\n                ...reels,\r\n                [a]:{\r\n                    ...reels[a],\r\n                    p_Sc:reels[a].ScInReel!=0?reels[a].ScInReel/reels[a].NumS:0,\r\n                    p_no_Sc:reels[a].ScInReel!=0?1-reels[a].ScInReel/reels[a].NumS:1\r\n                    \r\n                }\r\n            }\r\n            \r\n            for (let i = 0; i<keys(symbols).length;i++){    \r\n                    let check=true\r\n                    let SubArray = keys(reels[a].symbols[keys(symbols)[i]].Substiture)\r\n                    \r\n                    for(let o = 0;o<SubArray.length;o++){\r\n                        \r\n                        if(reels[a].symbols[SubArray[o]].Special[\"isWild\"]&&reels[a].symbols[keys(symbols)[i]].Substiture[SubArray[o]].value){\r\n                            \r\n                            check=false\r\n                        }\r\n                    }\r\n                    if(check)\r\n                        reels={\r\n                            ...reels,\r\n                            [a]:{\r\n                                ...reels[a],\r\n                                symbols:{\r\n                                    ...reels[a].symbols,\r\n                                    [keys(symbols)[i]]:{\r\n                                        ...reels[a].symbols[keys(symbols)[i]],\r\n                                        Num:reels[a].symbols[keys(symbols)[i]].Reelstrip[a],\r\n                                        NumInreel:reels[a].symbols[keys(symbols)[i]].Reelstrip[a]!=0?reels[a].symbols[keys(symbols)[i]].Reelstrip[a]/reels[a].NumS:0,\r\n                                        NumNoreel:reels[a].symbols[keys(symbols)[i]].Reelstrip[a]!=0?1-(reels[a].symbols[keys(symbols)[i]].Reelstrip[a]/reels[a].NumS):1,\r\n                                        NumZW:reels[a].symbols[keys(symbols)[i]].Reelstrip[a],\r\n                                        NumInreelZW:reels[a].symbols[keys(symbols)[i]].Reelstrip[a]!=0?reels[a].symbols[keys(symbols)[i]].Reelstrip[a]/reels[a].NumS:0,\r\n                                        NumNoreelZW:reels[a].symbols[keys(symbols)[i]].Reelstrip[a]!=0?1-(reels[a].symbols[keys(symbols)[i]].Reelstrip[a]/reels[a].NumS):1,\r\n                                        IsWithWild:false\r\n                                    }\r\n\r\n                                }\r\n                            }\r\n                        }\r\n                    else\r\n                        reels={\r\n                            ...reels,\r\n                            [a]:{\r\n                                ...reels[a],\r\n                                symbols:{\r\n                                    ...reels[a].symbols,\r\n                                    [keys(symbols)[i]]:{\r\n                                        ...reels[a].symbols[keys(symbols)[i]],\r\n                                        Num:reels[a].symbols[keys(symbols)[i]].Reelstrip[a],\r\n                                        NumInreel:reels[a].symbols[keys(symbols)[i]].Reelstrip[a]!=0?reels[a].symbols[keys(symbols)[i]].Reelstrip[a]/reels[a].NumS:0,\r\n                                        NumNoreel:reels[a].symbols[keys(symbols)[i]].Reelstrip[a]!=0?1-(reels[a].symbols[keys(symbols)[i]].Reelstrip[a]/reels[a].NumS):1,\r\n                                        NumZW:reels[a].symbols[keys(symbols)[i]].Reelstrip[a]+reels[a].NumW,\r\n                                        NumInreelZW:reels[a].symbols[keys(symbols)[i]].Reelstrip[a]!=0?(reels[a].symbols[keys(symbols)[i]].Reelstrip[a]+reels[a].NumW)/reels[a].NumS:0,\r\n                                        NumNoreelZW:reels[a].symbols[keys(symbols)[i]].Reelstrip[a]!=0?1-((reels[a].symbols[keys(symbols)[i]].Reelstrip[a]+reels[a].NumW)/reels[a].NumS):1,\r\n                                        IsWithWild:true\r\n                                    }\r\n\r\n                                }\r\n                            }\r\n                        }     \r\n            }\r\n\r\n        }\r\n        let p_Sc_win={\r\n\r\n        }\r\n        for(let i = 1;i<=keys(reels).length;i++){\r\n            let ArrNoKay = [ ]\r\n            \r\n            if(i!=keys(reels).length){\r\n                for(let a = 0;a<keys(reels).length-i;a++){\r\n                    ArrNoKay[a]=Number(keys(reels)[a])\r\n                }\r\n                p_Sc_win={\r\n                    ...p_Sc_win,\r\n                    [i]:0\r\n                }\r\n                let las = ArrNoKay.length-1, start = true, k=ArrNoKay.length-2, mul\r\n                if(ArrNoKay.length!=1&&ArrNoKay.length!=2){\r\n                    while(start){\r\n                        \r\n                        mul=1\r\n                        for(let c = 0;c<keys(reels).length;c++){\r\n                            let check1=true\r\n                            for(let v = 0;v<ArrNoKay.length;v++){\r\n                                if(keys(reels)[c]==ArrNoKay[v])\r\n                                    check1=false\r\n                            }\r\n                            if(check1){\r\n                                mul=mul*reels[(keys(reels)[c])].p_Sc\r\n                                \r\n                            }\r\n                            else{\r\n                                mul=mul*reels[(keys(reels)[c])].p_no_Sc\r\n                                \r\n                            }\r\n                            \r\n                        }\r\n                        \r\n                        p_Sc_win={\r\n                            ...p_Sc_win,\r\n                            [i]:p_Sc_win[i]+mul\r\n                                \r\n                            \r\n                        }\r\n                       \r\n                        \r\n                        ArrNoKay[las]++;\r\n                        if(ArrNoKay[las]>keys(reels).length){\r\n                            if((Number(ArrNoKay[las]-2)==Number(ArrNoKay[k]))){\r\n                                let start2 = true\r\n                                while(start2){\r\n                                    if(ArrNoKay[k-1]!=undefined){\r\n                                        if(Number(ArrNoKay[k]-1)!=Number(ArrNoKay[k-1])){\r\n                                            let temp = Number(ArrNoKay[k-1])\r\n                                            \r\n                                            for(let q = k-1, m=1;q<ArrNoKay.length;q++,m++){\r\n                                                \r\n                                                ArrNoKay[q]=temp+m\r\n                                            }\r\n                                            k=ArrNoKay.length-2\r\n                                            start2=!start2\r\n                                        }\r\n                                        else{\r\n                                            k--\r\n                                        }\r\n                                    }\r\n                                    else{\r\n                                        start2=!start2\r\n                                        start=!start\r\n                                          \r\n                                        mul=1\r\n                                        for(let c = 0;c<keys(reels).length;c++){\r\n                                        let check1=true\r\n                                        for(let v = 0;v<ArrNoKay.length;v++){\r\n                                            if(keys(reels)[c]==ArrNoKay[v])\r\n                                                check1=false\r\n                                        }\r\n                                        if(check1)\r\n                                            mul=mul*reels[(keys(reels)[c])].p_Sc\r\n                                        else\r\n                                            mul=mul*reels[(keys(reels)[c])].p_no_Sc\r\n                                        }\r\n                                        p_Sc_win={\r\n                                            ...p_Sc_win,\r\n                                            [i]:p_Sc_win[i]+mul\r\n                                        }\r\n                                        \r\n                                    }\r\n                                }\r\n                            }\r\n                            else{\r\n                                ArrNoKay[las]=Number(ArrNoKay[k])+2\r\n                                ArrNoKay[k]=Number(ArrNoKay[k])+1\r\n                            }  \r\n                        }\r\n                    }\r\n                }\r\n                else if(ArrNoKay.length==1){\r\n                    while(start){\r\n                        mul=1\r\n                        for(let c = 0;c<keys(reels).length;c++){\r\n                        let check1=true\r\n                        for(let v = 0;v<ArrNoKay.length;v++){\r\n                            if(keys(reels)[c]==ArrNoKay[v])\r\n                                check1=false\r\n                        }\r\n                        if(check1)\r\n                            mul=mul*reels[(keys(reels)[c])].p_Sc\r\n                        else\r\n                            mul=mul*reels[(keys(reels)[c])].p_no_Sc\r\n                        }\r\n                        p_Sc_win={\r\n                            ...p_Sc_win,\r\n                            [i]:p_Sc_win[i]+mul\r\n                        }\r\n                        \r\n                        ArrNoKay[las]++;\r\n                        if(ArrNoKay[las]>keys(reels).length){\r\n                            \r\n                            \r\n                            start=!start\r\n                        }\r\n                    }\r\n                }\r\n                else if(ArrNoKay.length==2){\r\n                    while(start){\r\n                        mul=1\r\n                        for(let c = 0;c<keys(reels).length;c++){\r\n                        let check1=true\r\n                        for(let v = 0;v<ArrNoKay.length;v++){\r\n                            if(keys(reels)[c]==ArrNoKay[v])\r\n                                check1=false\r\n                        }\r\n                        if(check1)\r\n                            mul=mul*reels[(keys(reels)[c])].p_Sc\r\n                        else\r\n                            mul=mul*reels[(keys(reels)[c])].p_no_Sc\r\n                        }\r\n                        p_Sc_win={\r\n                            ...p_Sc_win,\r\n                            [i]:p_Sc_win[i]+mul\r\n                        }\r\n                        \r\n                        ArrNoKay[las]++;\r\n                        if(ArrNoKay[las]>keys(reels).length)\r\n                            if((Number(ArrNoKay[las]-2)==Number(ArrNoKay[k]))){\r\n                                \r\n                                start=!start\r\n                            }\r\n                            else{\r\n                                ArrNoKay[las]=Number(ArrNoKay[k])+2\r\n                                ArrNoKay[k]=Number(ArrNoKay[k])+1\r\n                            }\r\n                    }\r\n                } \r\n            }\r\n            else if(i==keys(reels).length){\r\n                p_Sc_win={\r\n                    ...p_Sc_win,\r\n                    [i]:1\r\n                }\r\n                for(let c = 0;c<keys(reels).length;c++){\r\n                    p_Sc_win={\r\n                        ...p_Sc_win,\r\n                        [i]:p_Sc_win[i]*reels[keys(reels)[c]].p_Sc\r\n                    }\r\n                    \r\n                }\r\n                \r\n            }\r\n            reels={\r\n                ...reels,\r\n                [i]:{\r\n                    ...reels[i],\r\n                    p_Sc_win:p_Sc_win[i]\r\n                }\r\n                \r\n\r\n            }\r\n        }\r\n        ///////////////////////////////\r\n        ///////////////////////////////\r\n        ///////////////////////////////\r\n        ///////////////////////////////\r\n        ///////////////////////////////\r\n        ///////////////////////////////\r\n        let TheBigestValues={}\r\n        \r\n        for(let i = 1;i<=keys(reels).length;i++){\r\n            let temp=symbols[keys(symbols)[0]].Paytable[i]\r\n            let index\r\n            for(let a = 0;a<keys(symbols).length;a++){\r\n                if(reels[i].symbols[keys(symbols)[a]].IsWithWild)\r\n                    if(temp<=symbols[keys(symbols)[a]].Paytable[i]){\r\n                        temp=symbols[keys(symbols)[a]].Paytable[i]\r\n                        index=keys(symbols)[a]\r\n                    }\r\n            }\r\n            TheBigestValues={\r\n                ...TheBigestValues,\r\n                [i]:index\r\n            }\r\n           \r\n        }\r\n        \r\n        for(let i = 1;i<=keys(reels).length;i++){\r\n            for(let a = 0;a<keys(symbols).length;a++){\r\n                let p_sym_win={}\r\n                reels={\r\n                    ...reels,\r\n                    [i]:{\r\n                        ...reels[i],\r\n                        symbols:{\r\n                            ...reels[i].symbols,\r\n                            [keys(symbols)[a]]:{\r\n                                ...reels[i].symbols[keys(symbols)[a]],\r\n                                p_sym_win:{} \r\n                            }  \r\n                        }\r\n                    }\r\n                }\r\n                \r\n                for(let l=1;l<=keys(reels).length;l++){\r\n                    \r\n                    if(l==keys(reels).length){\r\n                        \r\n                        p_sym_win={\r\n                            ...p_sym_win,\r\n                            [l]:1\r\n                        }\r\n                        for(let o = 1;o<=keys(reels).length;o++){\r\n                            p_sym_win={\r\n                                ...p_sym_win,\r\n                                [l]:p_sym_win[l]*reels[o].symbols[keys(symbols)[a]].NumInreelZW\r\n                            }\r\n                        }\r\n                        \r\n                        let add=1\r\n                        if(reels[i].symbols[keys(symbols)[a]].IsWithWild){\r\n                            if(wild!=undefined){\r\n                                if(keys(symbols)[a]!=TheBigestValues[i]){\r\n                                    for(let o = 1;o<=keys(reels).length;o++){\r\n                                        add=add*reels[o].symbols[wild].NumInreel\r\n                                        \r\n                                    }\r\n                                    \r\n                                    p_sym_win={\r\n                                        ...p_sym_win,\r\n                                        [l]:p_sym_win[l]-add\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    else{\r\n                        let tick=l+1\r\n                        p_sym_win={\r\n                            ...p_sym_win,\r\n                            [l]:1\r\n                        }\r\n                        for(let o = 1;o<=tick;o++){\r\n                            if(o==tick){\r\n                                p_sym_win={\r\n                                    ...p_sym_win,\r\n                                    [l]:p_sym_win[l]*reels[o].symbols[keys(symbols)[a]].NumNoreelZW\r\n                                }\r\n                            }\r\n                            else{\r\n                                p_sym_win={\r\n                                    ...p_sym_win,\r\n                                    [l]:p_sym_win[l]*reels[o].symbols[keys(symbols)[a]].NumInreelZW\r\n                                }\r\n                            }\r\n                        }\r\n                        \r\n                        let add=1\r\n                        if(reels[i].symbols[keys(symbols)[a]].IsWithWild)\r\n                            if(wild!=undefined){\r\n                                for(let o = 1;o<=tick;o++){\r\n                                    if(o==tick){\r\n                                        add=add*reels[o].symbols[keys(symbols)[a]].NumNoreelZW\r\n                                    }\r\n                                    else{\r\n                                        add=add*reels[o].symbols[wild].NumInreel\r\n                                    }\r\n                                }\r\n                                \r\n                                p_sym_win={\r\n                                    ...p_sym_win,\r\n                                    [l]:p_sym_win[l]-add\r\n                                }\r\n                                \r\n                                if(keys(symbols)[a]==TheBigestValues[i]){\r\n                                    add=1\r\n                                    for(let o = 1;o<=keys(reels).length;o++){\r\n                                        if(o==tick){\r\n                                            add=add*reels[o].symbols[keys(symbols)[a]].NumNoreelZW\r\n                                        }\r\n                                        else{\r\n                                            add=add*reels[o].p_Sc\r\n                                        }\r\n                                    }\r\n                                    \r\n                                    p_sym_win={\r\n                                        ...p_sym_win,\r\n                                        [l]:p_sym_win[l]+add\r\n                                    }\r\n                                }\r\n                            }\r\n                    }\r\n                    \r\n                }\r\n                reels={\r\n                    ...reels,\r\n                    [i]:{\r\n                        ...reels[i],\r\n                        symbols:{\r\n                            ...reels[i].symbols,\r\n                            [keys(symbols)[a]]:{\r\n                                ...reels[i].symbols[keys(symbols)[a]],\r\n                                p_sym_win:{\r\n                                    ...reels[i].symbols[keys(symbols)[a]].p_sym_win,\r\n                                    ...p_sym_win \r\n                                } \r\n                            }  \r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        RTP_base=0\r\n        for(let i = 1;i<=keys(reels).length;i++){\r\n            for(let a = 0;a<keys(symbols).length;a++){\r\n                for(let l = 1;l<=keys(reels).length;l++){\r\n                    reels={\r\n                        ...reels,\r\n                        [i]:{\r\n                            ...reels[i],\r\n                            symbols:{\r\n                                ...reels[i].symbols,\r\n                                [keys(symbols)[a]]:{\r\n                                    ...reels[i].symbols[keys(symbols)[a]],\r\n                                    RTP:{\r\n                                        [l]:reels[i].symbols[keys(symbols)[a]].Paytable[l]*reels[i].symbols[keys(symbols)[a]].p_sym_win[l]\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    RTP_base=RTP_base+reels[i].symbols[keys(symbols)[a]].Paytable[l]*reels[i].symbols[keys(symbols)[a]].p_sym_win[l]\r\n                }\r\n                \r\n            }\r\n        }\r\n        \r\n        if(KeySc==state.Game.SceneList[KeySc].FreespinGame){\r\n            FreeGame=0\r\n        }\r\n        else{\r\n            let keyFS=state.Game.SceneList[KeySc].FreespinGame\r\n            for(let i = 1;i<=keys(reels).length;i++){\r\n                FreeGame=FreeGame+(state.Game.SceneList[keyFS].BaseGameRTP*state.Game.SceneList[KeySc].NumberIfFreespin[i]*reels[i].p_Sc_win)\r\n            }\r\n        }\r\n        \r\n        \r\n        RTP=RTP_base+FreeGame\r\n        \r\n    }\r\n    \r\n    return{\r\n        ...state,\r\n        Game:{\r\n            ...state.Game,\r\n            SceneList:{\r\n                ...state.Game.SceneList,\r\n                [KeySc]:{\r\n                   ...state.Game.SceneList[KeySc],\r\n                   Reels:{\r\n                       ...reels\r\n                   },\r\n                   BaseGameRTP:RTP_base ,\r\n                   TotalRTP:RTP,\r\n                   FreespinsRTP:FreeGame\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\nexport {WorkWithReels}","import {keys} from \"lodash\"\r\nimport {omit} from 'lodash'\r\n\r\nimport {WorkWithReels} from './WorkWithReels'\r\n\r\nfunction AddFreespinGame(state, action){\r\n    \r\n    let State=state,vID=action.paylot\r\n    let N = 0\r\n        let C = false\r\n        while(!C){\r\n            \r\n            C=true;\r\n            for(let i = 0;i<keys(state.Game.SceneList).length;i++)\r\n            \r\n            {\r\n                if(N==keys(state.Game.SceneList)[i])\r\n                 C=false;\r\n            }\r\n            if(!C)\r\n                N++;\r\n            \r\n        }\r\n        State={\r\n            ...State,\r\n            Game:{\r\n                ...State.Game,\r\n                SceneList:{\r\n                    ...State.Game.SceneList,\r\n                    [N]:{\r\n                        ...State.Game.SceneList[vID]\r\n                    }\r\n                },\r\n                \r\n            },\r\n            ScrenList:{\r\n                ...state.ScrenList,\r\n                    [N]:{\r\n                        Id:\"\"+N+\"\",\r\n                        display:\"none\"\r\n                    },\r\n                },\r\n            BookmarkList:{\r\n                ...state.BookmarkList,\r\n                [N]:{\r\n                    Id:\"\"+N+\"\",\r\n                    backg:\"white\"\r\n                },\r\n            },\r\n        }\r\n        State={\r\n            ...State,\r\n            Game:{\r\n                ...State.Game,\r\n                SceneList:{\r\n                    ...State.Game.SceneList,\r\n                    [N]:{\r\n                        ...State.Game.SceneList[N],\r\n                        id:\"\"+N+\"\",\r\n                        SceneName : \"Freespen_\"+[N],\r\n                        FreespinGame:N,\r\n                    }\r\n                } \r\n            }\r\n        }\r\n        let reels=State.Game.SceneList[N].Reels\r\n        for(let i = 1;i<=keys(reels).length;i++){\r\n            State={\r\n                ...State,\r\n                Game:{\r\n                    ...State.Game,\r\n                    SceneList:{\r\n                        ...State.Game.SceneList,\r\n                            [N]:{\r\n                                ...State.Game.SceneList[N],\r\n                                NumberIfFreespin:{\r\n                                    ...State.Game.SceneList[N].NumberIfFreespin,\r\n                                    [i]:0\r\n                                },\r\n                            }  \r\n                    }\r\n                }\r\n            }\r\n        }\r\n        let Action={\r\n            \r\n                paylot:\"\"+N+\"\"\r\n            \r\n        }\r\n        \r\n        \r\n        State={\r\n            ...WorkWithReels(State, Action)\r\n        }\r\n        \r\n        State={\r\n            ...State,\r\n            Game:{\r\n                ...State.Game,\r\n                SceneList:{\r\n                    ...State.Game.SceneList,\r\n                    [vID]:{\r\n                        ...State.Game.SceneList[vID],\r\n                        FreespinGame:N,\r\n                    }\r\n                } \r\n            }\r\n        }\r\n    return{\r\n        ...State\r\n    }\r\n}\r\nexport {AddFreespinGame}","import {keys} from \"lodash\"\r\nimport {omit} from 'lodash'\r\n\r\nimport initialState from './initialState';\r\nimport CreateScene from './components/CreateScene'\r\nimport {InputFreesG, InputNumberIfFreespin, InputFid, InputFN, InputSN, InputGT, InputNOR, InputSymN, InputSymID, InputSymPayT, InputSymSub, InputSymSpec, InputSymReel} from './components/Inputs'\r\nimport {DeleteScene} from './components/Deletes'\r\nimport {Select, SelectMC} from './components/Select' \r\nimport {StartReset} from './components/StartReset'\r\nimport {AddSymbol} from './components/AddSymbol'\r\nimport {DeleteSymbol} from './components/DeleteSymbol'\r\nimport {WorkWithReels} from './components/WorkWithReels'\r\nimport {AddFreespinGame} from './components/AddFreespinGame'\r\n\r\n function DefaultOpration(state = initialState, action){\r\n    switch(action.type) {\r\n        \r\n        \r\n        case \"ADD_NEW_SCENE\": {\r\n            return CreateScene(state, action)\r\n        }\r\n        case \"ADD_SYMBOL\": {\r\n            return AddSymbol(state, action)\r\n        }\r\n        case \"DELETE_SCENE\":{\r\n         return DeleteScene(state, action)\r\n        }\r\n        case \"DELETE_SYMBOL\":{\r\n            return DeleteSymbol(state, action)\r\n           }\r\n        case \"SELECT\":{\r\n            return Select(state, action)\r\n        }\r\n        case \"SELECT_MENU_CONFIG\":{\r\n            return SelectMC(state, action)\r\n        }\r\n        case \"START_RESET\":{\r\n            return StartReset(state, action)\r\n        }\r\n        case \"INPUT_FID\":{\r\n            return InputFid(state, action)\r\n        }\r\n        case \"INPUT_FNAME\":{\r\n           return InputFN(state, action)\r\n        }\r\n        case \"INPUT_SCENE_NAME\": {\r\n            return InputSN(state, action)\r\n        }\r\n        case \"INPUT_NUM_REELS\": {\r\n            return InputNOR(state, action)\r\n        }\r\n        case \"INPUT_GAME_TYPE\": {\r\n            return InputGT(state, action)\r\n        }\r\n        case \"INPUT_SYMBOL_NAME\":{\r\n            return InputSymN(state, action)\r\n        }\r\n        case \"INPUT_SYMBOL_ID\":{\r\n            return InputSymID(state, action)\r\n        }\r\n\r\n        case \"INPUT_SYMBOL_PAYTABLE\":{\r\n            return InputSymPayT(state, action)\r\n        }\r\n        case \"INPUT_SYMBOL_SUBSTITURE\":{\r\n            return InputSymSub(state, action)\r\n        }\r\n        case \"INPUT_SYMBOL_SPECIAL\":{\r\n            return InputSymSpec(state, action)\r\n        }\r\n        case \"INPUT_SYMBOL_REELSTRIP\":{\r\n            return InputSymReel(state, action)\r\n        }\r\n        case \"INPUT_NUMBER_IF_FREESPIN\":{\r\n            return InputNumberIfFreespin(state, action)\r\n        } \r\n        case \"INPUT_FREESPIN_GAME\":{\r\n            return InputFreesG(state, action)\r\n        }\r\n        case \"WORK_WITH_REELS\":{\r\n            return WorkWithReels(state, action)\r\n        }\r\n        case \"ADD_FREESPIN_GAME\":{\r\n            return AddFreespinGame(state, action)\r\n        }\r\n        default: return state;\r\n    }\r\n} \r\nexport default DefaultOpration;","\r\n\r\nimport DefaultOperation from './DefaultOperation'\r\n\r\nimport { combineReducers } from 'redux';\r\n  \r\nexport default combineReducers({\r\n    \r\n    DefaultOperation,\r\n    \r\n    \r\n    \r\n\r\n  })\r\n  ","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux'\nimport App from './App/App';\nimport reportWebVitals from './reportWebVitals';\n\nimport configureStore  from './Store/CreateStore';\n\n\n  const store = configureStore();\n \n  //Note that subscribe() returns a function for unregistering the listener\n   \n\n\n\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n\nreportWebVitals();\n","import {createStore} from 'redux';  \r\nimport MainReducer from './reducers/MainReducer';  \r\n \r\n/*Create a function called configureStore */\r\n \r\nexport default function configureStore() {  \r\n  return createStore(MainReducer);\r\n}"],"sourceRoot":""}