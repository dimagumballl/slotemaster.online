{"version":3,"sources":["Store/action/MainAction.js","componentsJS/Header/Header.js","componentsJS/SlotsScenes/ScrenScene/Bookmark.js","componentsJS/SlotsScenes/ScrenScene/DetailСofiguration/Symbols/Symbols.js","componentsJS/SlotsScenes/ScrenScene/DetailСofiguration/Paytable/Paytable.js","componentsJS/SlotsScenes/ScrenScene/DetailСofiguration/Substitutes/Substitutes.js","componentsJS/SlotsScenes/ScrenScene/DetailСofiguration/Secial/Secial.js","componentsJS/SlotsScenes/ScrenScene/DetailСofiguration/Reelstrip/AllInfo/AllInfo.js","componentsJS/SlotsScenes/ScrenScene/DetailСofiguration/Reelstrip/Reelstrip.js","componentsJS/SlotsScenes/ScrenScene/DetailСofiguration/NumberIfFreespin/NumberIfFreespin.js","componentsJS/SlotsScenes/ScrenScene/DetailСofiguration/DetailСofiguration.js","componentsJS/SlotsScenes/ScrenScene/ScrenScene.js","componentsJS/SlotsScenes/SlotsScenes.js","App/App.js","reportWebVitals.js","Store/reducers/initialState.js","Store/reducers/components/CreateScene.js","Store/reducers/components/Inputs.js","Store/reducers/components/Deletes.js","Store/reducers/components/Select.js","Store/reducers/components/StartReset.js","Store/reducers/components/AddSymbol.js","Store/reducers/components/DeleteSymbol.js","Store/reducers/components/WorkWithReels.js","Store/reducers/components/AddFreespinGame.js","Store/reducers/components/ImportJSON.js","Store/reducers/components/ControlInterface.js","Store/reducers/DefaultOperation.js","Store/reducers/MainReducer.js","index.js","Store/CreateStore.js"],"names":["CreateAction","Type","value","type","paylot","Header","Valid","DefaultOperation","props","state","NameS","FirstInputName","IdS","FirstInputId","Name","Validation","Id","test","PressFirstBut","VoidT","void","download","F","objectData","filename","contentType","window","navigator","msSaveOrOpenBlob","blob","Blob","decodeURIComponent","encodeURI","JSON","stringify","a","document","createElement","href","encodeURIComponent","target","body","appendChild","click","removeChild","e","preventDefault","file","files","fr","FileReader","addEventListener","ImportJSON","parse","result","readAsText","this","className","style","width","height","marginLeft","background","onChange","undefined","Game","InputFid","InputFname","onClick","FirstBut","justifyContent","htmlFor","id","visibility","IJ","Component","connect","dispatch","event","Bookmark","Select","backgroundColor","BookmarkList","backg","SceneList","SceneName","Symbols","margin","borderRight","marginTop","overflow","display","maxWidth","keys","length","map","key","name","InputSymN","vID","vKEY","p","targetV","Corect","InputSymID","DeleteSymbol","v1","v2","AddSymbol","console","log","Paytable","minWidth","border","Reelstrip","n","key1","InputSymPayT","vKEY1","textAlign","Substiture","Checkbox","checked","InputSymSub","color","Special","InputSymSpec","AllInfo","BasegameHitRate","Reels","symbols","Rate","RTP","InputSymReel","UpRTP","TotalRTP","BaseGameRTP","FreespinsRTP","SelectAI","ScernTypeOfConf","NumberIfFreespin","InputNumberIfFreespin","butStyle","SlectedB","SlectedD","DetailСofiguration","SelectMC","ScrenScene","NS","InputNS","GT","InputGT","NOR","num","parseInt","replace","isNaN","InputNOR","ReelSize","v3","NumberOfReels","ScrenList","InputLabel","labelId","GameType","MenuItem","InputFreesG","FreespinGame","AddFreespinGame","Delete","SlotsScenes","AddScene","App","v","State","NoneFilde","borderRadius","Void","TypeOfVoid","text","Yes","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","CreateScene","GameName","0","1","2","3","4","5","Substitutes","SlectedScernTypeOfConf","Log","Wild","Scatter","BonusGameRTP","HitRate","Combinations","Returns","BookmarkOn","reels","i","N","C","action","InputFN","InputSN","Nof","nValue","NIF","omit","DeleteScene","sceneList","bookmarkList","screnList","k","Number","s","s2","StartReset","Subst","Reel","masKey","isWild","isScatter","isSpecific","sarray","WorkWithReels","KeySc","MasKey","WorkType","RTP_base","FreeGame","scene","NumS","NumW","NumSc","wild","ScInReel","p_Sc","p_no_Sc","check","SubArray","o","Num","NumInreel","NumNoreel","NumZW","NumInreelZW","NumNoreelZW","IsWithWild","p_Sc_win","ArrNoKay","las","start","mul","c","check1","start2","temp","q","m","TheBigestValues","index","p_sym_win","l","add","tick","keyFS","Action","Windows","DefaultOpration","combineReducers","store","createStore","MainReducer","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.df7f93ec.chunk.js","sourcesContent":["export const CreateAction =(Type, value) => {\r\n    return {\r\n        type: Type,\r\n        paylot:value,\r\n        \r\n    }\r\n}\r\n \r\n","\r\nimport {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport './Header.css'\r\nimport {CreateAction} from '../../Store/action/MainAction';\r\n\r\nclass Header extends Component {\r\n  Valid=(value)=>{\r\n    let DefaultOperation = this.props.state.DefaultOperation\r\n    let NameS = this.props.state.DefaultOperation.FirstInputName\r\n    let IdS = this.props.state.DefaultOperation.FirstInputId\r\n    let Name = this.props.state.DefaultOperation.Validation.FirstInputName\r\n    let Id = this.props.state.DefaultOperation.Validation.FirstInputId\r\n    \r\n    if(!/^[A-Za-z0-9_.]+$/gi.test(NameS)){\r\n      Name=!Name\r\n    }\r\n    if(!/^[0-9]+$/gi.test(IdS)){\r\n      Id=!Id\r\n    }\r\n    if(Id&&Name){\r\n      if(value==\"Start\"){\r\n        this.props.PressFirstBut(DefaultOperation)\r\n      }\r\n      else if(value==\"Reset\"){\r\n        this.props.VoidT({void:\"Reset\", value:null})\r\n      }\r\n      else if(value==\"Export\"){\r\n        this.download(NameS, DefaultOperation)\r\n      }\r\n      else if(value==\"Import\"){\r\n        \r\n      }\r\n    }\r\n    else{\r\n      this.props.Valid({Id:Id,Name:Name})\r\n    }\r\n  }\r\n  download(F,objectData) {\r\n    let filename = F+\".json\";\r\n    let contentType = \"application/json;charset=utf-8;\";\r\n    if (window.navigator && window.navigator.msSaveOrOpenBlob) {\r\n      var blob = new Blob([decodeURIComponent(encodeURI(JSON.stringify(objectData)))], { type: contentType });\r\n      navigator.msSaveOrOpenBlob(blob, filename);\r\n    } else {\r\n      var a = document.createElement('a');\r\n      a.download = filename;\r\n      a.href = 'data:' + contentType + ',' + encodeURIComponent(JSON.stringify(objectData));\r\n      a.target = '_blank';\r\n      document.body.appendChild(a);\r\n      a.click();\r\n      document.body.removeChild(a);\r\n    }\r\n  }\r\n  IJ(e){\r\n    \r\n    e.preventDefault();\r\n    const file = new Blob([e.target.files[0]], {type:\"application/json\"});\r\n    let fr = new FileReader();\r\n    \r\n    \r\n    \r\n    fr.addEventListener(\"load\", e => {\r\n        \r\n        this.props.ImportJSON(JSON.parse(fr.result))\r\n      });\r\n    \r\n    fr.readAsText(file)\r\n  }\r\n  render(){\r\n    const{DefaultOperation}=this.props.state\r\n    return (\r\n      <div className=\"Header\">\r\n        <div className=\"container_row\">\r\n            <input className=\"con_input\" value={DefaultOperation.FirstInputId} style={DefaultOperation.Validation.FirstInputId?{width:\"50px\",height:\"30px\",marginLeft:\"10px\", background:\"white\"}:{width:\"50px\",height:\"30px\",marginLeft:\"10px\", background:\"red\"}} onChange={DefaultOperation.Game==undefined?this.props.InputFid:()=>{}}/>\r\n                \r\n            \r\n            <input className=\"con_input\" value={DefaultOperation.FirstInputName} style={DefaultOperation.Validation.FirstInputName?{width:\"200px\",height:\"30px\",marginLeft:\"10px\", background:\"white\"}:{width:\"200px\",height:\"30px\",marginLeft:\"10px\", background:\"red\"}}  onChange={ DefaultOperation.Game==undefined?this.props.InputFname:()=>{}}/>\r\n                \r\n            \r\n            <div className=\"con_but\" style={{width:\"90px\",height:\"30px\",marginLeft:\"10px\"}} onClick={()=>this.Valid(DefaultOperation.FirstBut)}>\r\n                {\r\n                    DefaultOperation.FirstBut \r\n                }\r\n                \r\n            </div>\r\n        </div>\r\n        <div className=\"container_row\" style={{justifyContent:'flex-end'}}>\r\n             <div className=\"con_but\" style={{width:\"90px\",height:\"30px\"}} onClick={()=>this.Valid(\"Export\")}>\r\n                export\r\n            </div>\r\n              <label htmlFor=\"filePicker\" className=\"con_but\" style={{width:\"90px\",height:\"30px\"}}>\r\n                Import\r\n              </label>\r\n              <input type=\"file\" id=\"filePicker\" style={{visibility:\"hidden\",width:\"10px\"}} onChange={(e)=>this.IJ(e)}/>\r\n                \r\n            \r\n\r\n               \r\n            \r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n  \r\n}\r\n\r\nexport default connect(\r\n  state=>({state:state}),\r\n  dispatch => ({\r\n    PressFirstBut: (DefaultOperation, value) => {\r\n      if(DefaultOperation.Game==undefined)\r\n        dispatch(CreateAction(\"ADD_NEW_SCENE\", value))\r\n        dispatch(CreateAction(\"START_RESET\"))\r\n    },\r\n    Valid: (value)=>{\r\n      dispatch(CreateAction(\"VALIDATION\", value))\r\n    },\r\n    InputFid: (event) => {\r\n        dispatch(CreateAction(\"INPUT_FID\", event.target.value))\r\n    },\r\n    InputFname: (event) => {\r\n        dispatch(CreateAction(\"INPUT_FNAME\", event.target.value))\r\n    },\r\n    ImportJSON:(state)=>{\r\n      dispatch(CreateAction(\"IMPORT_JSON\",state))\r\n    },\r\n    VoidT:(state)=>{\r\n      dispatch(CreateAction(\"VOID_TYPE\",state))\r\n    }\r\n  })\r\n)(Header);","\r\nimport {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport {CreateAction} from '../../../Store/action/MainAction';\r\n\r\n\r\nclass Bookmark extends Component {\r\n  \r\n  render(){\r\n    const{DefaultOperation}=this.props.state\r\n    const{Id}=this.props\r\n    return (\r\n      <div className=\"Bookmark\" onClick={()=>this.props.Select(this.props.Id)} style={{backgroundColor:DefaultOperation.BookmarkList[Id].backg}}>\r\n         {DefaultOperation.Game.SceneList[Id].SceneName}\r\n      </div>\r\n    );\r\n  }\r\n  \r\n}\r\n\r\nexport default connect(\r\n  state=>({state:state}),\r\n  dispatch => ({Select: (value) => {\r\n    \r\n      dispatch(CreateAction(\"SELECT\", value))\r\n      \r\n  },\r\n})\r\n)(Bookmark);\r\n","import {keys} from \"lodash\"\r\nimport {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport {CreateAction} from '../../../../../Store/action/MainAction';\r\n\r\n\r\nclass Symbols extends Component {\r\n    \r\n    \r\n  render(){\r\n    const{DefaultOperation}=this.props.state\r\n    const{Id}=this.props\r\n    return (\r\n      <div className=\"container_column\">\r\n          <div className=\"container_row\" style={{margin:\"20px\"}}>\r\n            <div className=\"container_column\" style={{width:\"100px\", borderRight:\"1px solid black\"}}>\r\n                \r\n                    <div className=\"container_row\" style={{height:\"30px\",width:\"150px\", borderRight:\"1px solid black\"}}>\r\n                        Symbols Name\r\n                    </div>\r\n                    \r\n                \r\n                \r\n                    <div className=\"container_row\" style={{height:\"30px\",width:\"150px\", borderRight:\"1px solid black\",marginTop:\"10px\"}}>\r\n                        ID\r\n                    </div>\r\n                \r\n            </div>\r\n            \r\n            <div  style={{overflow:\"auto\",display:\"flex\", maxWidth:\"100%\"}}>\r\n            {\r\n                        keys(DefaultOperation.Game.SceneList[Id].Symbols).length!=0?\r\n                            keys(DefaultOperation.Game.SceneList[Id].Symbols)\r\n                            .map((key) =>\r\n                            <div className=\"container_column\" key={key} style={{height:\"100%\",width:\"120px\"}}>\r\n                                <div className=\"container_row\">\r\n                                    <input name=\"SymbolName\" onChange={(e)=>this.props.InputSymN( {vID:Id, vKEY:key, p:this.props, targetV:e})} value={DefaultOperation.Game.SceneList[Id].Symbols[key].name} style={DefaultOperation.Game.SceneList[Id].Symbols[key].Corect.Name?{width:\"100%\", background:\"white\"}:{width:\"100%\", background:\"red\"}}/>\r\n                                    \r\n                                </div>\r\n                                <div className=\"container_row\">\r\n                                    <input onChange={(e)=>this.props.InputSymID({vID:Id, vKEY:key, p:this.props, targetV:e})} value={DefaultOperation.Game.SceneList[Id].Symbols[key].id} style={DefaultOperation.Game.SceneList[Id].Symbols[key].Corect.Id?{width:\"100%\", background:\"white\"}:{width:\"100%\", background:\"red\"}}/>\r\n                                    \r\n                                </div>\r\n                                <div className=\"con_but\" onClick={()=>this.props.DeleteSymbol({vID:Id, v1:Id,v2:key})} style={{height:\"100%\"}}>\r\n                                    remove\r\n                                </div>\r\n                                \r\n                            </div>\r\n                                ):<div style={{display:\"none\"}}></div>\r\n                                \r\n                        \r\n                    }\r\n            </div>\r\n            <div className=\"con_but\" style={{width:\"50px\"}} onClick={()=>this.props.AddSymbol(Id)}>\r\n                +\r\n            </div>\r\n          </div>\r\n          <div className=\"container_row\">\r\n              <div style={{width:\"50px\"}}  >\r\n\r\n              </div>\r\n          </div>\r\n      </div>\r\n    );\r\n  }\r\n  \r\n}\r\n\r\nexport default connect(\r\n  state=>({state:state}),\r\n  dispatch => ({\r\n      AddSymbol: (value) => {\r\n\r\n        \r\n    \r\n      dispatch(CreateAction(\"ADD_SYMBOL\", value))\r\n      dispatch(CreateAction(\"WORK_WITH_REELS\", value))\r\n      \r\n  },\r\n  DeleteSymbol: (value) => {\r\n    \r\n    dispatch(CreateAction(\"DELETE_SYMBOL\", value))\r\n    dispatch(CreateAction(\"WORK_WITH_REELS\", value))\r\n    \r\n    },\r\n    InputSymN: (value) => {\r\n       \r\n    \r\n        dispatch(CreateAction(\"INPUT_SYMBOL_NAME\", value))\r\n        \r\n    },\r\n    InputSymID: (value) => {\r\n       \r\n        console.log(value)\r\n        dispatch(CreateAction(\"INPUT_SYMBOL_ID\", value))\r\n        \r\n    },\r\n})\r\n)(Symbols);\r\n","import {keys} from \"lodash\"\r\nimport {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport {CreateAction} from '../../../../../Store/action/MainAction';\r\n\r\n\r\nclass Paytable extends Component {\r\n  \r\n  render(){\r\n    const{DefaultOperation}=this.props.state\r\n    const{Id}=this.props\r\n    return (\r\n      <div className=\"container_column\" style={{overflow:\"auto\", maxWidth:\"100%\"}}>\r\n          <div className=\"container_row\" >\r\n            <div className=\"container_row\" style={{minWidth:\"100px\",border:\"1px solid black\"}}>\r\n                Symbol\r\n            </div>\r\n            {\r\n                \r\n                keys(DefaultOperation.Game.SceneList[Id].Symbols).length!=0?\r\n                    DefaultOperation.Game.SceneList[Id].Symbols[keys(DefaultOperation.Game.SceneList[Id].Symbols)[0]].Reelstrip!=0?\r\n                keys(DefaultOperation.Game.SceneList[Id].Symbols[keys(DefaultOperation.Game.SceneList[Id].Symbols)[0]].Reelstrip)\r\n                            .map((key, n=1)=>\r\n                            <div key={key}  className=\"container_row\" style={{minWidth:\"60px\", border:\"1px solid black\", justifyContent:\"center\"}}>\r\n                                \r\n                                {n+1}\r\n                            </div>)\r\n                :<div style={{display:\"none\"}}></div>:<div style={{display:\"none\"}}></div>\r\n            }\r\n          </div>\r\n          {\r\n                \r\n                keys(DefaultOperation.Game.SceneList[Id].Symbols).length!=0?\r\n                keys(DefaultOperation.Game.SceneList[Id].Symbols)\r\n                            .map((key)=>\r\n                            <div className=\"container_column\"  key={key}>\r\n                                <div className=\"container_row\">\r\n                                <div  className=\"container_row\" style={{minWidth:\"100px\", border:\"1px solid black\", justifyContent:\"center\", overflow:\"hidden\"}}>\r\n                                    {DefaultOperation.Game.SceneList[Id].Symbols[key].name}\r\n                                </div>\r\n                                {keys(DefaultOperation.Game.SceneList[Id].Symbols[key].Paytable).map((key1)=>\r\n                                    <input onChange={(e)=>this.props.InputSymPayT({vID:Id, vKEY:key, vKEY1:key1, targetV:e})} value={DefaultOperation.Game.SceneList[Id].Symbols[key].Paytable[key1]} key={key1}  className=\"container_row\" style={{minWidth:\"60px\", border:\"1px solid black\", textAlign:\"center\"}}/>\r\n                                    \r\n                                )}\r\n                                </div>\r\n                                \r\n                                \r\n                            </div>\r\n                            )\r\n                :<div></div>\r\n            }\r\n    </div>   \r\n    );\r\n  }\r\n  \r\n}\r\n\r\nexport default connect(\r\n  state=>({state:state}),\r\n  dispatch => ({\r\n    InputSymPayT: (value) => {\r\n       \r\n    \r\n      dispatch(CreateAction(\"INPUT_SYMBOL_PAYTABLE\", value))\r\n      dispatch(CreateAction(\"WORK_WITH_REELS\", value))\r\n    },\r\n  })\r\n)(Paytable);\r\n","import {keys} from \"lodash\"\r\nimport {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport {CreateAction} from '../../../../../Store/action/MainAction';\r\n\r\n\r\nclass Substiture extends Component {\r\n  \r\n  render(){\r\n    const{DefaultOperation}=this.props.state\r\n    const{Id}=this.props\r\n    return (\r\n      <div className=\"container_column\" style={{overflow:\"auto\", maxWidth:\"100%\"}}>\r\n          <div className=\"container_row\" >\r\n            <div className=\"container_row\" style={{minWidth:\"100px\",border:\"1px solid black\"}}>\r\n                Substitute\r\n            </div>\r\n            {\r\n                \r\n                keys(DefaultOperation.Game.SceneList[Id].Symbols).length!=0?\r\n                keys(DefaultOperation.Game.SceneList[Id].Symbols)\r\n                            .map((key)=>\r\n                            <div key={key}  className=\"container_row\" style={{minWidth:\"100px\", border:\"1px solid black\", justifyContent:\"center\"}}>\r\n                                {DefaultOperation.Game.SceneList[Id].Symbols[key].name}\r\n                            </div>)\r\n                :<div></div>\r\n            }\r\n          </div>\r\n          {\r\n                \r\n                keys(DefaultOperation.Game.SceneList[Id].Symbols).length!=0?\r\n                keys(DefaultOperation.Game.SceneList[Id].Symbols)\r\n                            .map((key)=>\r\n                            <div className=\"container_column\"  key={key}>\r\n                                <div className=\"container_row\">\r\n                                <div  className=\"container_row\" style={{minWidth:\"100px\", border:\"1px solid black\", justifyContent:\"center\", overflow:\"hidden\"}}>\r\n                                    {DefaultOperation.Game.SceneList[Id].Symbols[key].name}\r\n                                </div>\r\n                                {keys(DefaultOperation.Game.SceneList[Id].Symbols[key].Substiture).map((key1)=>\r\n                                    <div key={key1}  className=\"container_row\" style={{minWidth:\"100px\", border:\"1px solid black\", justifyContent:\"center\"}}>\r\n                                      <Checkbox\r\n                                        checked={DefaultOperation.Game.SceneList[Id].Symbols[key].Substiture[key1].value}\r\n                                        onChange={()=>this.props.InputSymSub({vID:Id, vKEY:key, vKEY1:key1})}\r\n                                        \r\n                                        color=\"primary\"\r\n                                      />\r\n                                      \r\n                                    </div>\r\n                                )}\r\n                                </div>\r\n                                \r\n                                \r\n                            </div>\r\n                            )\r\n                :<div></div>\r\n            }\r\n    </div>   \r\n    );\r\n  }\r\n  \r\n}\r\n\r\nexport default connect(\r\n  state=>({state:state}),\r\n  dispatch => ({\r\n    InputSymSub: (value) => {\r\n       \r\n    \r\n      dispatch(CreateAction(\"INPUT_SYMBOL_SUBSTITURE\", value))\r\n      dispatch(CreateAction(\"WORK_WITH_REELS\", value))\r\n    },\r\n  })\r\n)(Substiture);\r\n","import {keys} from \"lodash\"\r\nimport {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\n\r\nimport {CreateAction} from '../../../../../Store/action/MainAction';\r\n\r\n\r\nclass Special extends Component {\r\n  \r\n  render(){\r\n    const{DefaultOperation}=this.props.state\r\n    const{Id}=this.props\r\n    return (\r\n      <div className=\"container_column\" style={{overflow:\"auto\", maxWidth:\"100%\"}}>\r\n          <div className=\"container_row\" >\r\n            <div className=\"container_row\" style={{minWidth:\"100px\",border:\"1px solid black\"}}>\r\n                Symbols\r\n            </div>\r\n            \r\n                \r\n                \r\n                            <div  className=\"container_row\" style={{minWidth:\"100px\", border:\"1px solid black\", justifyContent:\"center\"}}>\r\n                                isWild\r\n                            </div>\r\n                            <div  className=\"container_row\" style={{minWidth:\"100px\", border:\"1px solid black\", justifyContent:\"center\"}}>\r\n                                isScatter\r\n                            </div>\r\n                            <div  className=\"container_row\" style={{minWidth:\"100px\", border:\"1px solid black\", justifyContent:\"center\"}}>\r\n                                isSpecific\r\n                            </div>\r\n                \r\n            \r\n          </div>\r\n          {\r\n                \r\n                keys(DefaultOperation.Game.SceneList[Id].Symbols).length!=0?\r\n                keys(DefaultOperation.Game.SceneList[Id].Symbols)\r\n                            .map((key)=>\r\n                            <div className=\"container_column\"  key={key}>\r\n                                <div className=\"container_row\">\r\n                                <div  className=\"container_row\" style={{minWidth:\"100px\", border:\"1px solid black\", justifyContent:\"center\", overflow:\"hidden\"}}>\r\n                                    {DefaultOperation.Game.SceneList[Id].Symbols[key].name}\r\n                                </div>\r\n                                {keys(DefaultOperation.Game.SceneList[Id].Symbols[key].Special).map((key1)=>\r\n                                    <div key={key1}  className=\"container_row\" style={{minWidth:\"100px\", border:\"1px solid black\", justifyContent:\"center\"}}>\r\n                                        <Checkbox\r\n                                        checked={DefaultOperation.Game.SceneList[Id].Symbols[key].Special[key1]}\r\n                                        onChange={()=>this.props.InputSymSpec({vID:Id, vKEY:key, vKEY1:key1})}\r\n                                        color=\"primary\"\r\n                                      />\r\n                                        \r\n                                    </div>\r\n                                )}\r\n                                </div>\r\n                                \r\n                                \r\n                            </div>\r\n                            )\r\n                :<div></div>\r\n            }\r\n    </div>   \r\n    );\r\n  }\r\n  \r\n}\r\n\r\nexport default connect(\r\n  state=>({state:state}),\r\n  dispatch => ({\r\n    InputSymSpec: (value) => {\r\n       \r\n    \r\n        dispatch(CreateAction(\"INPUT_SYMBOL_SPECIAL\", value))\r\n        dispatch(CreateAction(\"WORK_WITH_REELS\", value))\r\n      },\r\n  })\r\n)(Special);\r\n","import {keys} from \"lodash\"\r\nimport {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\n\r\n\r\n\r\nclass AllInfo extends Component {\r\n  \r\n  render(){\r\n    const{DefaultOperation}=this.props.state\r\n    const{Id}=this.props\r\n    return (\r\n      <div className=\"container_column\" style={{marginTop:\"40px\"}}>\r\n        <div className=\"container_row\" style={{justifyContent:\"center\"}}>\r\n            <h2>BasegameHitRate: {DefaultOperation.Game.SceneList[Id].BasegameHitRate}</h2>\r\n        </div>\r\n        <div className=\"container_column\" style={{overflow:\"auto\", maxWidth:\"100%\"}}>\r\n          <div className=\"container_row\" >\r\n            <div className=\"container_row\" style={{minWidth:\"100px\",border:\"1px solid black\"}}>\r\n                Symbol\r\n            </div>\r\n            {\r\n                \r\n                \r\n                keys(DefaultOperation.Game.SceneList[Id].Reels).length!=0?\r\n                keys(DefaultOperation.Game.SceneList[Id].Reels)\r\n                            .map((key)=>\r\n                            <div key={key}  className=\"container_row\" style={{minWidth:\"60px\", border:\"1px solid black\", justifyContent:\"center\"}}>\r\n                                \r\n                                {(key)}\r\n                            </div>)\r\n                :<div style={{display:\"none\"}}></div>\r\n            }\r\n          </div>\r\n          {\r\n                keys(DefaultOperation.Game.SceneList[Id].Symbols).length!=0?\r\n                keys(DefaultOperation.Game.SceneList[Id].Reels).length!=0?\r\n                keys(DefaultOperation.Game.SceneList[Id].Reels[1].symbols)\r\n                            .map((key)=>\r\n                            <div className=\"container_column\"  key={key}>\r\n                                <div className=\"container_row\">\r\n                                <div key={key} className=\"container_row\" style={{minWidth:\"100px\", border:\"1px solid black\", justifyContent:\"center\", overflow:\"hidden\"}}>\r\n                                    {\r\n                                        \r\n                                    DefaultOperation.Game.SceneList[Id].Symbols[key].name}\r\n                                </div>\r\n                                {\r\n                                    keys(DefaultOperation.Game.SceneList[Id].Reels[1].symbols[key].Rate).map((key1)=>\r\n                                        <div key={key1} className=\"container_row\" style={{minWidth:\"60px\", border:\"1px solid black\", justifyContent:\"center\"}}>\r\n                                            {DefaultOperation.Game.SceneList[Id].Reels[1].symbols[key].Rate[key1]}\r\n                                        </div>\r\n                                    )\r\n                                }\r\n                                </div>\r\n                                \r\n                                \r\n                            </div>\r\n                            )\r\n                :<div style={{display:\"none\"}}></div>:<div style={{display:\"none\"}}></div>\r\n            }\r\n        </div>\r\n        \r\n        \r\n        <div className=\"container_row\" style={{justifyContent:\"center\", marginTop:\"40px\"}}>\r\n            <h2>Returns</h2>\r\n        </div>\r\n        <div className=\"container_column\" style={{overflow:\"auto\", maxWidth:\"100%\"}}>\r\n          <div className=\"container_row\" >\r\n            <div className=\"container_row\" style={{minWidth:\"100px\",border:\"1px solid black\"}}>\r\n                Symbol\r\n            </div>\r\n            {\r\n                \r\n                \r\n                keys(DefaultOperation.Game.SceneList[Id].Reels).length!=0?\r\n                keys(DefaultOperation.Game.SceneList[Id].Reels)\r\n                            .map((key)=>\r\n                            <div key={key}  className=\"container_row\" style={{minWidth:\"60px\", border:\"1px solid black\", justifyContent:\"center\"}}>\r\n                                \r\n                                {(key)}\r\n                            </div>)\r\n                :<div style={{display:\"none\"}}></div>\r\n            }\r\n          </div>\r\n          {\r\n                keys(DefaultOperation.Game.SceneList[Id].Symbols).length!=0?\r\n                keys(DefaultOperation.Game.SceneList[Id].Reels).length!=0?\r\n                keys(DefaultOperation.Game.SceneList[Id].Reels[1].symbols)\r\n                            .map((key)=>\r\n                            <div className=\"container_column\"  key={key}>\r\n                                <div className=\"container_row\">\r\n                                <div key={key} className=\"container_row\" style={{minWidth:\"100px\", border:\"1px solid black\", justifyContent:\"center\", overflow:\"hidden\"}}>\r\n                                    {\r\n                                        \r\n                                    DefaultOperation.Game.SceneList[Id].Symbols[key].name}\r\n                                </div>\r\n                                {\r\n                                    keys(DefaultOperation.Game.SceneList[Id].Reels[1].symbols[key].Rate).map((key1)=>\r\n                                        <div key={key1} className=\"container_row\" style={{minWidth:\"60px\", border:\"1px solid black\", justifyContent:\"center\"}}>\r\n                                            {DefaultOperation.Game.SceneList[Id].Reels[1].symbols[key].RTP[key1]}\r\n                                        </div>\r\n                                    )\r\n                                }\r\n                                </div>\r\n                                \r\n                                \r\n                            </div>\r\n                            )\r\n                :<div style={{display:\"none\"}}></div>:<div style={{display:\"none\"}}></div>\r\n            }\r\n        </div>\r\n      </div>   \r\n    );\r\n  }\r\n  \r\n}\r\n\r\nexport default connect(\r\n  state=>({state:state}),\r\n  dispatch => ({\r\n    \r\n  })\r\n)(AllInfo);\r\n","import {keys} from \"lodash\"\r\nimport {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport {CreateAction} from '../../../../../Store/action/MainAction';\r\nimport AllInfo from './AllInfo/AllInfo'\r\n\r\nclass Paytable extends Component {\r\n  \r\n  render(){\r\n    const{DefaultOperation}=this.props.state\r\n    const{Id}=this.props\r\n    return (\r\n      <div className=\"container_column\">\r\n        <div className=\"container_column\" style={{overflow:\"auto\", maxWidth:\"100%\"}}>\r\n          <div className=\"container_row\" >\r\n            <div className=\"container_row\" style={{minWidth:\"100px\",border:\"1px solid black\"}}>\r\n                Symbol\r\n            </div>\r\n            {\r\n                \r\n                keys(DefaultOperation.Game.SceneList[Id].Symbols).length!=0?\r\n                    DefaultOperation.Game.SceneList[Id].Symbols[keys(DefaultOperation.Game.SceneList[Id].Symbols)[0]].Reelstrip!=0?\r\n                keys(DefaultOperation.Game.SceneList[Id].Symbols[keys(DefaultOperation.Game.SceneList[Id].Symbols)[0]].Reelstrip)\r\n                            .map((key, n=1)=>\r\n                            <div key={key}  className=\"container_row\" style={{minWidth:\"60px\", border:\"1px solid black\", justifyContent:\"center\"}}>\r\n                                \r\n                                {\"Reel \"+(n+1)}\r\n                            </div>)\r\n                :<div style={{display:\"none\"}}></div>:<div style={{display:\"none\"}}></div>\r\n            }\r\n          </div>\r\n          {\r\n                \r\n                keys(DefaultOperation.Game.SceneList[Id].Symbols).length!=0?\r\n                keys(DefaultOperation.Game.SceneList[Id].Symbols)\r\n                            .map((key)=>\r\n                            <div className=\"container_column\"  key={key}>\r\n                                <div className=\"container_row\">\r\n                                <div  className=\"container_row\" style={{minWidth:\"100px\", border:\"1px solid black\", justifyContent:\"center\", overflow:\"hidden\"}}>\r\n                                    {DefaultOperation.Game.SceneList[Id].Symbols[key].name}\r\n                                </div>\r\n                                {\r\n                                    keys(DefaultOperation.Game.SceneList[Id].Symbols[key].Reelstrip).map((key1)=>\r\n                                        <input onChange={(e)=>this.props.InputSymReel({vID:Id, vKEY:key, vKEY1:key1, targetV:e})} value={DefaultOperation.Game.SceneList[Id].Symbols[key].Reelstrip[key1]} key={key1}  className=\"container_row\" style={{minWidth:\"60px\", border:\"1px solid black\", textAlign:\"center\"}}/>\r\n                                    \r\n                                    )\r\n                                }\r\n                                </div>\r\n                                \r\n                                \r\n                            </div>\r\n                            )\r\n                :<div style={{display:\"none\"}}></div>\r\n            }\r\n        </div>\r\n        <div className=\"con_but\" style={{width:\"90px\", marginTop:\"10px\"}}onClick={()=>this.props.UpRTP(Id)}>\r\n              Up RTP\r\n        </div>\r\n        <div className=\"container_row\">\r\n          TotalRTP:{DefaultOperation.Game.SceneList[Id].TotalRTP}\r\n        </div>\r\n        <div className=\"container_row\">\r\n          BaseGameRTP:{DefaultOperation.Game.SceneList[Id].BaseGameRTP}\r\n        </div>\r\n        <div className=\"container_row\">\r\n          FreespinsRTP:{DefaultOperation.Game.SceneList[Id].FreespinsRTP}\r\n        </div>\r\n        <div className=\"container_row\" style={{justifyContent:\"center\"}}>\r\n          <div className=\"con_but\" style={{width:\"50%\", height:\"50px\"}} onClick={()=>this.props.SelectAI(Id)}>\r\n            Show all\r\n          </div>\r\n          \r\n        </div>\r\n        <div className=\"container_row\" style={!DefaultOperation.Game.SceneList[Id].ScernTypeOfConf.AllInfo?{display:\"none\"}:{justifyContent:\"center\",display:\"flex\"}}>\r\n          \r\n          <AllInfo\r\n            Id={Id}\r\n          />\r\n        </div>\r\n      </div>   \r\n    );\r\n  }\r\n  \r\n}\r\n\r\nexport default connect(\r\n  state=>({state:state}),\r\n  dispatch => ({\r\n    InputSymReel: (value) => {\r\n       \r\n    \r\n      dispatch(CreateAction(\"INPUT_SYMBOL_REELSTRIP\", value))\r\n      dispatch(CreateAction(\"WORK_WITH_REELS\", value))\r\n    },\r\n    SelectAI: (value) => {\r\n       \r\n    \r\n      dispatch(CreateAction(\"SELECT_ALL_INFORMATION\", value))\r\n      \r\n    },\r\n    UpRTP: (value) => {\r\n       \r\n    \r\n      \r\n      dispatch(CreateAction(\"WORK_WITH_REELS\", value))\r\n    },\r\n  })\r\n)(Paytable);\r\n","import {keys} from \"lodash\"\r\nimport {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport {CreateAction} from '../../../../../Store/action/MainAction';\r\n\r\n\r\nclass NumberIfFreespin extends Component {\r\n  \r\n  render(){\r\n    const{DefaultOperation}=this.props.state\r\n    const{Id}=this.props\r\n    return (\r\n        <div className=\"container_column\" style={{overflow:\"auto\", maxWidth:\"100%\"}}>\r\n            <div className=\"container_row\">\r\n                \r\n                <div className=\"container_column\">\r\n                    <div className=\"container_row\" style={{minWidth:\"100px\",border:\"1px solid black\"}}>\r\n                        Num of Sc\r\n                    </div>\r\n                    \r\n                    <div className=\"container_row\" style={{minWidth:\"100px\",border:\"1px solid black\"}}>\r\n                        Num freespin\r\n                    </div>\r\n                </div>\r\n                {\r\n                    keys(DefaultOperation.Game.SceneList[Id].Reels).length!=0?\r\n                    keys(DefaultOperation.Game.SceneList[Id].NumberIfFreespin).map((key)=>\r\n                        <div className=\"container_column\" key={key} style={{minWidth:\"60px\", border:\"1px solid black\", justifyContent:\"center\"}}>\r\n                            <div className=\"container_row\" style={{justifyContent:\"center\"}}>\r\n                                {key}\r\n                            </div>\r\n                            <div className=\"container_row\" >\r\n                                \r\n                                <input onChange={(e)=>this.props.InputNumberIfFreespin({vID:Id, vKEY:key, targetV:e})} value={DefaultOperation.Game.SceneList[Id].NumberIfFreespin[key]} className=\"container_row\" style={{height:\"100%\", border:\"1px solid black\", textAlign:\"center\"}}/>\r\n                            </div>\r\n                        </div>\r\n                    ):<div style={{display:\"none\"}}></div>\r\n                }\r\n            </div>\r\n            \r\n        </div>   \r\n    );\r\n  }\r\n  \r\n}\r\n\r\nexport default connect(\r\n  state=>({state:state}),\r\n  dispatch => ({\r\n    InputNumberIfFreespin: (value) => {\r\n       \r\n    \r\n      dispatch(CreateAction(\"INPUT_NUMBER_IF_FREESPIN\", value))\r\n      dispatch(CreateAction(\"WORK_WITH_REELS\", value))\r\n    },\r\n  })\r\n)(NumberIfFreespin);\r\n","\r\nimport {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport {CreateAction} from '../../../../Store/action/MainAction';\r\nimport './DetailСofiguration.css'\r\nimport Symbols from './Symbols/Symbols'\r\nimport Paytable from './Paytable/Paytable'\r\nimport Substiture from './Substitutes/Substitutes'\r\nimport Special from './Secial/Secial'\r\nimport Reelstrip from './Reelstrip/Reelstrip'\r\nimport NumberIfFreespin from './NumberIfFreespin/NumberIfFreespin'\r\n\r\nlet butStyle={height:\"30px\", justifyContent:\"flex-start\" }\r\nlet SlectedB={background:\"green\",height:\"30px\", justifyContent:\"flex-start\" }\r\nlet SlectedD={display:\"flex\"}\r\nclass DetailСofiguration extends Component {\r\n\r\n  render(){\r\n    const{DefaultOperation}=this.props.state\r\n    const{Id}=this.props\r\n    return (\r\n        <div className=\"containe_column\" style={{marginTop:\"40px\",}}>\r\n            <div className=\"con_sub\" onClick={()=>this.props.SelectMC({v1:\"Symbols\",v2:Id})} style={DefaultOperation.Game.SceneList[Id].ScernTypeOfConf.Symbols?SlectedB:butStyle}>\r\n                Symbols\r\n            </div>\r\n            <div className=\"table_scrin\" style={DefaultOperation.Game.SceneList[Id].ScernTypeOfConf.Symbols?SlectedD:{display:\"none\"}}>\r\n                <Symbols\r\n                    Id={Id}\r\n                />\r\n            </div>\r\n            <div className=\"con_sub\" onClick={()=>this.props.SelectMC({v1:\"Paytable\",v2:Id})} style={DefaultOperation.Game.SceneList[Id].ScernTypeOfConf.Paytable?SlectedB:butStyle}>\r\n                Paytable\r\n            </div>\r\n            <div className=\"table_scrin\" style={DefaultOperation.Game.SceneList[Id].ScernTypeOfConf.Paytable?SlectedD:{display:\"none\"}}>\r\n                <Paytable\r\n                    Id={Id}\r\n                />\r\n            </div>\r\n            <div className=\"con_sub\" onClick={()=>this.props.SelectMC({v1:\"Substiture\",v2:Id})} style={DefaultOperation.Game.SceneList[Id].ScernTypeOfConf.Substiture?SlectedB:butStyle}>\r\n                Substitute\r\n            </div>\r\n            <div className=\"table_scrin\" style={DefaultOperation.Game.SceneList[Id].ScernTypeOfConf.Substiture?SlectedD:{display:\"none\"}}>\r\n                \r\n                <Substiture Id={Id}/>\r\n            </div>\r\n            <div className=\"con_sub\" onClick={()=>this.props.SelectMC({v1:\"Special\",v2:Id})} style={DefaultOperation.Game.SceneList[Id].ScernTypeOfConf.Special?SlectedB:butStyle}>\r\n                Special\r\n            </div>\r\n            <div className=\"table_scrin\" style={DefaultOperation.Game.SceneList[Id].ScernTypeOfConf.Special?SlectedD:{display:\"none\"}}>\r\n                <Special\r\n                     Id={Id}\r\n                />\r\n            </div>\r\n            <div className=\"con_sub\" onClick={()=>this.props.SelectMC({v1:\"NumberIfFreespin\",v2:Id})} style={DefaultOperation.Game.SceneList[Id].ScernTypeOfConf.NumberIfFreespin?SlectedB:butStyle}>\r\n                Number if freespin\r\n            </div>\r\n            <div className=\"table_scrin\" style={DefaultOperation.Game.SceneList[Id].ScernTypeOfConf.NumberIfFreespin?SlectedD:{display:\"none\"}}>\r\n                <NumberIfFreespin\r\n                    Id={Id}\r\n                />\r\n            </div>\r\n            <div className=\"con_sub\" onClick={()=>this.props.SelectMC({v1:\"Reelstrip\",v2:Id})} style={DefaultOperation.Game.SceneList[Id].ScernTypeOfConf.Reelstrip?SlectedB:butStyle}>\r\n                Reelstrip\r\n            </div>\r\n            <div className=\"table_scrin\" style={DefaultOperation.Game.SceneList[Id].ScernTypeOfConf.Reelstrip?SlectedD:{display:\"none\"}}>\r\n                <Reelstrip\r\n                    Id={Id}\r\n                />\r\n            </div>\r\n            \r\n        </div>\r\n    );\r\n  }\r\n  \r\n}\r\n\r\nexport default connect(\r\n  state=>({state:state}),\r\n  dispatch => ({SelectMC: (value) => {\r\n    \r\n      dispatch(CreateAction(\"SELECT_MENU_CONFIG\", value))\r\n      \r\n  },\r\n})\r\n)(DetailСofiguration);\r\n","import {keys} from \"lodash\"\r\nimport {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\nimport Select from '@material-ui/core/Select';\r\nimport InputLabel from '@material-ui/core/InputLabel'\r\nimport MenuItem from '@material-ui/core/MenuItem'\r\n\r\n\r\nimport {CreateAction} from '../../../Store/action/MainAction';\r\nimport './ScrenScene.css'\r\nimport DetailConfiguration from './DetailСofiguration/DetailСofiguration'\r\n\r\n\r\nclass ScrenScene extends Component {\r\n  NS=(event)=>{\r\n    this.props.InputNS({v1:event.target.value, v2:this.props.Id})\r\n  }\r\n  GT = (event) => {\r\n   \r\n    this.props.InputGT({v1:event.target.value, v2:this.props.Id} );\r\n  };\r\n  NOR=(event)=>{\r\n    let num\r\n    let a = NaN\r\n     if(event.target.value!=\"\"){\r\n      num = parseInt(event.target.value.replace(/\\D+/g,\"\"))\r\n      \r\n      if(isNaN(num)){\r\n        num = \"\"\r\n        \r\n      }\r\n      this.props.InputNOR({v1:num, v2:this.props.Id, ReelSize:true, v3:this.props.state.DefaultOperation.Game.SceneList[this.props.Id].NumberOfReels} );\r\n     }\r\n     \r\n    else {\r\n      num = \"\"\r\n      this.props.InputNOR({v1:num, v2:this.props.Id,ReelSize:true , v3:this.props.state.DefaultOperation.Game.SceneList[this.props.Id].NumberOfReels} );\r\n    }\r\n    \r\n  }\r\n  render(){\r\n    const{DefaultOperation}=this.props.state\r\n    const{Id}=this.props\r\n    return (\r\n      <div className=\"ScrenScene\" style={{display:DefaultOperation.ScrenList[Id].display}}>\r\n          <div className=\"container_column\">\r\n            <div   className=\"container_row\">\r\n\r\n            <div  className=\"container_column\">\r\n            \r\n            <InputLabel id=\"SceneName\">SceneName </InputLabel>\r\n            <input className=\"con_input\" value={DefaultOperation.Game.SceneList[Id].SceneName} onChange={this.NS} style={{height:\"30px\"}}/>\r\n          \r\n            <InputLabel id=\"GameType\">GameType</InputLabel>\r\n            <Select labelId=\"GameType\" id=\"select\" onChange={this.GT} value={DefaultOperation.Game.SceneList[Id].GameType}>\r\n              <MenuItem value=\"Slot\">Slot</MenuItem>\r\n              <MenuItem value=\"Bonus\">Bonus</MenuItem>\r\n            </Select>\r\n          \r\n          \r\n            <InputLabel id=\"NumberofReels\">Number of Reels </InputLabel>\r\n            <input className=\"con_input\" onChange={this.NOR} style={{height:\"30px\"}} value={DefaultOperation.Game.SceneList[Id].NumberOfReels}/>\r\n            <InputLabel id=\"FreespinGame\">Freespin Game </InputLabel>\r\n            <Select labelId=\"FreespinGame\" onChange={(e)=>this.props.InputFreesG({vID:Id, targetV:e})}  value={DefaultOperation.Game.SceneList[Id].FreespinGame!=undefined?DefaultOperation.Game.SceneList[Id].FreespinGame:\"u\"}>\r\n            <MenuItem value=\"u\"></MenuItem>\r\n              {\r\n                keys(DefaultOperation.Game.SceneList).length>1?\r\n                  keys(DefaultOperation.Game.SceneList).map((key)=>\r\n                    \r\n                    Id!=key?\r\n                    <MenuItem value={key} key={key}>{DefaultOperation.Game.SceneList[key].SceneName!=undefined?DefaultOperation.Game.SceneList[key].SceneName:\"u\"}</MenuItem>:\"\"\r\n                  \r\n                  )\r\n                :\"\"\r\n              }\r\n              <MenuItem value={Id}>Empty</MenuItem>\r\n              \r\n              \r\n            </Select>\r\n            <div className=\"con_but\" style={{height:\"30px\"}}  onClick={()=>this.props.AddFreespinGame(Id)} >\r\n              Create Freespin\r\n            </div>\r\n          </div>\r\n          <div className=\"container_row\" style={{justifyContent:\"flex-end\"}}>\r\n            <div className=\"con_but\" style={{width:\"90px\",height:\"25px\"}}onClick={()=>this.props.VoidT({void:\"Delete\", value:Id})}>\r\n              Delete\r\n            </div>\r\n          </div>\r\n\r\n            </div>\r\n            <DetailConfiguration\r\n              Id={Id}\r\n            />\r\n          </div>  \r\n      </div>\r\n    );\r\n  }\r\n  \r\n}\r\n\r\nexport default connect(\r\n  state=>({state:state}),\r\n  dispatch => ({\r\n    Delete: (value) => {\r\n      dispatch(CreateAction(\"DELETE_SCENE\", value))\r\n    },\r\n    InputNS: (value) => {\r\n        dispatch(CreateAction(\"INPUT_SCENE_NAME\", value))\r\n    },\r\n    InputGT: (value) => {\r\n        dispatch(CreateAction(\"INPUT_GAME_TYPE\", value))\r\n        dispatch(CreateAction(\"WORK_WITH_REELS\", value))\r\n    },\r\n    InputNOR: (value) => {\r\n      \r\n      dispatch(CreateAction(\"INPUT_NUM_REELS\", value))\r\n      \r\n      dispatch(CreateAction(\"WORK_WITH_REELS\", value))\r\n  },\r\n  InputFreesG: (value) => {\r\n      \r\n    dispatch(CreateAction(\"INPUT_FREESPIN_GAME\", value))\r\n    \r\n    dispatch(CreateAction(\"WORK_WITH_REELS\", value))\r\n  },\r\n  AddFreespinGame: (value) => {\r\n      \r\n    dispatch(CreateAction(\"ADD_FREESPIN_GAME\", value))\r\n    \r\n    dispatch(CreateAction(\"WORK_WITH_REELS\", value))\r\n  },\r\n  VoidT:(state)=>{\r\n    dispatch(CreateAction(\"VOID_TYPE\",state))\r\n  }\r\n  })\r\n)(ScrenScene);\r\n","import {keys} from \"lodash\"\r\nimport {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport {CreateAction} from '../../Store/action/MainAction';\r\nimport './SlotsScenes.css'\r\nimport Bookmark from './ScrenScene/Bookmark'\r\nimport ScrenScene from './ScrenScene/ScrenScene'\r\n\r\n\r\nclass SlotsScenes extends Component {\r\n   \r\n\r\n  render(){\r\n    const{DefaultOperation}=this.props.state\r\n    return (\r\n      <div className=\"SlotsScenes\">\r\n        <div className=\"container_row\" style={{height:\"50px\"}}>\r\n            <div  style={{display:\"flex\",maxWidth:\"100%\",overflow:\"auto\"}}>\r\n                \r\n                {\r\n                   DefaultOperation.Game!=undefined?\r\n                    keys(DefaultOperation.Game.SceneList)\r\n                    .map((key) =>\r\n                        <Bookmark key={key}\r\n                            Id={key}\r\n                        />\r\n                    ):<div style={{maxWidth:\"0\",display:\"none\"}}></div>\r\n                    \r\n                        \r\n                }\r\n            </div>\r\n            <div className=\"con_but\" style={{marginLeft:\"5px\",height:\"30px\", width:\"30px\", minWidth:\"30px\"}} onClick={this.props.AddScene}>\r\n                +\r\n            </div>\r\n        </div>\r\n        <div className=\"container_column\">\r\n        {\r\n                   DefaultOperation.Game!=undefined?\r\n                    keys(DefaultOperation.Game.SceneList)\r\n                    .map((key) =>\r\n                        <ScrenScene key={key}\r\n                            Id={key}\r\n                        />\r\n                    ):<div></div>\r\n                    \r\n                        \r\n                }\r\n             \r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n  \r\n}\r\n\r\nexport default connect(\r\n  state=>({state:state}),\r\n  dispatch => ({\r\n    AddScene: (state) => {\r\n        \r\n          dispatch(CreateAction(\"ADD_NEW_SCENE\"))\r\n          \r\n      },\r\n  })\r\n)(SlotsScenes);\r\n","import '../common/Style/main.css'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport {Component} from 'react'\nimport {connect} from 'react-redux'\n\nimport {CreateAction} from '../Store/action/MainAction';\nimport Header from '../componentsJS/Header/Header'\nimport SlotsScenes from '../componentsJS/SlotsScenes/SlotsScenes'\n\nclass App extends Component {\n  Yes(v){\n    if(v.void==\"Reset\"){\n      this.props.PressFirstBut(this.props.State.DefaultOperation)\n    }\n    if(v.void==\"Delete Scene\"){\n      this.props.Delete(v.value)\n    }\n  }\n  render(){\n    return (\n      <div className=\"App\">\n        <div className=\"None_Filde\" style={this.props.State.DefaultOperation.NoneFilde?{display:\"flex\"}:{display:\"none\"}}>\n          <div className=\"container_column\"  style={{width:\"40%\", border:\"1px solid black\", background:\"white\", borderRadius:\"5px\"}}>\n              <div className=\"container_row\" style={{justifyContent:\"center\",marginTop:\"20px\"}}>\n                  <h2>{this.props.State.DefaultOperation.Void.TypeOfVoid}</h2>\n              </div>\n              <div className=\"container_row\" style={{justifyContent:\"center\", marginTop:\"20px\"}}>\n              {this.props.State.DefaultOperation.Void.text}\n              </div>\n              <div className=\"container_row\" style={{ marginTop:\"20px\"}}>\n                <div className=\"con_but\" style={{width:\"100%\", height:\"40px\"}} onClick={()=>this.props.VoidT({void:\"No\", value:null})}>\n                    No\n                </div>\n                <div className=\"con_but\" style={{width:\"100%\", height:\"40px\"}} onClick={()=>this.Yes({void:this.props.State.DefaultOperation.Void.TypeOfVoid, value:this.props.State.DefaultOperation.Void.value})}>\n                    Yes\n                </div>\n              </div>\n          </div>\n        </div>\n         <Header/>\n         {\n                this.props.State.DefaultOperation.Game!=undefined?<SlotsScenes/>:<div></div>\n          }\n      </div>\n    );\n  }\n  \n}\n\nexport default connect(\n  state=>({State:state}),\n  dispatch => ({\n    PressFirstBut: (DefaultOperation, value) => {\n      if(DefaultOperation.Game==undefined)\n        dispatch(CreateAction(\"ADD_NEW_SCENE\", value))\n        dispatch(CreateAction(\"START_RESET\"))\n        dispatch(CreateAction(\"VOID_TYPE\",{void:\"No\", value:null}))\n    },\n    \n    Delete: (value) => {\n      dispatch(CreateAction(\"DELETE_SCENE\", value))\n      dispatch(CreateAction(\"VOID_TYPE\",{void:\"No\", value:null}))\n    },\n    VoidT:(state)=>{\n      dispatch(CreateAction(\"VOID_TYPE\",state))\n    }\n  })\n)(App);\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","const initialState = {\r\n    FirstBut:\"Start\",\r\n    FirstInputId:\"\",\r\n    FirstInputName:\"\",\r\n    Validation:{\r\n        FirstInputName:true,\r\n        FirstInputId:true\r\n    },\r\n    Void:{\r\n        TypeOfVoid:\"\",\r\n        value:\"\",\r\n        text:\"\"\r\n    },\r\n    NoneFilde:false\r\n}\r\n \r\nexport default initialState;","\r\nimport {keys} from \"lodash\"\r\nimport {omit} from 'lodash'\r\n\r\n\r\nfunction CreateScene(state){\r\n    if(state.FirstBut==\"Start\"){\r\n        let State={\r\n            ...state,\r\n            Game:{\r\n                GameName:state.FirstInputName,\r\n                Id:state.FirstInputId,\r\n                SceneList:{\r\n                    0:{\r\n                        id:\"0\",\r\n                        SceneName : \"SceneName_\"+0,\r\n                        GameType : \"Slot\",\r\n                        NumberOfReels:5,\r\n                        Reels : {\r\n                            1:{\r\n                                name:\"Reel1\"\r\n                            },\r\n                            2:{\r\n                                name:\"Reel2\"\r\n                            },\r\n                            3:{\r\n                                name:\"Reel3\"\r\n                            },\r\n                            4:{\r\n                                name:\"Reel4\"\r\n                            },\r\n                            5:{\r\n                                name:\"Reel5\"\r\n                            },\r\n                        },\r\n                        ScernTypeOfConf:{\r\n                            Symbols:false,\r\n                            Paytable:false,\r\n                            Substitutes:false,\r\n                            Special:false,\r\n                            Reelstrip:false,\r\n                            NumberIfFreespin:false,\r\n                            AllInfo:false\r\n                        },\r\n                        SlectedScernTypeOfConf:\"\",\r\n                        Symbols:{\r\n                            \r\n                        },\r\n                        Log:{\r\n\r\n                        },\r\n                        Wild:false,\r\n                        Scatter:false,\r\n                        FreespinGame:0,\r\n                        NumberIfFreespin:{},\r\n                        TotalRTP: \"0\",\r\n                        BaseGameRTP: \"0\",\r\n                        FreespinsRTP: \"0\",\r\n                        BonusGameRTP: \"0\",\r\n                        BasegameHitRate: \"0\",\r\n                        HitRate:{},\r\n                        Combinations:{},\r\n                        Returns:{}\r\n                    }\r\n                }\r\n            },\r\n            \r\n            \r\n            ScrenList:{\r\n                ...state.ScrenList,\r\n                    0:{\r\n                        Id:\"\"+0+\"\",\r\n                        display:\"flex\"\r\n                    },\r\n                },\r\n                BookmarkList:{\r\n                    ...state.BookmarkList,\r\n                        0:{\r\n                            Id:\"\"+0+\"\",\r\n                            backg:\"green\"\r\n                        },\r\n                    },\r\n                BookmarkOn:0\r\n            \r\n        }\r\n        let reels=State.Game.SceneList[0].Reels\r\n        for(let i = 1;i<=keys(reels).length;i++){\r\n            State={\r\n                ...State,\r\n                Game:{\r\n                    ...State.Game,\r\n                    SceneList:{\r\n                        ...State.Game.SceneList,\r\n                            [0]:{\r\n                                ...State.Game.SceneList[0],\r\n                                NumberIfFreespin:{\r\n                                    ...State.Game.SceneList[0].NumberIfFreespin,\r\n                                    [i]:0\r\n                                },\r\n                            }  \r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return{\r\n            ...State\r\n        }\r\n           \r\n    }\r\n    else{\r\n        \r\n        let N = 0\r\n        let C = false\r\n        while(!C){\r\n            \r\n            C=true;\r\n            for(let i = 0;i<keys(state.Game.SceneList).length;i++)\r\n            \r\n            {\r\n                if(N==keys(state.Game.SceneList)[i])\r\n                 C=false;\r\n            }\r\n            if(!C)\r\n                N++;\r\n            \r\n        }\r\n        let State={\r\n            ...state,\r\n            Game:{\r\n                ...state.Game,\r\n                SceneList:{\r\n                    ...state.Game.SceneList,\r\n                    [N]:{\r\n                        \r\n                        id:[N],\r\n                        SceneName : \"SceneName_\"+[N],\r\n                        GameType : \"Slot\",\r\n                        NumberOfReels:5,\r\n                        Reels : {\r\n                            1:{\r\n                                name:\"Reel1\"\r\n                            },\r\n                            2:{\r\n                                name:\"Reel2\"\r\n                            },\r\n                            3:{\r\n                                name:\"Reel3\"\r\n                            },\r\n                            4:{\r\n                                name:\"Reel4\"\r\n                            },\r\n                            5:{\r\n                                name:\"Reel5\"\r\n                            }\r\n                        },\r\n                        ScernTypeOfConf:{\r\n                            Symbols:false,\r\n                            Paytable:false,\r\n                            Substitutes:false,\r\n                            Special:false,\r\n                            Reelstrip:false,\r\n                            NumberIfFreespin:false,\r\n                            AllInfo:false\r\n                        },\r\n                        SlectedScernTypeOfConf:\"\",\r\n                        Symbols:{\r\n                            \r\n                        },\r\n                        Log:{\r\n                            \r\n                        },\r\n                        Wild:false,\r\n                        Scatter:false,\r\n                        FreespinGame:N,\r\n                        NumberIfFreespin:{},\r\n                        TotalRTP: \"0\",\r\n                        BaseGameRTP: \"0\",\r\n                        FreespinsRTP: \"0\",\r\n                        BonusGameRTP: \"0\",\r\n                        BasegameHitRate: \"0\",\r\n                        Combinations:{},\r\n                        Returns:{}\r\n                    }\r\n                }\r\n            },\r\n            ScrenList:{\r\n            ...state.ScrenList,\r\n                [N]:{\r\n                    Id:\"\"+N+\"\",\r\n                    display:\"none\"\r\n                },\r\n            },\r\n            BookmarkList:{\r\n                ...state.BookmarkList,\r\n                    [N]:{\r\n                        Id:\"\"+N+\"\",\r\n                        backg:\"white\"\r\n                    },\r\n            },\r\n        }\r\n        let reels=State.Game.SceneList[N].Reels\r\n        for(let i = 1;i<=keys(reels).length;i++){\r\n            State={\r\n                ...State,\r\n                Game:{\r\n                    ...State.Game,\r\n                    SceneList:{\r\n                        ...State.Game.SceneList,\r\n                            [N]:{\r\n                                ...State.Game.SceneList[N],\r\n                                NumberIfFreespin:{\r\n                                    ...State.Game.SceneList[N].NumberIfFreespin,\r\n                                    [i]:0\r\n                                },\r\n                            }  \r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return{\r\n            ...State\r\n        }\r\n    }\r\n    return state\r\n}\r\nexport default CreateScene","import {keys} from \"lodash\"\r\nimport {omit} from 'lodash'\r\n\r\nfunction InputFid(state, action){\r\n    let  num\r\n    if(action.paylot!=\"\"){\r\n             num = parseInt(action.paylot.replace(/\\D+/g,\"\"))\r\n             if(isNaN(num)){\r\n                num = \"\"\r\n                \r\n              }\r\n    }\r\n    else{\r\n        num=\"\"\r\n    }\r\n    return{\r\n        ...state,\r\n        FirstInputId: num,\r\n        Validation:{\r\n            ...state.Validation,\r\n            FirstInputId:true\r\n        }\r\n    }\r\n}\r\nfunction InputFN(state, action){\r\n    return{\r\n        ...state,\r\n        FirstInputName: action.paylot,\r\n        Validation:{\r\n            ...state.Validation,\r\n            FirstInputName:true\r\n        }\r\n        \r\n    }\r\n}\r\nfunction InputSN(state, action){\r\n    \r\n    return {\r\n        ...state,\r\n        Game:{\r\n            ...state.Game,\r\n            SceneList:{\r\n                ...state.Game.SceneList,\r\n                [action.paylot.v2]:{\r\n                    ...state.Game.SceneList[action.paylot.v2],\r\n                    SceneName : action.paylot.v1,\r\n                    \r\n                }\r\n            }\r\n        },\r\n        \r\n        \r\n    }\r\n}\r\nfunction InputGT(state, action){\r\n    return {\r\n        ...state,\r\n        Game:{\r\n            ...state.Game,\r\n            SceneList:{\r\n                ...state.Game.SceneList,\r\n                [action.paylot.v2]:{\r\n                    ...state.Game.SceneList[action.paylot.v2],\r\n                    GameType : action.paylot.v1,\r\n                }\r\n            }\r\n        },\r\n        \r\n        \r\n    }\r\n}\r\n\r\nfunction InputNOR(state, action){\r\n    let Nof = state.Game.SceneList[action.paylot.v2].NumberOfReels\r\n    let nValue = action.paylot.v1\r\n    let symbols=state.Game.SceneList[action.paylot.v2].Symbols\r\n    let NIF = state.Game.SceneList[action.paylot.v2].NumberIfFreespin\r\n\r\n    if(nValue<Nof){\r\n        for(let i = nValue+1;i<=Nof;i++){\r\n            NIF={\r\n                \r\n                ...omit(NIF, i)\r\n            }\r\n            for(let a = 0;a<keys(symbols).length;a++){\r\n                symbols={\r\n                    ...symbols,\r\n                    [keys(symbols)[a]]:{\r\n                        ...symbols[keys(symbols)[a]],\r\n                        Reelstrip:{\r\n                            ...omit(symbols[keys(symbols)[a]].Reelstrip, i)\r\n                        },\r\n                        Paytable:{\r\n                            ...omit(symbols[keys(symbols)[a]].Paytable, i)\r\n                        }\r\n                    }\r\n                }\r\n                \r\n            }\r\n        }\r\n    }\r\n    else if(nValue>Nof){\r\n        \r\n        for(let i = Nof+1;i<=nValue;i++){\r\n            NIF={\r\n                \r\n                ...NIF,\r\n                [i]:0\r\n            }\r\n            for(let a = 0;a<keys(symbols).length;a++){\r\n                symbols={\r\n                    ...symbols,\r\n                    [keys(symbols)[a]]:{\r\n                        ...symbols[keys(symbols)[a]],\r\n                        Reelstrip:{\r\n                            ...symbols[keys(symbols)[a]].Reelstrip,\r\n                            [i]:0\r\n                        },\r\n                        Paytable:{\r\n                            ...symbols[keys(symbols)[a]].Paytable,\r\n                            [i]:0\r\n                        }\r\n                    }\r\n                }\r\n                \r\n            }\r\n        }\r\n    }\r\n    return {\r\n        ...state,\r\n        Game:{\r\n            ...state.Game,\r\n            SceneList:{\r\n                ...state.Game.SceneList,\r\n                [action.paylot.v2]:{\r\n                    ...state.Game.SceneList[action.paylot.v2],\r\n                    NumberOfReels : nValue,\r\n                    Symbols:{\r\n                        ...symbols\r\n                    },\r\n                    NumberIfFreespin:{\r\n                        ...NIF\r\n                    }\r\n                }\r\n            }\r\n        },\r\n        \r\n    }\r\n}\r\nfunction InputSymN(state, action){\r\n    let vID=action.paylot.vID, vKEY=action.paylot.vKEY, targetV=action.paylot.targetV.target.value\r\n    let Name = state.Game.SceneList[vID].Symbols[vKEY].Corect.Name\r\n    \r\n    if(!/^[A-Za-z0-9_.]+$/gi.test(targetV)){\r\n        Name=false\r\n        \r\n    }\r\n    else{\r\n        Name=true\r\n    }  \r\n    return {\r\n            ...state,\r\n            Game:{\r\n                ...state.Game,\r\n                SceneList:{\r\n                    ...state.Game.SceneList,\r\n                    [vID]:{\r\n                        ...state.Game.SceneList[vID],\r\n                        \r\n                        Symbols:{\r\n                            ...state.Game.SceneList[vID].Symbols,\r\n                            [vKEY]:{\r\n                                ...state.Game.SceneList[vID].Symbols[vKEY],\r\n                                name:targetV,\r\n                                Corect:{\r\n                                    ...state.Game.SceneList[vID].Symbols[vKEY].Corect,\r\n                                    Name:Name\r\n                                }\r\n                            }\r\n                        },\r\n                    }\r\n                }\r\n            },\r\n            \r\n        }\r\n\r\n}\r\nfunction InputSymID(state, action){\r\n    let vID=action.paylot.vID, vKEY=action.paylot.vKEY, targetV=action.paylot.targetV.target.value\r\n    let Id = state.Game.SceneList[vID].Symbols[vKEY].Corect.Id\r\n    \r\n    if(!/^[A-Za-z0-9_.]+$/gi.test(targetV)){\r\n        Id=false\r\n        \r\n    }\r\n    else{\r\n        Id=true\r\n    }    \r\n    return {\r\n            ...state,\r\n            Game:{\r\n                ...state.Game,\r\n                SceneList:{\r\n                    ...state.Game.SceneList,\r\n                    [vID]:{\r\n                        ...state.Game.SceneList[vID],\r\n                        \r\n                        Symbols:{\r\n                            ...state.Game.SceneList[vID].Symbols,\r\n                            [vKEY]:{\r\n                                ...state.Game.SceneList[vID].Symbols[vKEY],\r\n                                id:targetV,\r\n                                Corect:{\r\n                                    ...state.Game.SceneList[vID].Symbols[vKEY].Corect,\r\n                                    Id:Id\r\n                                }\r\n                            }\r\n                        },\r\n                    }\r\n                }\r\n            },\r\n            \r\n        }\r\n\r\n}\r\nfunction InputSymPayT(state, action){\r\n    let vID=action.paylot.vID, vKEY=action.paylot.vKEY, num\r\n    let vKEY1=action.paylot.vKEY1, targetV=action.paylot.targetV.target.value\r\n    if(targetV!=\"\"){\r\n             num = parseInt(targetV.replace(/\\D+/g,\"\"))\r\n             if(isNaN(num)){\r\n                num = \"\"\r\n                \r\n              }\r\n    }\r\n    else{\r\n        num=\"\"\r\n    }\r\n    \r\n        return {\r\n            ...state,\r\n            Game:{\r\n                ...state.Game,\r\n                SceneList:{\r\n                    ...state.Game.SceneList,\r\n                    [vID]:{\r\n                        ...state.Game.SceneList[vID],\r\n                        \r\n                        Symbols:{\r\n                            ...state.Game.SceneList[vID].Symbols,\r\n                            [vKEY]:{\r\n                                ...state.Game.SceneList[vID].Symbols[vKEY],\r\n                                Paytable:{\r\n                                    ...state.Game.SceneList[vID].Symbols[vKEY].Paytable,\r\n                                    [vKEY1]:num\r\n                                }\r\n                            }\r\n                        },\r\n                    }\r\n                }\r\n            },\r\n            \r\n        }\r\n\r\n}\r\n\r\nfunction InputSymSub(state, action){\r\n    let vID=action.paylot.vID, vKEY=action.paylot.vKEY\r\n    let vKEY1=action.paylot.vKEY1\r\n    let targetV=!state.Game.SceneList[vID].Symbols[vKEY].Substiture[vKEY1].value\r\n    \r\n    \r\n    \r\n        return {\r\n            ...state,\r\n            Game:{\r\n                ...state.Game,\r\n                SceneList:{\r\n                    ...state.Game.SceneList,\r\n                    [vID]:{\r\n                        ...state.Game.SceneList[vID],\r\n                        \r\n                        Symbols:{\r\n                            ...state.Game.SceneList[vID].Symbols,\r\n                            [vKEY]:{\r\n                                ...state.Game.SceneList[vID].Symbols[vKEY],\r\n                                Substiture:{\r\n                                    ...state.Game.SceneList[vID].Symbols[vKEY].Substiture,\r\n                                    [vKEY1]:{\r\n                                       ...state.Game.SceneList[vID].Symbols[vKEY].Substiture[vKEY1],\r\n                                       value:targetV \r\n                                    }\r\n                                }\r\n                                \r\n                            },\r\n                            [vKEY1]:{\r\n                                ...state.Game.SceneList[vID].Symbols[vKEY1],\r\n                                Substiture:{\r\n                                    ...state.Game.SceneList[vID].Symbols[vKEY1].Substiture,\r\n                                    [vKEY]:{\r\n                                       ...state.Game.SceneList[vID].Symbols[vKEY1].Substiture[vKEY],\r\n                                       value:targetV \r\n                                    }\r\n                                }\r\n                                \r\n                            }\r\n                        },\r\n                    }\r\n                }\r\n            },\r\n            \r\n        }\r\n\r\n}\r\nfunction InputSymSpec(state, action){\r\n    let vID=action.paylot.vID, vKEY=action.paylot.vKEY\r\n    let vKEY1=action.paylot.vKEY1\r\n    let targetV=!state.Game.SceneList[vID].Symbols[vKEY].Special[vKEY1]\r\n    \r\n    \r\n        return {\r\n            ...state,\r\n            Game:{\r\n                ...state.Game,\r\n                SceneList:{\r\n                    ...state.Game.SceneList,\r\n                    [vID]:{\r\n                        ...state.Game.SceneList[vID],\r\n                        \r\n                        Symbols:{\r\n                            ...state.Game.SceneList[vID].Symbols,\r\n                            [vKEY]:{\r\n                                ...state.Game.SceneList[vID].Symbols[vKEY],\r\n                                Special:{\r\n                                    ...state.Game.SceneList[vID].Symbols[vKEY].Special,\r\n                                    [vKEY1]:targetV \r\n                                }\r\n                                \r\n                            }\r\n                        },\r\n                    }\r\n                }\r\n            },\r\n            \r\n        }\r\n\r\n}\r\nfunction InputSymReel(state, action){\r\n    let vID=action.paylot.vID, vKEY=action.paylot.vKEY, num\r\n    let vKEY1=action.paylot.vKEY1, targetV=action.paylot.targetV.target.value\r\n    if(targetV!=\"\"){\r\n             num = parseInt(targetV.replace(/\\D+/g,\"\"))\r\n             if(isNaN(num)){\r\n                num = \"\"\r\n                \r\n              }\r\n    }\r\n    else{\r\n        num=\"\"\r\n    }\r\n    \r\n        return {\r\n            ...state,\r\n            Game:{\r\n                ...state.Game,\r\n                SceneList:{\r\n                    ...state.Game.SceneList,\r\n                    [vID]:{\r\n                        ...state.Game.SceneList[vID],\r\n                        \r\n                        Symbols:{\r\n                            ...state.Game.SceneList[vID].Symbols,\r\n                            [vKEY]:{\r\n                                ...state.Game.SceneList[vID].Symbols[vKEY],\r\n                                Reelstrip:{\r\n                                    ...state.Game.SceneList[vID].Symbols[vKEY].Reelstrip,\r\n                                    [vKEY1]:num\r\n                                }\r\n                            }\r\n                        },\r\n                    }\r\n                }\r\n            },\r\n            \r\n        }\r\n\r\n}\r\n function InputNumberIfFreespin(state, action){\r\n    let vID=action.paylot.vID, vKEY=action.paylot.vKEY, targetV=action.paylot.targetV.target.value, num\r\n    if(targetV!=\"\"){\r\n             num = parseInt(targetV.replace(/\\D+/g,\"\"))\r\n             if(isNaN(num)){\r\n                num = \"\"\r\n                \r\n              }\r\n    }\r\n    else{\r\n        num=\"\"\r\n    }\r\n    return{\r\n        ...state,\r\n            Game:{\r\n                ...state.Game,\r\n                SceneList:{\r\n                    ...state.Game.SceneList,\r\n                    [vID]:{\r\n                        ...state.Game.SceneList[vID],\r\n                        NumberIfFreespin:{\r\n                            ...state.Game.SceneList[vID].NumberIfFreespin,\r\n                            [vKEY]:num\r\n                        }\r\n                        \r\n                    }\r\n                }\r\n            },\r\n    }\r\n }\r\n function InputFreesG(state, action){\r\n     \r\n    let vID=action.paylot.vID, targetV=action.paylot.targetV.target.value\r\n    \r\n    return{\r\n        ...state,\r\n            Game:{\r\n                ...state.Game,\r\n                SceneList:{\r\n                    ...state.Game.SceneList,\r\n                    [vID]:{\r\n                        ...state.Game.SceneList[vID],\r\n                        FreespinGame:targetV\r\n                        \r\n                    }\r\n                }\r\n            },\r\n    }\r\n }\r\nexport {InputFreesG, InputNumberIfFreespin,InputFid, InputFN, InputSN, InputGT, InputNOR, InputSymN, InputSymID, InputSymPayT, InputSymSub, InputSymSpec, InputSymReel}","import {keys} from \"lodash\"\r\nimport {omit} from 'lodash'\r\n\r\nfunction DeleteScene(state, action){\r\n    if(keys(state.BookmarkList).length==1){\r\n                let sceneList=state.Game.SceneList\r\n                let bookmarkList=state.BookmarkList\r\n                let screnList=state.ScrenList\r\n                sceneList={\r\n                    ...omit(state.Game.SceneList,action.paylot)\r\n                }\r\n                bookmarkList={\r\n                    ...omit(state.BookmarkList,action.paylot)\r\n                }\r\n                screnList={\r\n                    ...omit(state.ScrenList,action.paylot)\r\n                }\r\n                sceneList={\r\n                    0:{\r\n                        id:\"0\",\r\n                        SceneName : \"SceneName_\"+0,\r\n                        GameType : \"Slot\",\r\n                        NumberOfReels:5,\r\n                        Reels : {\r\n                            1:{\r\n                                name:\"Reel1\"\r\n                            },\r\n                            2:{\r\n                                name:\"Reel1\"\r\n                            },\r\n                            3:{\r\n                                name:\"Reel1\"\r\n                            },\r\n                            4:{\r\n                                name:\"Reel1\"\r\n                            },\r\n                            5:{\r\n                                name:\"Reel1\"\r\n                            },\r\n                        },\r\n\r\n                        ScernTypeOfConf:{\r\n                            Symbols:false,\r\n                            Paytable:false,\r\n                            Substitutes:false,\r\n                            Special:false,\r\n                            Reelstrip:false,\r\n                            NumberIfFreespin:false,\r\n                            AllInfo:false\r\n                        },\r\n                        SlectedScernTypeOfConf:\"\",\r\n                        Symbols:{\r\n                            \r\n                        },\r\n                        Log:{\r\n                            \r\n                        },\r\n                        Wild:false,\r\n                        Scatter:false,\r\n                        FreespinGame:0,\r\n                        NumberIfFreespin:{},\r\n                        TotalRTP: \"0\",\r\n                        BaseGameRTP: \"0\",\r\n                        FreespinsRTP: \"0\",\r\n                        BonusGameRTP: \"0\",\r\n                        BasegameHitRate: \"0\",\r\n                        HitRate:{},\r\n                        Combinations:{},\r\n                        Returns:{}\r\n                    }\r\n                }\r\n                bookmarkList={\r\n                    ...state.bookmarkList,\r\n                        0:{\r\n                            Id:\"\"+0+\"\",\r\n                            backg:\"green\"\r\n                        },\r\n                }\r\n                screnList={\r\n                    ...state.screnList,\r\n                    0:{\r\n                        Id:\"\"+0+\"\",\r\n                        display:\"flex\"\r\n                    },\r\n                }\r\n                let reels=sceneList[0].Reels\r\n                for(let i = 1;i<=keys(reels).length;i++){\r\n                    \r\n                        \r\n                            \r\n                                sceneList={\r\n                                    ...sceneList,\r\n                                        [0]:{\r\n                                            ...sceneList[0],\r\n                                            NumberIfFreespin:{\r\n                                                ...sceneList[0].NumberIfFreespin,\r\n                                                [i]:0\r\n                                            },\r\n                                        }  \r\n                                }\r\n                        \r\n                    \r\n                }\r\n                return{\r\n                    ...state,\r\n                    Game:{\r\n                        ...state.Game,\r\n                        SceneList:{\r\n                            ...sceneList\r\n                        }\r\n                    \r\n                    },\r\n                    BookmarkList:{\r\n                        ...bookmarkList\r\n                    },\r\n                    ScrenList:{\r\n                        ...screnList\r\n                    },\r\n                    BookmarkOn:0\r\n                }\r\n        }\r\n         else{\r\n             let k = keys(omit(state.ScrenList,action.paylot))[0]\r\n             let State = {...state}\r\n             \r\n             for(let i = 0;i<keys(State.Game.SceneList).length;i++){\r\n                 if(keys(State.Game.SceneList)[i]!=action.paylot){\r\n                     if(State.Game.SceneList[keys(State.Game.SceneList)[i]].FreespinGame==action.paylot){\r\n                         \r\n                        State={\r\n                            ...State,\r\n                            Game:{\r\n                                ...State.Game,\r\n                                SceneList:{\r\n                                    ...State.Game.SceneList,\r\n                                    [keys(State.Game.SceneList)[i]]:{\r\n                                        ...State.Game.SceneList[keys(State.Game.SceneList)[i]],\r\n                                        FreespinGame:Number(keys(State.Game.SceneList)[i])\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                     }\r\n                 }\r\n             }\r\n             \r\n             State={\r\n                ...State,\r\n                Game:{\r\n                    ...State.Game,\r\n                    SceneList:{\r\n                        \r\n                        ...omit(State.Game.SceneList,action.paylot),\r\n                        \r\n                    }\r\n                    \r\n                },\r\n                BookmarkList:{\r\n                    \r\n                    ...omit(State.BookmarkList,action.paylot),\r\n                    [k]:{\r\n                        Id:\"\"+k+\"\",\r\n                        backg:\"green\"\r\n                    },\r\n                },\r\n                ScrenList:{\r\n                    \r\n                    ...omit(State.ScrenList,action.paylot),\r\n                    [k]:{\r\n                        Id:\"\"+k+\"\",\r\n                        display:\"flex\"\r\n                    },\r\n                },\r\n                BookmarkOn:k\r\n            }\r\n            \r\n            return{\r\n                ...State\r\n            }\r\n         }\r\n}\r\n\r\nexport {DeleteScene}","import {keys} from \"lodash\"\r\nimport {omit} from 'lodash'\r\n\r\nfunction Select(state, action){\r\n    \r\n    if(state.BookmarkOn!=action.paylot)\r\n    return{\r\n        ...state,\r\n        ScrenList:{\r\n            ...state.ScrenList,\r\n                [action.paylot]:{\r\n                    Id:\"\"+action.paylot+\"\",\r\n                    display:\"flex\"\r\n                },\r\n                [state.BookmarkOn]:{\r\n                    Id:\"\"+[state.BookmarkOn]+\"\",\r\n                    display:\"none\"\r\n                },\r\n            },\r\n        BookmarkList:{\r\n                ...state.BookmarkList,\r\n                    [action.paylot]:{\r\n                        Id:\"\"+action.paylot+\"\",\r\n                        backg:\"green\"\r\n                    },\r\n                    [state.BookmarkOn]:{\r\n                        Id:\"\"+[state.BookmarkOn]+\"\",\r\n                        backg:\"white\"\r\n                    },\r\n        },\r\n        BookmarkOn:action.paylot\r\n    }\r\n    else{\r\n        return{\r\n            ...state\r\n        }\r\n    }\r\n}\r\n\r\nfunction SelectMC(state, action){\r\n    \r\n    let v, s=action.paylot.v1, s2=\"\"\r\n    switch(action.paylot.v1){\r\n        case \"Symbols\":{\r\n            \r\n            if(state.Game.SceneList[action.paylot.v2].ScernTypeOfConf.Symbols){\r\n                s2=\"\"\r\n                v=false\r\n            }\r\n            else{\r\n                if(state.Game.SceneList[action.paylot.v2].SlectedScernTypeOfConf!=\"Symbols\")\r\n                    s2=state.Game.SceneList[action.paylot.v2].SlectedScernTypeOfConf\r\n                v=true\r\n            }\r\n            break\r\n        }\r\n        case \"Paytable\":{\r\n            if(state.Game.SceneList[action.paylot.v2].ScernTypeOfConf.Paytable){\r\n                s2=\"\"\r\n                v=false\r\n            }\r\n            else{\r\n                if(state.Game.SceneList[action.paylot.v2].SlectedScernTypeOfConf!=\"Paytable\")\r\n                    s2=state.Game.SceneList[action.paylot.v2].SlectedScernTypeOfConf\r\n                v=true\r\n            }\r\n            break\r\n        }\r\n        case \"Substiture\":{\r\n            if(state.Game.SceneList[action.paylot.v2].ScernTypeOfConf.Substiture){\r\n                s2=\"\"\r\n                v=false\r\n            }\r\n            else{\r\n                if(state.Game.SceneList[action.paylot.v2].SlectedScernTypeOfConf!=\"Substiture\")\r\n                    s2=state.Game.SceneList[action.paylot.v2].SlectedScernTypeOfConf\r\n                v=true\r\n            }\r\n            break\r\n        }\r\n        case \"Special\":{\r\n            if(state.Game.SceneList[action.paylot.v2].ScernTypeOfConf.Special){\r\n                s2=\"\"\r\n                v=false\r\n            }\r\n            else{\r\n                if(state.Game.SceneList[action.paylot.v2].SlectedScernTypeOfConf!=\"Special\")\r\n                    s2=state.Game.SceneList[action.paylot.v2].SlectedScernTypeOfConf\r\n                v=true\r\n            }\r\n            break\r\n        }\r\n        case \"Reelstrip\":{\r\n            if(state.Game.SceneList[action.paylot.v2].ScernTypeOfConf.Reelstrip){\r\n                s2=\"\"\r\n                v=false\r\n            }\r\n            else{\r\n                if(state.Game.SceneList[action.paylot.v2].SlectedScernTypeOfConf!=\"Reelstrip\")\r\n                    s2=state.Game.SceneList[action.paylot.v2].SlectedScernTypeOfConf\r\n                v=true\r\n            }\r\n            break\r\n        }\r\n        case \"NumberIfFreespin\":{\r\n            if(state.Game.SceneList[action.paylot.v2].ScernTypeOfConf.NumberIfFreespin){\r\n                s2=\"\"\r\n                v=false\r\n            }\r\n            else{\r\n                if(state.Game.SceneList[action.paylot.v2].SlectedScernTypeOfConf!=\"NumberIfFreespin\")\r\n                    s2=state.Game.SceneList[action.paylot.v2].SlectedScernTypeOfConf\r\n                v=true\r\n            }\r\n            break\r\n        }\r\n    }\r\n    if(s!=s2) \r\n    if(state.Game.SceneList[action.paylot.v2].SlectedScernTypeOfConf!=\"\") \r\n    return{\r\n        ...state,\r\n        Game:{\r\n            ...state.Game,\r\n            SceneList:{\r\n                ...state.Game.SceneList,\r\n                [action.paylot.v2]:{\r\n                    ...state.Game.SceneList[action.paylot.v2],\r\n                    \r\n                    ScernTypeOfConf:{\r\n                        ...state.Game.SceneList[action.paylot.v2].ScernTypeOfConf,\r\n                        [s]:v,\r\n                        [s2]:!v,\r\n                    },\r\n                    SlectedScernTypeOfConf:action.paylot.v1\r\n                }\r\n            }\r\n        },\r\n        \r\n    }\r\n    else\r\n    return{\r\n        ...state,\r\n        Game:{\r\n            ...state.Game,\r\n            SceneList:{\r\n                ...state.Game.SceneList,\r\n                [action.paylot.v2]:{\r\n                    ...state.Game.SceneList[action.paylot.v2],\r\n                    \r\n                    ScernTypeOfConf:{\r\n                        ...state.Game.SceneList[action.paylot.v2].ScernTypeOfConf,\r\n                        [s]:v,\r\n                        \r\n                    },\r\n                    SlectedScernTypeOfConf:action.paylot.v1\r\n                }\r\n            }\r\n        },\r\n        \r\n    }\r\n    return{\r\n        ...state,\r\n        Game:{\r\n            ...state.Game,\r\n            SceneList:{\r\n                ...state.Game.SceneList,\r\n                [action.paylot.v2]:{\r\n                    ...state.Game.SceneList[action.paylot.v2],\r\n                    \r\n                    ScernTypeOfConf:{\r\n                        ...state.Game.SceneList[action.paylot.v2].ScernTypeOfConf,\r\n                        [s]:v,\r\n                        \r\n                    },\r\n                    SlectedScernTypeOfConf:\"\"\r\n                }\r\n            }\r\n        },\r\n        \r\n    }\r\n}\r\nfunction SelectAI(state, action){\r\n    return{\r\n        ...state,\r\n        Game:{\r\n            ...state.Game,\r\n            SceneList:{\r\n                ...state.Game.SceneList,\r\n                [action.paylot]:{\r\n                    ...state.Game.SceneList[action.paylot],\r\n                    \r\n                    ScernTypeOfConf:{\r\n                        ...state.Game.SceneList[action.paylot].ScernTypeOfConf,\r\n                        AllInfo:!state.Game.SceneList[action.paylot].ScernTypeOfConf.AllInfo,\r\n                        \r\n                    }\r\n                }\r\n            }\r\n        },\r\n        \r\n    }\r\n}\r\nexport {Select, SelectMC, SelectAI}","import {keys} from \"lodash\"\r\nimport {omit} from 'lodash'\r\n\r\nfunction StartReset(state, action){\r\n    if(state.FirstBut==\"Start\"){\r\n        return{\r\n            ...state,\r\n            FirstBut:\"Reset\"\r\n        }\r\n    }\r\n    else{\r\n        return{\r\n            \r\n            \r\n            \r\n            FirstBut:\"Start\",\r\n            FirstInputId:\"\",\r\n            FirstInputName:\"\",\r\n            Validation:{\r\n                FirstInputName:true,\r\n                FirstInputId:true\r\n            },\r\n            Void:{\r\n                TypeOfVoid:\"\",\r\n                value:\"\",\r\n                text:\"\"\r\n            },\r\n            NoneFilde:false\r\n        }\r\n    }\r\n\r\n}\r\nexport {StartReset}","import {keys} from \"lodash\"\r\nimport {omit} from 'lodash'\r\n\r\nfunction AddSymbol(state, action){\r\n    \r\n    let Subst={}\r\n    let Reel={}\r\n    \r\n    let N=0\r\n    let symbols=state.Game.SceneList[action.paylot].Symbols\r\n    let masKey=keys(symbols)\r\n    \r\n    if(keys(state.Game.SceneList[action.paylot].Symbols).length==0)\r\n    {\r\n        \r\n        \r\n        \r\n        for(let i = 0;i<state.Game.SceneList[action.paylot].NumberOfReels;i++){\r\n            Reel={\r\n                ...Reel,\r\n                [i+1]:0\r\n            }\r\n            \r\n        }\r\n        symbols={\r\n            \r\n            [N]:{\r\n                name:\"Symbol_\"+N,\r\n                id:\"s\"+N+\"w\",\r\n                Paytable:{\r\n                    ...Reel\r\n                },\r\n                Substiture:{\r\n                    [N]:{\r\n                        id:N,\r\n                        value:false\r\n                    }\r\n                   \r\n                },\r\n                Special:{\r\n                    isWild:false,\r\n                    isScatter:false,\r\n                    isSpecific:false\r\n                },\r\n                Reelstrip:{\r\n                    ...Reel\r\n                },\r\n                Corect:{\r\n                    Name:true,\r\n                    Id:true\r\n                },\r\n            },\r\n            \r\n        }\r\n        \r\n    }\r\n        \r\n    else\r\n        {\r\n            \r\n            let C = false\r\n            while(!C){\r\n                \r\n                C=true;\r\n                for(let i = 0;i<keys(state.Game.SceneList[action.paylot].Symbols).length;i++)\r\n            \r\n                {\r\n                    if(N==keys(state.Game.SceneList[action.paylot].Symbols)[i])\r\n                    C=false;\r\n                }\r\n                if(!C)\r\n                    N++;\r\n            \r\n            }\r\n            \r\n            \r\n            \r\n            for(let i = 0;i<state.Game.SceneList[action.paylot].NumberOfReels;i++){\r\n                Reel={\r\n                    ...Reel,\r\n                    [i+1]:0\r\n                }\r\n            }\r\n                \r\n            \r\n            for(var i = 0;i<masKey.length+1;i++)\r\n            {\r\n                if(i<masKey.length)\r\n                symbols={\r\n                    ...symbols,\r\n                    [masKey[i]]:{\r\n                        ...symbols[masKey[i]],\r\n                        Substiture:{\r\n                            ...symbols[masKey[i]].Substiture,\r\n                            [N]:{\r\n                                id:N,\r\n                                value:false\r\n                            }\r\n                            \r\n                        }\r\n                    }\r\n                }\r\n                \r\n                \r\n            }\r\n            for(let i=0;i<=masKey.length;i++){\r\n                if(i!=masKey.length){\r\n                    Subst={\r\n                        ...Subst,\r\n                        [masKey[i]]:{\r\n                            id:masKey[i],\r\n                            value:false\r\n                        }\r\n                    }\r\n                }\r\n                else{\r\n                    Subst={\r\n                        ...Subst,\r\n                        [N]:{\r\n                            id:[N],\r\n                            value:false\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            symbols={\r\n              ...symbols,\r\n              [N]:{\r\n                name:\"Symbol_\"+N,\r\n                id:\"s\"+N+\"w\",\r\n                Paytable:{\r\n                    ...Reel,\r\n                },\r\n                Substiture:{\r\n                    ...Subst\r\n                },\r\n                Special:{\r\n                    isWild:false,\r\n                    isScatter:false,\r\n                    isSpecific:false\r\n                },\r\n                Reelstrip:{\r\n                    ...Reel\r\n                },\r\n                Corect:{\r\n                    Name:true,\r\n                    Id:true\r\n                },\r\n              }\r\n            }\r\n            \r\n        }\r\n    return {\r\n        ...state,\r\n        Game:{\r\n            ...state.Game,\r\n            SceneList:{\r\n                ...state.Game.SceneList,\r\n                [action.paylot]:{\r\n                    ...state.Game.SceneList[action.paylot],\r\n                    \r\n                    Symbols:{\r\n                        ...symbols\r\n                    },\r\n                }\r\n            }\r\n        },\r\n        \r\n    }\r\n}\r\n\r\nexport {AddSymbol}","import {keys} from \"lodash\"\r\nimport {omit} from 'lodash'\r\n\r\nfunction DeleteSymbol(state, action){\r\n    let symbols = state.Game.SceneList[action.paylot.v1].Symbols\r\n    \r\n    \r\n    symbols={\r\n        \r\n        ...omit(symbols,action.paylot.v2)\r\n    }\r\n    let sarray=keys(symbols)\r\n    \r\n    \r\n    \r\n    for(let i = 0;i<sarray.length;i++){\r\n        \r\n       \r\n        symbols={\r\n            ...symbols,\r\n            [sarray[i]]:{\r\n                ...symbols[sarray[i]],\r\n                Substiture:{\r\n                    ...omit(symbols[sarray[i]].Substiture, action.paylot.v2)\r\n\r\n                }\r\n            }\r\n        }\r\n       \r\n        \r\n    }\r\n    \r\n    \r\n    return {\r\n        ...state,\r\n        Game:{\r\n            ...state.Game,\r\n            SceneList:{\r\n                ...state.Game.SceneList,\r\n                [action.paylot.v1]:{\r\n                    ...state.Game.SceneList[action.paylot.v1],\r\n                    \r\n                    Symbols:{\r\n                        \r\n                        ...symbols\r\n                    },\r\n                }\r\n            }\r\n        },\r\n        \r\n    }\r\n}\r\nexport {DeleteSymbol}","import {keys} from \"lodash\"\r\nimport {omit} from 'lodash'\r\n\r\n\r\nfunction WorkWithReels(state, action){\r\n    let MasKey=keys(action.paylot)\r\n    let KeySc\r\n    let WorkType=false\r\n    let RTP_base = 0\r\n    let FreeGame = 0\r\n    let RTP = 0\r\n    let HitRate=0\r\n    \r\n    for(let i = 0;i<keys(action.paylot).length;i++){\r\n        if(MasKey[i]==\"vID\"){\r\n            KeySc=action.paylot.vID\r\n            \r\n            break\r\n        }\r\n         else if(MasKey[i]==\"v2\"){\r\n            \r\n            KeySc=action.paylot.v2\r\n            for(let i = 0;i<keys(action.paylot).length;i++){\r\n                if(MasKey[i]==\"ReelSize\"){\r\n                    WorkType=\"ReelSize\"\r\n                }\r\n            }\r\n        }\r\n        \r\n        else if(MasKey.length==1){\r\n            \r\n            KeySc=action.paylot\r\n        }\r\n    }\r\n    \r\n    let scene=state.Game.SceneList[KeySc]\r\n    let symbols = state.Game.SceneList[KeySc].Symbols\r\n    let reels=scene.Reels\r\n    if(WorkType==\"ReelSize\"){\r\n        \r\n        let Nof = action.paylot.v3\r\n        let nValue = parseInt((action.paylot.v1+\" \").replace(/\\D+/g,\"\"))\r\n        \r\n        if(isNaN(nValue)){\r\n            \r\n            reels={}\r\n        }\r\n        else if(keys(reels).length==0){\r\n\r\n            for(let i = 1;i<=nValue;i++){\r\n                \r\n                    reels={\r\n                \r\n                        ...reels,\r\n                        [i]:{\r\n                            name:\"Reel\"+[i],\r\n                            symbols:{\r\n                                ...symbols\r\n                            },\r\n                            NumS:0,\r\n                            NumW:0\r\n                        }\r\n                    }\r\n                \r\n            }\r\n        }\r\n        else{\r\n           \r\n            if(nValue<Nof){\r\n                \r\n                for(let i = nValue+1;i<=Nof;i++){\r\n                    for(let a = 0;a<keys(reels).length;a++){\r\n                    \r\n                        reels={\r\n                        \r\n                            ...omit(reels, i)\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            else if(nValue>Nof){\r\n            \r\n                    for(let i = Nof+1;i<=nValue;i++){\r\n                        for(let a = 0;a<keys(reels).length;a++){\r\n                            reels={\r\n                        \r\n                                ...reels,\r\n                                [i]:{\r\n                                    name:\"Reel\"+[i],\r\n                                    symbols:{\r\n                                        ...symbols\r\n                                    },\r\n                                    NumS:0,\r\n                                    NumW:0\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n            } \r\n        }\r\n       \r\n    }\r\n    else{\r\n        for(let i = 1;i<=keys(reels).length;i++){\r\n            \r\n            reels={     \r\n                ...reels,\r\n                [i]:{\r\n                    name:\"Reel\"+[i],\r\n                    symbols:{\r\n                        ...symbols\r\n                    },\r\n                    NumS:0,\r\n                    NumW:0,\r\n                    NumSc:0\r\n                }\r\n            }\r\n        }\r\n    }\r\n    if(keys(symbols).length!=0){\r\n        \r\n        let wild=undefined\r\n        for(let i=0;i<keys(symbols).length;i++){\r\n            if(symbols[keys(symbols)[i]].Special[\"isWild\"]){\r\n                wild=keys(symbols)[i]\r\n                break\r\n            }\r\n        }\r\n        for(let i = 1;i<=keys(reels).length;i++){\r\n            for(let a = 0;a<keys(symbols).length;a++){\r\n                if(symbols[keys(symbols)[a]].Reelstrip[i]==0){\r\n                    \r\n                    reels={\r\n                        ...reels,\r\n                        [i]:{\r\n                            ...reels[i],\r\n                            NumS:reels[i].NumS,\r\n                            NumW:reels[i].NumW,\r\n                            NumSc:reels[i].NumSc\r\n                        }\r\n                        \r\n                    }\r\n                }\r\n                else if(symbols[keys(symbols)[a]].Reelstrip[i]==\"\"){\r\n                    reels={\r\n                        ...reels,\r\n                        [i]:{\r\n                            ...reels[i],\r\n                            NumS:reels[i].NumS,\r\n                            NumW:reels[i].NumW,\r\n                            NumSc:reels[i].NumSc\r\n                        }\r\n                        \r\n                    }\r\n                }\r\n                else if(symbols[keys(symbols)[a]].Reelstrip[i]==undefined){\r\n                    reels={\r\n                        ...reels,\r\n                        [i]:{\r\n                            ...reels[i],\r\n                            NumS:reels[i].NumS,\r\n                            NumW:reels[i].NumW,\r\n                            NumSc:reels[i].NumSc\r\n                        }\r\n                        \r\n                    }\r\n                }\r\n                else{\r\n                   \r\n                    reels={\r\n                        ...reels,\r\n                        [i]:{\r\n                            ...reels[i],\r\n                            NumS:reels[i].NumS+symbols[keys(symbols)[a]].Reelstrip[i],\r\n                            NumW:symbols[keys(symbols)[a]].Special.isWild?reels[i].NumW+symbols[keys(symbols)[a]].Reelstrip[i]:reels[i].NumW,\r\n                            NumSc:reels[i].symbols[keys(symbols)[a]].Special.isScatter?reels[i].NumSc+symbols[keys(symbols)[a]].Reelstrip[i]:reels[i].NumSc,\r\n                        }\r\n                        \r\n                    }\r\n                }\r\n            }\r\n        }\r\n        \r\n        for(let a=1;a<=keys(reels).length;a++){\r\n            reels={\r\n                ...reels,\r\n                [a]:{\r\n                    ...reels[a],\r\n                    ScInReel:reels[a].NumSc*1\r\n                }\r\n            },\r\n            reels={\r\n                ...reels,\r\n                [a]:{\r\n                    ...reels[a],\r\n                    p_Sc:reels[a].ScInReel!=0?reels[a].ScInReel/reels[a].NumS:0,\r\n                    p_no_Sc:reels[a].ScInReel!=0?1-reels[a].ScInReel/reels[a].NumS:1\r\n                    \r\n                }\r\n            }\r\n            \r\n            for (let i = 0; i<keys(symbols).length;i++){    \r\n                    let check=true\r\n                    let SubArray = keys(reels[a].symbols[keys(symbols)[i]].Substiture)\r\n                    \r\n                    for(let o = 0;o<SubArray.length;o++){\r\n                        \r\n                        if(reels[a].symbols[SubArray[o]].Special[\"isWild\"]&&reels[a].symbols[keys(symbols)[i]].Substiture[SubArray[o]].value){\r\n                            \r\n                            check=false\r\n                        }\r\n                    }\r\n                    if(check)\r\n                        reels={\r\n                            ...reels,\r\n                            [a]:{\r\n                                ...reels[a],\r\n                                symbols:{\r\n                                    ...reels[a].symbols,\r\n                                    [keys(symbols)[i]]:{\r\n                                        ...reels[a].symbols[keys(symbols)[i]],\r\n                                        Num:reels[a].symbols[keys(symbols)[i]].Reelstrip[a],\r\n                                        NumInreel:reels[a].symbols[keys(symbols)[i]].Reelstrip[a]!=0?reels[a].symbols[keys(symbols)[i]].Reelstrip[a]/reels[a].NumS:0,\r\n                                        NumNoreel:reels[a].symbols[keys(symbols)[i]].Reelstrip[a]!=0?1-(reels[a].symbols[keys(symbols)[i]].Reelstrip[a]/reels[a].NumS):1,\r\n                                        NumZW:reels[a].symbols[keys(symbols)[i]].Reelstrip[a],\r\n                                        NumInreelZW:reels[a].symbols[keys(symbols)[i]].Reelstrip[a]!=0?reels[a].symbols[keys(symbols)[i]].Reelstrip[a]/reels[a].NumS:0,\r\n                                        NumNoreelZW:reels[a].symbols[keys(symbols)[i]].Reelstrip[a]!=0?1-(reels[a].symbols[keys(symbols)[i]].Reelstrip[a]/reels[a].NumS):1,\r\n                                        IsWithWild:false\r\n                                    }\r\n\r\n                                }\r\n                            }\r\n                        }\r\n                    else\r\n                        reels={\r\n                            ...reels,\r\n                            [a]:{\r\n                                ...reels[a],\r\n                                symbols:{\r\n                                    ...reels[a].symbols,\r\n                                    [keys(symbols)[i]]:{\r\n                                        ...reels[a].symbols[keys(symbols)[i]],\r\n                                        Num:reels[a].symbols[keys(symbols)[i]].Reelstrip[a],\r\n                                        NumInreel:reels[a].symbols[keys(symbols)[i]].Reelstrip[a]!=0?reels[a].symbols[keys(symbols)[i]].Reelstrip[a]/reels[a].NumS:0,\r\n                                        NumNoreel:reels[a].symbols[keys(symbols)[i]].Reelstrip[a]!=0?1-(reels[a].symbols[keys(symbols)[i]].Reelstrip[a]/reels[a].NumS):1,\r\n                                        NumZW:reels[a].symbols[keys(symbols)[i]].Reelstrip[a]+reels[a].NumW,\r\n                                        NumInreelZW:reels[a].symbols[keys(symbols)[i]].Reelstrip[a]!=0?(reels[a].symbols[keys(symbols)[i]].Reelstrip[a]+reels[a].NumW)/reels[a].NumS:0,\r\n                                        NumNoreelZW:reels[a].symbols[keys(symbols)[i]].Reelstrip[a]!=0?1-((reels[a].symbols[keys(symbols)[i]].Reelstrip[a]+reels[a].NumW)/reels[a].NumS):1,\r\n                                        IsWithWild:true\r\n                                    }\r\n\r\n                                }\r\n                            }\r\n                        }     \r\n            }\r\n\r\n        }\r\n        let p_Sc_win={\r\n\r\n        }\r\n        for(let i = 1;i<=keys(reels).length;i++){\r\n            let ArrNoKay = [ ]\r\n            \r\n            if(i!=keys(reels).length){\r\n                for(let a = 0;a<keys(reels).length-i;a++){\r\n                    ArrNoKay[a]=Number(keys(reels)[a])\r\n                }\r\n                p_Sc_win={\r\n                    ...p_Sc_win,\r\n                    [i]:0\r\n                }\r\n                let las = ArrNoKay.length-1, start = true, k=ArrNoKay.length-2, mul\r\n                if(ArrNoKay.length!=1&&ArrNoKay.length!=2){\r\n                    while(start){\r\n                        \r\n                        mul=1\r\n                        for(let c = 0;c<keys(reels).length;c++){\r\n                            let check1=true\r\n                            for(let v = 0;v<ArrNoKay.length;v++){\r\n                                if(keys(reels)[c]==ArrNoKay[v])\r\n                                    check1=false\r\n                            }\r\n                            if(check1){\r\n                                mul=mul*reels[(keys(reels)[c])].p_Sc\r\n                                \r\n                            }\r\n                            else{\r\n                                mul=mul*reels[(keys(reels)[c])].p_no_Sc\r\n                                \r\n                            }\r\n                            \r\n                        }\r\n                        \r\n                        p_Sc_win={\r\n                            ...p_Sc_win,\r\n                            [i]:p_Sc_win[i]+mul\r\n                                \r\n                            \r\n                        }\r\n                       \r\n                        \r\n                        ArrNoKay[las]++;\r\n                        if(ArrNoKay[las]>keys(reels).length){\r\n                            if((Number(ArrNoKay[las]-2)==Number(ArrNoKay[k]))){\r\n                                let start2 = true\r\n                                while(start2){\r\n                                    if(ArrNoKay[k-1]!=undefined){\r\n                                        if(Number(ArrNoKay[k]-1)!=Number(ArrNoKay[k-1])){\r\n                                            let temp = Number(ArrNoKay[k-1])\r\n                                            \r\n                                            for(let q = k-1, m=1;q<ArrNoKay.length;q++,m++){\r\n                                                \r\n                                                ArrNoKay[q]=temp+m\r\n                                            }\r\n                                            k=ArrNoKay.length-2\r\n                                            start2=!start2\r\n                                        }\r\n                                        else{\r\n                                            k--\r\n                                        }\r\n                                    }\r\n                                    else{\r\n                                        start2=!start2\r\n                                        start=!start\r\n                                          \r\n                                        mul=1\r\n                                        for(let c = 0;c<keys(reels).length;c++){\r\n                                        let check1=true\r\n                                        for(let v = 0;v<ArrNoKay.length;v++){\r\n                                            if(keys(reels)[c]==ArrNoKay[v])\r\n                                                check1=false\r\n                                        }\r\n                                        if(check1)\r\n                                            mul=mul*reels[(keys(reels)[c])].p_Sc\r\n                                        else\r\n                                            mul=mul*reels[(keys(reels)[c])].p_no_Sc\r\n                                        }\r\n                                        p_Sc_win={\r\n                                            ...p_Sc_win,\r\n                                            [i]:p_Sc_win[i]+mul\r\n                                        }\r\n                                        \r\n                                    }\r\n                                }\r\n                            }\r\n                            else{\r\n                                ArrNoKay[las]=Number(ArrNoKay[k])+2\r\n                                ArrNoKay[k]=Number(ArrNoKay[k])+1\r\n                            }  \r\n                        }\r\n                    }\r\n                }\r\n                else if(ArrNoKay.length==1){\r\n                    while(start){\r\n                        mul=1\r\n                        for(let c = 0;c<keys(reels).length;c++){\r\n                        let check1=true\r\n                        for(let v = 0;v<ArrNoKay.length;v++){\r\n                            if(keys(reels)[c]==ArrNoKay[v])\r\n                                check1=false\r\n                        }\r\n                        if(check1)\r\n                            mul=mul*reels[(keys(reels)[c])].p_Sc\r\n                        else\r\n                            mul=mul*reels[(keys(reels)[c])].p_no_Sc\r\n                        }\r\n                        p_Sc_win={\r\n                            ...p_Sc_win,\r\n                            [i]:p_Sc_win[i]+mul\r\n                        }\r\n                        \r\n                        ArrNoKay[las]++;\r\n                        if(ArrNoKay[las]>keys(reels).length){\r\n                            \r\n                            \r\n                            start=!start\r\n                        }\r\n                    }\r\n                }\r\n                else if(ArrNoKay.length==2){\r\n                    while(start){\r\n                        mul=1\r\n                        for(let c = 0;c<keys(reels).length;c++){\r\n                        let check1=true\r\n                        for(let v = 0;v<ArrNoKay.length;v++){\r\n                            if(keys(reels)[c]==ArrNoKay[v])\r\n                                check1=false\r\n                        }\r\n                        if(check1)\r\n                            mul=mul*reels[(keys(reels)[c])].p_Sc\r\n                        else\r\n                            mul=mul*reels[(keys(reels)[c])].p_no_Sc\r\n                        }\r\n                        p_Sc_win={\r\n                            ...p_Sc_win,\r\n                            [i]:p_Sc_win[i]+mul\r\n                        }\r\n                        \r\n                        ArrNoKay[las]++;\r\n                        if(ArrNoKay[las]>keys(reels).length)\r\n                            if((Number(ArrNoKay[las]-2)==Number(ArrNoKay[k]))){\r\n                                \r\n                                start=!start\r\n                            }\r\n                            else{\r\n                                ArrNoKay[las]=Number(ArrNoKay[k])+2\r\n                                ArrNoKay[k]=Number(ArrNoKay[k])+1\r\n                            }\r\n                    }\r\n                } \r\n            }\r\n            else if(i==keys(reels).length){\r\n                p_Sc_win={\r\n                    ...p_Sc_win,\r\n                    [i]:1\r\n                }\r\n                for(let c = 0;c<keys(reels).length;c++){\r\n                    p_Sc_win={\r\n                        ...p_Sc_win,\r\n                        [i]:p_Sc_win[i]*reels[keys(reels)[c]].p_Sc\r\n                    }\r\n                    \r\n                }\r\n                \r\n            }\r\n            reels={\r\n                ...reels,\r\n                [i]:{\r\n                    ...reels[i],\r\n                    p_Sc_win:p_Sc_win[i]\r\n                }\r\n                \r\n\r\n            }\r\n        }\r\n        ///////////////////////////////\r\n        ///////////////////////////////\r\n        ///////////////////////////////\r\n        ///////////////////////////////\r\n        ///////////////////////////////\r\n        ///////////////////////////////\r\n        let TheBigestValues={}\r\n        \r\n        for(let i = 1;i<=keys(reels).length;i++){\r\n            let temp=symbols[keys(symbols)[0]].Paytable[i]\r\n            let index\r\n            for(let a = 0;a<keys(symbols).length;a++){\r\n                if(reels[i].symbols[keys(symbols)[a]].IsWithWild)\r\n                    if(temp<=symbols[keys(symbols)[a]].Paytable[i]){\r\n                        temp=symbols[keys(symbols)[a]].Paytable[i]\r\n                        index=keys(symbols)[a]\r\n                    }\r\n            }\r\n            TheBigestValues={\r\n                ...TheBigestValues,\r\n                [i]:index\r\n            }\r\n           \r\n        }\r\n        \r\n        for(let i = 1;i<=keys(reels).length;i++){\r\n            for(let a = 0;a<keys(symbols).length;a++){\r\n                let p_sym_win={}\r\n                reels={\r\n                    ...reels,\r\n                    [i]:{\r\n                        ...reels[i],\r\n                        symbols:{\r\n                            ...reels[i].symbols,\r\n                            [keys(symbols)[a]]:{\r\n                                ...reels[i].symbols[keys(symbols)[a]],\r\n                                p_sym_win:{} \r\n                            }  \r\n                        }\r\n                    }\r\n                }\r\n                \r\n                for(let l=1;l<=keys(reels).length;l++){\r\n                    \r\n                    if(l==keys(reels).length){\r\n                        \r\n                        p_sym_win={\r\n                            ...p_sym_win,\r\n                            [l]:1\r\n                        }\r\n                        for(let o = 1;o<=keys(reels).length;o++){\r\n                            p_sym_win={\r\n                                ...p_sym_win,\r\n                                [l]:p_sym_win[l]*reels[o].symbols[keys(symbols)[a]].NumInreelZW\r\n                            }\r\n                        }\r\n                        \r\n                        let add=1\r\n                        if(reels[i].symbols[keys(symbols)[a]].IsWithWild){\r\n                            if(wild!=undefined){\r\n                                if(keys(symbols)[a]!=TheBigestValues[i]){\r\n                                    for(let o = 1;o<=keys(reels).length;o++){\r\n                                        add=add*reels[o].symbols[wild].NumInreel\r\n                                        \r\n                                    }\r\n                                    \r\n                                    p_sym_win={\r\n                                        ...p_sym_win,\r\n                                        [l]:p_sym_win[l]-add\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    else{\r\n                        let tick=l+1\r\n                        p_sym_win={\r\n                            ...p_sym_win,\r\n                            [l]:1\r\n                        }\r\n                        for(let o = 1;o<=tick;o++){\r\n                            if(o==tick){\r\n                                p_sym_win={\r\n                                    ...p_sym_win,\r\n                                    [l]:p_sym_win[l]*reels[o].symbols[keys(symbols)[a]].NumNoreelZW\r\n                                }\r\n                            }\r\n                            else{\r\n                                p_sym_win={\r\n                                    ...p_sym_win,\r\n                                    [l]:p_sym_win[l]*reels[o].symbols[keys(symbols)[a]].NumInreelZW\r\n                                }\r\n                            }\r\n                        }\r\n                        \r\n                        let add=1\r\n                        if(reels[i].symbols[keys(symbols)[a]].IsWithWild)\r\n                            if(wild!=undefined){\r\n                                for(let o = 1;o<=tick;o++){\r\n                                    if(o==tick){\r\n                                        add=add*reels[o].symbols[keys(symbols)[a]].NumNoreelZW\r\n                                    }\r\n                                    else{\r\n                                        add=add*reels[o].symbols[wild].NumInreel\r\n                                    }\r\n                                }\r\n                                \r\n                                p_sym_win={\r\n                                    ...p_sym_win,\r\n                                    [l]:p_sym_win[l]-add\r\n                                }\r\n                                \r\n                                if(keys(symbols)[a]==TheBigestValues[i]){\r\n                                    add=1\r\n                                    for(let o = 1;o<=keys(reels).length;o++){\r\n                                        if(o==tick){\r\n                                            add=add*reels[o].symbols[keys(symbols)[a]].NumNoreelZW\r\n                                        }\r\n                                        else{\r\n                                            add=add*reels[o].p_Sc\r\n                                        }\r\n                                    }\r\n                                    \r\n                                    p_sym_win={\r\n                                        ...p_sym_win,\r\n                                        [l]:p_sym_win[l]+add\r\n                                    }\r\n                                }\r\n                            }\r\n                    }\r\n                    \r\n                }\r\n                reels={\r\n                    ...reels,\r\n                    [i]:{\r\n                        ...reels[i],\r\n                        symbols:{\r\n                            ...reels[i].symbols,\r\n                            [keys(symbols)[a]]:{\r\n                                ...reels[i].symbols[keys(symbols)[a]],\r\n                                p_sym_win:{\r\n                                    ...reels[i].symbols[keys(symbols)[a]].p_sym_win,\r\n                                    ...p_sym_win \r\n                                } \r\n                            }  \r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        RTP_base=0\r\n        for(let i = 1;i<=keys(reels).length;i++){\r\n            for(let a = 0;a<keys(symbols).length;a++){\r\n                for(let l = 1;l<=keys(reels).length;l++){\r\n                    reels={\r\n                        ...reels,\r\n                        [i]:{\r\n                            ...reels[i],\r\n                            symbols:{\r\n                                ...reels[i].symbols,\r\n                                [keys(symbols)[a]]:{\r\n                                    ...reels[i].symbols[keys(symbols)[a]],\r\n                                    RTP:{\r\n                                        ...reels[i].symbols[keys(symbols)[a]].RTP,\r\n                                        [l]:reels[i].symbols[keys(symbols)[a]].Paytable[l]*reels[i].symbols[keys(symbols)[a]].p_sym_win[l]\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    RTP_base=RTP_base+reels[i].symbols[keys(symbols)[a]].Paytable[l]*reels[i].symbols[keys(symbols)[a]].p_sym_win[l]\r\n                }\r\n                \r\n            }\r\n        }\r\n        \r\n        if(KeySc==state.Game.SceneList[KeySc].FreespinGame){\r\n            FreeGame=0\r\n        }\r\n        else{\r\n            let keyFS=state.Game.SceneList[KeySc].FreespinGame\r\n            for(let i = 1;i<=keys(reels).length;i++){\r\n                FreeGame=FreeGame+(state.Game.SceneList[keyFS].BaseGameRTP*state.Game.SceneList[KeySc].NumberIfFreespin[i]*reels[i].p_Sc_win)\r\n            }\r\n        }\r\n        \r\n        \r\n        RTP=RTP_base+FreeGame\r\n        \r\n        //HitRate\r\n\r\n        HitRate=0\r\n\r\n        if(keys(reels).length!=0){\r\n            for(let i = 1;i<=keys(reels).length;i++){\r\n                HitRate=0\r\n                for(let a = 0;a<keys(reels[i].symbols).length;a++){\r\n                    for(let l = 1;l<=keys(reels).length;l++){\r\n                        reels={\r\n                            ...reels,\r\n                            [i]:{\r\n                                ...reels[i],\r\n                                symbols:{\r\n                                  ...reels[i].symbols,\r\n                                    [keys(symbols)[a]]:{\r\n                                        ...reels[i].symbols[keys(symbols)[a]],\r\n                                        Rate:{\r\n                                            ...reels[i].symbols[keys(symbols)[a]].Rate,\r\n                                            [l]:reels[i].symbols[keys(symbols)[a]].p_sym_win[l]!=0?1/reels[i].symbols[keys(symbols)[a]].p_sym_win[l]:0\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                        HitRate=HitRate+reels[i].symbols[keys(symbols)[a]].p_sym_win[l]\r\n                    }\r\n                    \r\n                }\r\n                if(HitRate!=0)\r\n                    HitRate=1/HitRate \r\n                else \r\n                    HitRate=0\r\n            }\r\n        }\r\n            \r\n    }\r\n    \r\n    return{\r\n        ...state,\r\n        Game:{\r\n            ...state.Game,\r\n            SceneList:{\r\n                ...state.Game.SceneList,\r\n                [KeySc]:{\r\n                   ...state.Game.SceneList[KeySc],\r\n                   Reels:{\r\n                       ...reels\r\n                   },\r\n                   BaseGameRTP:RTP_base ,\r\n                   TotalRTP:RTP,\r\n                   FreespinsRTP:FreeGame,\r\n                   BasegameHitRate:HitRate\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\nexport {WorkWithReels}","import {keys} from \"lodash\"\r\nimport {omit} from 'lodash'\r\n\r\nimport {WorkWithReels} from './WorkWithReels'\r\n\r\nfunction AddFreespinGame(state, action){\r\n    \r\n    let State=state,vID=action.paylot\r\n    let N = 0\r\n        let C = false\r\n        while(!C){\r\n            \r\n            C=true;\r\n            for(let i = 0;i<keys(state.Game.SceneList).length;i++)\r\n            \r\n            {\r\n                if(N==keys(state.Game.SceneList)[i])\r\n                 C=false;\r\n            }\r\n            if(!C)\r\n                N++;\r\n            \r\n        }\r\n        State={\r\n            ...State,\r\n            Game:{\r\n                ...State.Game,\r\n                SceneList:{\r\n                    ...State.Game.SceneList,\r\n                    [N]:{\r\n                        ...State.Game.SceneList[vID]\r\n                    }\r\n                },\r\n                \r\n            },\r\n            ScrenList:{\r\n                ...state.ScrenList,\r\n                    [N]:{\r\n                        Id:\"\"+N+\"\",\r\n                        display:\"none\"\r\n                    },\r\n                },\r\n            BookmarkList:{\r\n                ...state.BookmarkList,\r\n                [N]:{\r\n                    Id:\"\"+N+\"\",\r\n                    backg:\"white\"\r\n                },\r\n            },\r\n        }\r\n        State={\r\n            ...State,\r\n            Game:{\r\n                ...State.Game,\r\n                SceneList:{\r\n                    ...State.Game.SceneList,\r\n                    [N]:{\r\n                        ...State.Game.SceneList[N],\r\n                        id:\"\"+N+\"\",\r\n                        SceneName : \"Freespen_\"+[N],\r\n                        FreespinGame:N,\r\n                    }\r\n                } \r\n            }\r\n        }\r\n        let reels=State.Game.SceneList[N].Reels\r\n        for(let i = 1;i<=keys(reels).length;i++){\r\n            State={\r\n                ...State,\r\n                Game:{\r\n                    ...State.Game,\r\n                    SceneList:{\r\n                        ...State.Game.SceneList,\r\n                            [N]:{\r\n                                ...State.Game.SceneList[N],\r\n                                NumberIfFreespin:{\r\n                                    ...State.Game.SceneList[N].NumberIfFreespin,\r\n                                    [i]:0\r\n                                },\r\n                            }  \r\n                    }\r\n                }\r\n            }\r\n        }\r\n        let Action={\r\n            \r\n                paylot:\"\"+N+\"\"\r\n            \r\n        }\r\n        \r\n        \r\n        State={\r\n            ...WorkWithReels(State, Action)\r\n        }\r\n        \r\n        State={\r\n            ...State,\r\n            Game:{\r\n                ...State.Game,\r\n                SceneList:{\r\n                    ...State.Game.SceneList,\r\n                    [vID]:{\r\n                        ...State.Game.SceneList[vID],\r\n                        FreespinGame:N,\r\n                    }\r\n                } \r\n            }\r\n        }\r\n    return{\r\n        ...State\r\n    }\r\n}\r\nexport {AddFreespinGame}","export default function(state){\r\n    \r\n      \r\n    return{\r\n            ...state\r\n        }\r\n}","import {keys} from \"lodash\"\r\nimport {omit} from 'lodash'\r\n\r\nfunction Valid(state, action){\r\n\r\n    return {\r\n        ...state,\r\n        Validation:{\r\n            FirstInputName:action.paylot.Name,\r\n            FirstInputId:action.paylot.Id\r\n        }\r\n    }\r\n}\r\nfunction Windows(state, action){\r\n    let text=\"\"\r\n    let NoneFilde=true\r\n    let Name\r\n    if(action.paylot.void==\"Reset\"){\r\n        text=\"Do you want to reset current game settings\"\r\n        Name=action.paylot.void\r\n    }\r\n    else if(action.paylot.void==\"Delete\"){\r\n        text=\"Do you really want to delete current scene\"\r\n        Name=action.paylot.void+\" Scene\"\r\n        \r\n    }\r\n    else if(action.paylot.void==\"No\"){\r\n        Name=\"\"\r\n        text=\"\"\r\n        NoneFilde=!NoneFilde\r\n    }\r\n    return{\r\n        ...state,\r\n        Void:{\r\n            TypeOfVoid:Name,\r\n            value:action.paylot.value,\r\n            text:text\r\n        },\r\n        NoneFilde:NoneFilde\r\n    }\r\n}\r\nexport {Valid, Windows}","import {keys} from \"lodash\"\r\nimport {omit} from 'lodash'\r\n\r\nimport initialState from './initialState';\r\nimport CreateScene from './components/CreateScene'\r\nimport {InputFreesG, InputNumberIfFreespin, InputFid, InputFN, InputSN, InputGT, InputNOR, InputSymN, InputSymID, InputSymPayT, InputSymSub, InputSymSpec, InputSymReel} from './components/Inputs'\r\nimport {DeleteScene} from './components/Deletes'\r\nimport {Select, SelectMC, SelectAI} from './components/Select' \r\nimport {StartReset} from './components/StartReset'\r\nimport {AddSymbol} from './components/AddSymbol'\r\nimport {DeleteSymbol} from './components/DeleteSymbol'\r\nimport {WorkWithReels} from './components/WorkWithReels'\r\nimport {AddFreespinGame} from './components/AddFreespinGame'\r\nimport ImportJSON from './components/ImportJSON'\r\nimport {Valid, Windows} from './components/ControlInterface'\r\n\r\n function DefaultOpration(state = initialState, action){\r\n    switch(action.type) {\r\n        \r\n        \r\n        case \"ADD_NEW_SCENE\": {\r\n            return CreateScene(state, action)\r\n        }\r\n        case \"ADD_SYMBOL\": {\r\n            return AddSymbol(state, action)\r\n        }\r\n        case \"DELETE_SCENE\":{\r\n         return DeleteScene(state, action)\r\n        }\r\n        case \"DELETE_SYMBOL\":{\r\n            return DeleteSymbol(state, action)\r\n           }\r\n        case \"SELECT\":{\r\n            return Select(state, action)\r\n        }\r\n        case \"SELECT_MENU_CONFIG\":{\r\n            return SelectMC(state, action)\r\n        }\r\n        case \"SELECT_ALL_INFORMATION\":{\r\n            return SelectAI(state, action)\r\n        }\r\n        case \"START_RESET\":{\r\n            return StartReset(state, action)\r\n        }\r\n        case \"INPUT_FID\":{\r\n            return InputFid(state, action)\r\n        }\r\n        case \"INPUT_FNAME\":{\r\n           return InputFN(state, action)\r\n        }\r\n        case \"INPUT_SCENE_NAME\": {\r\n            return InputSN(state, action)\r\n        }\r\n        case \"INPUT_NUM_REELS\": {\r\n            return InputNOR(state, action)\r\n        }\r\n        case \"INPUT_GAME_TYPE\": {\r\n            return InputGT(state, action)\r\n        }\r\n        case \"INPUT_SYMBOL_NAME\":{\r\n            return InputSymN(state, action)\r\n        }\r\n        case \"INPUT_SYMBOL_ID\":{\r\n            return InputSymID(state, action)\r\n        }\r\n\r\n        case \"INPUT_SYMBOL_PAYTABLE\":{\r\n            return InputSymPayT(state, action)\r\n        }\r\n        case \"INPUT_SYMBOL_SUBSTITURE\":{\r\n            return InputSymSub(state, action)\r\n        }\r\n        case \"INPUT_SYMBOL_SPECIAL\":{\r\n            return InputSymSpec(state, action)\r\n        }\r\n        case \"INPUT_SYMBOL_REELSTRIP\":{\r\n            return InputSymReel(state, action)\r\n        }\r\n        case \"INPUT_NUMBER_IF_FREESPIN\":{\r\n            return InputNumberIfFreespin(state, action)\r\n        } \r\n        case \"INPUT_FREESPIN_GAME\":{\r\n            return InputFreesG(state, action)\r\n        }\r\n        case \"WORK_WITH_REELS\":{\r\n            return WorkWithReels(state, action)\r\n        }\r\n        case \"ADD_FREESPIN_GAME\":{\r\n            return AddFreespinGame(state, action)\r\n        }\r\n        case \"IMPORT_JSON\":{\r\n            return ImportJSON(action.paylot)\r\n        }\r\n        case \"VALIDATION\":{\r\n            return Valid(state, action)\r\n        }\r\n        case \"VOID_TYPE\":{\r\n            return Windows(state, action)\r\n        }\r\n        default: return state;\r\n    }\r\n} \r\nexport default DefaultOpration;","\r\n\r\nimport DefaultOperation from './DefaultOperation'\r\n\r\nimport { combineReducers } from 'redux';\r\n  \r\nexport default combineReducers({\r\n    \r\n    DefaultOperation,\r\n    \r\n    \r\n    \r\n\r\n  })\r\n  ","\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux'\nimport App from './App/App';\nimport reportWebVitals from './reportWebVitals';\n\nimport configureStore  from './Store/CreateStore';\n\n\n  const store = configureStore();\n \n  //Note that subscribe() returns a function for unregistering the listener\n   \n\n\n\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n\nreportWebVitals();\n","import {createStore} from 'redux';  \r\nimport MainReducer from './reducers/MainReducer';  \r\n \r\n/*Create a function called configureStore */\r\n \r\nexport default function configureStore() {  \r\n  return createStore(MainReducer);\r\n}"],"sourceRoot":""}