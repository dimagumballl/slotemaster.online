{"version":3,"sources":["Store/action/MainAction.js","componentsJS/Header/Header.js","componentsJS/SlotsScenes/ScrenScene/Bookmark.js","componentsJS/SlotsScenes/ScrenScene/DetailСofiguration/Symbols/Symbols.js","componentsJS/SlotsScenes/ScrenScene/DetailСofiguration/Paytable/Paytable.js","componentsJS/SlotsScenes/ScrenScene/DetailСofiguration/Substitutes/Substitutes.js","componentsJS/SlotsScenes/ScrenScene/DetailСofiguration/Secial/Secial.js","componentsJS/SlotsScenes/ScrenScene/DetailСofiguration/Reelstrip/AllInfo/AllInfo.js","componentsJS/SlotsScenes/ScrenScene/DetailСofiguration/Reelstrip/Reelstrip.js","componentsJS/SlotsScenes/ScrenScene/DetailСofiguration/NumberIfFreespin/NumberIfFreespin.js","componentsJS/SlotsScenes/ScrenScene/DetailСofiguration/DetailСofiguration.js","componentsJS/SlotsScenes/ScrenScene/ScrenScene.js","componentsJS/SlotsScenes/SlotsScenes.js","App/App.js","reportWebVitals.js","Store/reducers/initialState.js","Store/reducers/components/CreateScene.js","Store/reducers/components/Inputs.js","Store/reducers/components/Deletes.js","Store/reducers/components/Select.js","Store/reducers/components/StartReset.js","Store/reducers/components/AddSymbol.js","Store/reducers/components/DeleteSymbol.js","Store/reducers/components/WorkWithReels.js","Store/reducers/components/AddFreespinGame.js","Store/reducers/components/ImportJSON.js","Store/reducers/components/ControlInterface.js","Store/reducers/DefaultOperation.js","Store/reducers/MainReducer.js","index.js","Store/CreateStore.js"],"names":["CreateAction","Type","value","type","paylot","Header","Valid","DefaultOperation","props","state","NameS","FirstInputName","IdS","FirstInputId","Name","Validation","Id","test","PressFirstBut","VoidT","void","download","F","objectData","filename","contentType","window","navigator","msSaveOrOpenBlob","blob","Blob","decodeURIComponent","encodeURI","JSON","stringify","a","document","createElement","href","encodeURIComponent","target","body","appendChild","click","removeChild","e","preventDefault","file","files","fr","FileReader","addEventListener","ImportJSON","parse","result","readAsText","this","className","style","width","height","marginLeft","background","onChange","undefined","Game","InputFid","InputFname","onClick","FirstBut","justifyContent","marginRight","IJ","Component","connect","dispatch","event","Bookmark","Select","backgroundColor","BookmarkList","backg","SceneList","SceneName","Symbols","margin","borderRight","overflow","display","maxWidth","keys","length","map","key","name","InputSymN","vID","vKEY","p","targetV","Corect","InputSymID","id","DeleteSymbol","v1","v2","AddSymbol","console","log","Paytable","minWidth","border","Reelstrip","n","key1","InputSymPayT","vKEY1","textAlign","Substiture","Checkbox","checked","InputSymSub","color","Special","InputSymSpec","AllInfo","marginTop","BasegameHitRate","Reels","symbols","Rate","RTP","InputSymReel","UpRTP","TotalRTP","BaseGameRTP","FreespinsRTP","SelectAI","ScernTypeOfConf","NumberIfFreespin","InputNumberIfFreespin","butStyle","SlectedB","SlectedD","DetailСofiguration","SelectMC","ScrenScene","NS","InputNS","GT","InputGT","NOR","num","parseInt","replace","isNaN","InputNOR","ReelSize","v3","NumberOfReels","ScrenList","InputLabel","labelId","GameType","MenuItem","InputFreesG","FreespinGame","AddFreespinGame","Delete","SlotsScenes","AddScene","App","v","State","NoneFilde","borderRadius","Void","TypeOfVoid","text","Yes","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","CreateScene","GameName","0","1","2","3","4","5","Substitutes","SlectedScernTypeOfConf","Log","Wild","Scatter","BonusGameRTP","HitRate","Combinations","Returns","BookmarkOn","reels","i","N","C","action","InputFN","InputSN","Nof","nValue","NIF","omit","DeleteScene","sceneList","bookmarkList","screnList","k","Number","s","s2","StartReset","Subst","Reel","masKey","isWild","isScatter","isSpecific","sarray","WorkWithReels","KeySc","MasKey","WorkType","RTP_base","FreeGame","scene","NumS","NumW","NumSc","wild","ScInReel","p_Sc","p_no_Sc","check","SubArray","o","Num","NumInreel","NumNoreel","NumZW","NumInreelZW","NumNoreelZW","IsWithWild","p_Sc_win","ArrNoKay","las","start","mul","c","check1","start2","temp","q","m","TheBigestValues","index","p_sym_win","l","add","tick","keyFS","Action","Windows","DefaultOpration","combineReducers","store","createStore","MainReducer","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.e457269c.chunk.js","sourcesContent":["export const CreateAction =(Type, value) => {\r\n    return {\r\n        type: Type,\r\n        paylot:value,\r\n        \r\n    }\r\n}\r\n \r\n","\r\nimport {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport './Header.css'\r\nimport {CreateAction} from '../../Store/action/MainAction';\r\n\r\nclass Header extends Component {\r\n  Valid=(value)=>{\r\n    let DefaultOperation = this.props.state.DefaultOperation\r\n    let NameS = this.props.state.DefaultOperation.FirstInputName\r\n    let IdS = this.props.state.DefaultOperation.FirstInputId\r\n    let Name = this.props.state.DefaultOperation.Validation.FirstInputName\r\n    let Id = this.props.state.DefaultOperation.Validation.FirstInputId\r\n    \r\n    if(!/^[A-Za-z0-9_.]+$/gi.test(NameS)){\r\n      Name=!Name\r\n    }\r\n    if(!/^[0-9]+$/gi.test(IdS)){\r\n      Id=!Id\r\n    }\r\n    if(Id&&Name){\r\n      if(value==\"Start\"){\r\n        this.props.PressFirstBut(DefaultOperation)\r\n      }\r\n      else if(value==\"Reset\"){\r\n        this.props.VoidT({void:\"Reset\", value:null})\r\n      }\r\n      else if(value==\"Export\"){\r\n        this.download(NameS, DefaultOperation)\r\n      }\r\n      else if(value==\"Import\"){\r\n        \r\n      }\r\n    }\r\n    else{\r\n      this.props.Valid({Id:Id,Name:Name})\r\n    }\r\n  }\r\n  download(F,objectData) {\r\n    let filename = F+\".json\";\r\n    let contentType = \"application/json;charset=utf-8;\";\r\n    if (window.navigator && window.navigator.msSaveOrOpenBlob) {\r\n      var blob = new Blob([decodeURIComponent(encodeURI(JSON.stringify(objectData)))], { type: contentType });\r\n      navigator.msSaveOrOpenBlob(blob, filename);\r\n    } else {\r\n      var a = document.createElement('a');\r\n      a.download = filename;\r\n      a.href = 'data:' + contentType + ',' + encodeURIComponent(JSON.stringify(objectData));\r\n      a.target = '_blank';\r\n      document.body.appendChild(a);\r\n      a.click();\r\n      document.body.removeChild(a);\r\n    }\r\n  }\r\n  IJ(e){\r\n    \r\n    e.preventDefault();\r\n    const file = new Blob([e.target.files[0]], {type:\"application/json\"});\r\n    let fr = new FileReader();\r\n    \r\n    \r\n    \r\n    fr.addEventListener(\"load\", e => {\r\n        \r\n        this.props.ImportJSON(JSON.parse(fr.result))\r\n      });\r\n    \r\n    fr.readAsText(file)\r\n  }\r\n  render(){\r\n    const{DefaultOperation}=this.props.state\r\n    return (\r\n      <div className=\"Header\">\r\n        <div className=\"container_row\">\r\n            <input className=\"con_input\" value={DefaultOperation.FirstInputId} style={DefaultOperation.Validation.FirstInputId?{width:\"50px\",height:\"30px\",marginLeft:\"10px\", background:\"white\"}:{width:\"50px\",height:\"30px\",marginLeft:\"10px\", background:\"red\"}} onChange={DefaultOperation.Game==undefined?this.props.InputFid:()=>{}}/>\r\n                \r\n            \r\n            <input className=\"con_input\" value={DefaultOperation.FirstInputName} style={DefaultOperation.Validation.FirstInputName?{width:\"200px\",height:\"30px\",marginLeft:\"10px\", background:\"white\"}:{width:\"200px\",height:\"30px\",marginLeft:\"10px\", background:\"red\"}}  onChange={ DefaultOperation.Game==undefined?this.props.InputFname:()=>{}}/>\r\n                \r\n            \r\n            <div className=\"con_but\" style={{width:\"90px\",height:\"30px\",marginLeft:\"10px\"}} onClick={()=>this.Valid(DefaultOperation.FirstBut)}>\r\n                {\r\n                    DefaultOperation.FirstBut \r\n                }\r\n                \r\n            </div>\r\n        </div>\r\n        <div className=\"container_row\" style={{justifyContent:'flex-end'}}>\r\n             <div className=\"con_but\" style={{width:\"90px\",height:\"30px\"}} onClick={()=>this.Valid(\"Export\")}>\r\n                export\r\n            </div>\r\n            <input type=\"file\" className=\"custom-file-input\" style={{width:\"92px\",height:\"32px\",marginLeft:\"10px\", marginRight:\"10px\"}} onChange={(e)=>this.IJ(e)}/>\r\n                \r\n            \r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n  \r\n}\r\n\r\nexport default connect(\r\n  state=>({state:state}),\r\n  dispatch => ({\r\n    PressFirstBut: (DefaultOperation, value) => {\r\n      if(DefaultOperation.Game==undefined)\r\n        dispatch(CreateAction(\"ADD_NEW_SCENE\", value))\r\n        dispatch(CreateAction(\"START_RESET\"))\r\n    },\r\n    Valid: (value)=>{\r\n      dispatch(CreateAction(\"VALIDATION\", value))\r\n    },\r\n    InputFid: (event) => {\r\n        dispatch(CreateAction(\"INPUT_FID\", event.target.value))\r\n    },\r\n    InputFname: (event) => {\r\n        dispatch(CreateAction(\"INPUT_FNAME\", event.target.value))\r\n    },\r\n    ImportJSON:(state)=>{\r\n      dispatch(CreateAction(\"IMPORT_JSON\",state))\r\n    },\r\n    VoidT:(state)=>{\r\n      dispatch(CreateAction(\"VOID_TYPE\",state))\r\n    }\r\n  })\r\n)(Header);","\r\nimport {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport {CreateAction} from '../../../Store/action/MainAction';\r\n\r\n\r\nclass Bookmark extends Component {\r\n  \r\n  render(){\r\n    const{DefaultOperation}=this.props.state\r\n    const{Id}=this.props\r\n    return (\r\n      <div className=\"Bookmark\" onClick={()=>this.props.Select(this.props.Id)} style={{backgroundColor:DefaultOperation.BookmarkList[Id].backg}}>\r\n         {DefaultOperation.Game.SceneList[Id].SceneName}\r\n      </div>\r\n    );\r\n  }\r\n  \r\n}\r\n\r\nexport default connect(\r\n  state=>({state:state}),\r\n  dispatch => ({Select: (value) => {\r\n    \r\n      dispatch(CreateAction(\"SELECT\", value))\r\n      \r\n  },\r\n})\r\n)(Bookmark);\r\n","import {keys} from \"lodash\"\r\nimport {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport {CreateAction} from '../../../../../Store/action/MainAction';\r\n\r\n\r\nclass Symbols extends Component {\r\n    \r\n    \r\n  render(){\r\n    const{DefaultOperation}=this.props.state\r\n    const{Id}=this.props\r\n    return (\r\n      <div className=\"container_column\">\r\n          <div className=\"container_row\" style={{margin:\"20px\"}}>\r\n            <div className=\"container_column\" style={{width:\"100px\", borderRight:\"1px solid black\"}}>\r\n                \r\n                    <div className=\"container_row\" style={{height:\"30px\",width:\"100px\", borderRight:\"1px solid black\"}}>\r\n                        Symbols Name\r\n                    </div>\r\n                    \r\n                \r\n                \r\n                    <div className=\"container_row\" style={{height:\"30px\",width:\"100px\", borderRight:\"1px solid black\"}}>\r\n                        ID\r\n                    </div>\r\n                \r\n            </div>\r\n            \r\n            <div  style={{overflow:\"auto\",display:\"flex\", maxWidth:\"100%\"}}>\r\n            {\r\n                        keys(DefaultOperation.Game.SceneList[Id].Symbols).length!=0?\r\n                            keys(DefaultOperation.Game.SceneList[Id].Symbols)\r\n                            .map((key) =>\r\n                            <div className=\"container_column\" key={key} style={{height:\"100%\",width:\"120px\"}}>\r\n                                <div className=\"container_row\">\r\n                                    <input name=\"SymbolName\" onChange={(e)=>this.props.InputSymN( {vID:Id, vKEY:key, p:this.props, targetV:e})} value={DefaultOperation.Game.SceneList[Id].Symbols[key].name} style={DefaultOperation.Game.SceneList[Id].Symbols[key].Corect.Name?{width:\"100%\", background:\"white\"}:{width:\"100%\", background:\"red\"}}/>\r\n                                    \r\n                                </div>\r\n                                <div className=\"container_row\">\r\n                                    <input onChange={(e)=>this.props.InputSymID({vID:Id, vKEY:key, p:this.props, targetV:e})} value={DefaultOperation.Game.SceneList[Id].Symbols[key].id} style={DefaultOperation.Game.SceneList[Id].Symbols[key].Corect.Id?{width:\"100%\", background:\"white\"}:{width:\"100%\", background:\"red\"}}/>\r\n                                    \r\n                                </div>\r\n                                <div className=\"con_but\" onClick={()=>this.props.DeleteSymbol({vID:Id, v1:Id,v2:key})} style={{height:\"100%\"}}>\r\n                                    remove\r\n                                </div>\r\n                                \r\n                            </div>\r\n                                ):<div style={{display:\"none\"}}></div>\r\n                                \r\n                        \r\n                    }\r\n            </div>\r\n            <div className=\"con_but\" style={{width:\"50px\"}} onClick={()=>this.props.AddSymbol(Id)}>\r\n                +\r\n            </div>\r\n          </div>\r\n          <div className=\"container_row\">\r\n              <div style={{width:\"50px\"}}  >\r\n\r\n              </div>\r\n          </div>\r\n      </div>\r\n    );\r\n  }\r\n  \r\n}\r\n\r\nexport default connect(\r\n  state=>({state:state}),\r\n  dispatch => ({\r\n      AddSymbol: (value) => {\r\n\r\n        \r\n    \r\n      dispatch(CreateAction(\"ADD_SYMBOL\", value))\r\n      dispatch(CreateAction(\"WORK_WITH_REELS\", value))\r\n      \r\n  },\r\n  DeleteSymbol: (value) => {\r\n    \r\n    dispatch(CreateAction(\"DELETE_SYMBOL\", value))\r\n    dispatch(CreateAction(\"WORK_WITH_REELS\", value))\r\n    \r\n    },\r\n    InputSymN: (value) => {\r\n       \r\n    \r\n        dispatch(CreateAction(\"INPUT_SYMBOL_NAME\", value))\r\n        \r\n    },\r\n    InputSymID: (value) => {\r\n       \r\n        console.log(value)\r\n        dispatch(CreateAction(\"INPUT_SYMBOL_ID\", value))\r\n        \r\n    },\r\n})\r\n)(Symbols);\r\n","import {keys} from \"lodash\"\r\nimport {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport {CreateAction} from '../../../../../Store/action/MainAction';\r\n\r\n\r\nclass Paytable extends Component {\r\n  \r\n  render(){\r\n    const{DefaultOperation}=this.props.state\r\n    const{Id}=this.props\r\n    return (\r\n      <div className=\"container_column\" style={{overflow:\"auto\", maxWidth:\"100%\"}}>\r\n          <div className=\"container_row\" >\r\n            <div className=\"container_row\" style={{minWidth:\"100px\",border:\"1px solid black\"}}>\r\n                Symbol\r\n            </div>\r\n            {\r\n                \r\n                keys(DefaultOperation.Game.SceneList[Id].Symbols).length!=0?\r\n                    DefaultOperation.Game.SceneList[Id].Symbols[keys(DefaultOperation.Game.SceneList[Id].Symbols)[0]].Reelstrip!=0?\r\n                keys(DefaultOperation.Game.SceneList[Id].Symbols[keys(DefaultOperation.Game.SceneList[Id].Symbols)[0]].Reelstrip)\r\n                            .map((key, n=1)=>\r\n                            <div key={key}  className=\"container_row\" style={{minWidth:\"60px\", border:\"1px solid black\", justifyContent:\"center\"}}>\r\n                                \r\n                                {n+1}\r\n                            </div>)\r\n                :<div style={{display:\"none\"}}></div>:<div style={{display:\"none\"}}></div>\r\n            }\r\n          </div>\r\n          {\r\n                \r\n                keys(DefaultOperation.Game.SceneList[Id].Symbols).length!=0?\r\n                keys(DefaultOperation.Game.SceneList[Id].Symbols)\r\n                            .map((key)=>\r\n                            <div className=\"container_column\"  key={key}>\r\n                                <div className=\"container_row\">\r\n                                <div  className=\"container_row\" style={{minWidth:\"100px\", border:\"1px solid black\", justifyContent:\"center\", overflow:\"hidden\"}}>\r\n                                    {DefaultOperation.Game.SceneList[Id].Symbols[key].name}\r\n                                </div>\r\n                                {keys(DefaultOperation.Game.SceneList[Id].Symbols[key].Paytable).map((key1)=>\r\n                                    <input onChange={(e)=>this.props.InputSymPayT({vID:Id, vKEY:key, vKEY1:key1, targetV:e})} value={DefaultOperation.Game.SceneList[Id].Symbols[key].Paytable[key1]} key={key1}  className=\"container_row\" style={{minWidth:\"60px\", border:\"1px solid black\", textAlign:\"center\"}}/>\r\n                                    \r\n                                )}\r\n                                </div>\r\n                                \r\n                                \r\n                            </div>\r\n                            )\r\n                :<div></div>\r\n            }\r\n    </div>   \r\n    );\r\n  }\r\n  \r\n}\r\n\r\nexport default connect(\r\n  state=>({state:state}),\r\n  dispatch => ({\r\n    InputSymPayT: (value) => {\r\n       \r\n    \r\n      dispatch(CreateAction(\"INPUT_SYMBOL_PAYTABLE\", value))\r\n      dispatch(CreateAction(\"WORK_WITH_REELS\", value))\r\n    },\r\n  })\r\n)(Paytable);\r\n","import {keys} from \"lodash\"\r\nimport {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport {CreateAction} from '../../../../../Store/action/MainAction';\r\n\r\n\r\nclass Substiture extends Component {\r\n  \r\n  render(){\r\n    const{DefaultOperation}=this.props.state\r\n    const{Id}=this.props\r\n    return (\r\n      <div className=\"container_column\" style={{overflow:\"auto\", maxWidth:\"100%\"}}>\r\n          <div className=\"container_row\" >\r\n            <div className=\"container_row\" style={{minWidth:\"100px\",border:\"1px solid black\"}}>\r\n                Substitute\r\n            </div>\r\n            {\r\n                \r\n                keys(DefaultOperation.Game.SceneList[Id].Symbols).length!=0?\r\n                keys(DefaultOperation.Game.SceneList[Id].Symbols)\r\n                            .map((key)=>\r\n                            <div key={key}  className=\"container_row\" style={{minWidth:\"100px\", border:\"1px solid black\", justifyContent:\"center\"}}>\r\n                                {DefaultOperation.Game.SceneList[Id].Symbols[key].name}\r\n                            </div>)\r\n                :<div></div>\r\n            }\r\n          </div>\r\n          {\r\n                \r\n                keys(DefaultOperation.Game.SceneList[Id].Symbols).length!=0?\r\n                keys(DefaultOperation.Game.SceneList[Id].Symbols)\r\n                            .map((key)=>\r\n                            <div className=\"container_column\"  key={key}>\r\n                                <div className=\"container_row\">\r\n                                <div  className=\"container_row\" style={{minWidth:\"100px\", border:\"1px solid black\", justifyContent:\"center\", overflow:\"hidden\"}}>\r\n                                    {DefaultOperation.Game.SceneList[Id].Symbols[key].name}\r\n                                </div>\r\n                                {keys(DefaultOperation.Game.SceneList[Id].Symbols[key].Substiture).map((key1)=>\r\n                                    <div key={key1}  className=\"container_row\" style={{minWidth:\"100px\", border:\"1px solid black\", justifyContent:\"center\"}}>\r\n                                      <Checkbox\r\n                                        checked={DefaultOperation.Game.SceneList[Id].Symbols[key].Substiture[key1].value}\r\n                                        onChange={()=>this.props.InputSymSub({vID:Id, vKEY:key, vKEY1:key1})}\r\n                                        \r\n                                        color=\"primary\"\r\n                                      />\r\n                                      \r\n                                    </div>\r\n                                )}\r\n                                </div>\r\n                                \r\n                                \r\n                            </div>\r\n                            )\r\n                :<div></div>\r\n            }\r\n    </div>   \r\n    );\r\n  }\r\n  \r\n}\r\n\r\nexport default connect(\r\n  state=>({state:state}),\r\n  dispatch => ({\r\n    InputSymSub: (value) => {\r\n       \r\n    \r\n      dispatch(CreateAction(\"INPUT_SYMBOL_SUBSTITURE\", value))\r\n      dispatch(CreateAction(\"WORK_WITH_REELS\", value))\r\n    },\r\n  })\r\n)(Substiture);\r\n","import {keys} from \"lodash\"\r\nimport {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\n\r\nimport {CreateAction} from '../../../../../Store/action/MainAction';\r\n\r\n\r\nclass Special extends Component {\r\n  \r\n  render(){\r\n    const{DefaultOperation}=this.props.state\r\n    const{Id}=this.props\r\n    return (\r\n      <div className=\"container_column\" style={{overflow:\"auto\", maxWidth:\"100%\"}}>\r\n          <div className=\"container_row\" >\r\n            <div className=\"container_row\" style={{minWidth:\"100px\",border:\"1px solid black\"}}>\r\n                Symbols\r\n            </div>\r\n            \r\n                \r\n                \r\n                            <div  className=\"container_row\" style={{minWidth:\"100px\", border:\"1px solid black\", justifyContent:\"center\"}}>\r\n                                isWild\r\n                            </div>\r\n                            <div  className=\"container_row\" style={{minWidth:\"100px\", border:\"1px solid black\", justifyContent:\"center\"}}>\r\n                                isScatter\r\n                            </div>\r\n                            <div  className=\"container_row\" style={{minWidth:\"100px\", border:\"1px solid black\", justifyContent:\"center\"}}>\r\n                                isSpecific\r\n                            </div>\r\n                \r\n            \r\n          </div>\r\n          {\r\n                \r\n                keys(DefaultOperation.Game.SceneList[Id].Symbols).length!=0?\r\n                keys(DefaultOperation.Game.SceneList[Id].Symbols)\r\n                            .map((key)=>\r\n                            <div className=\"container_column\"  key={key}>\r\n                                <div className=\"container_row\">\r\n                                <div  className=\"container_row\" style={{minWidth:\"100px\", border:\"1px solid black\", justifyContent:\"center\", overflow:\"hidden\"}}>\r\n                                    {DefaultOperation.Game.SceneList[Id].Symbols[key].name}\r\n                                </div>\r\n                                {keys(DefaultOperation.Game.SceneList[Id].Symbols[key].Special).map((key1)=>\r\n                                    <div key={key1}  className=\"container_row\" style={{minWidth:\"100px\", border:\"1px solid black\", justifyContent:\"center\"}}>\r\n                                        <Checkbox\r\n                                        checked={DefaultOperation.Game.SceneList[Id].Symbols[key].Special[key1]}\r\n                                        onChange={()=>this.props.InputSymSpec({vID:Id, vKEY:key, vKEY1:key1})}\r\n                                        color=\"primary\"\r\n                                      />\r\n                                        \r\n                                    </div>\r\n                                )}\r\n                                </div>\r\n                                \r\n                                \r\n                            </div>\r\n                            )\r\n                :<div></div>\r\n            }\r\n    </div>   \r\n    );\r\n  }\r\n  \r\n}\r\n\r\nexport default connect(\r\n  state=>({state:state}),\r\n  dispatch => ({\r\n    InputSymSpec: (value) => {\r\n       \r\n    \r\n        dispatch(CreateAction(\"INPUT_SYMBOL_SPECIAL\", value))\r\n        dispatch(CreateAction(\"WORK_WITH_REELS\", value))\r\n      },\r\n  })\r\n)(Special);\r\n","import {keys} from \"lodash\"\r\nimport {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\n\r\n\r\n\r\nclass AllInfo extends Component {\r\n  \r\n  render(){\r\n    const{DefaultOperation}=this.props.state\r\n    const{Id}=this.props\r\n    return (\r\n      <div className=\"container_column\" style={{marginTop:\"40px\"}}>\r\n        <div className=\"container_row\" style={{justifyContent:\"center\"}}>\r\n            <h2>BasegameHitRate: {DefaultOperation.Game.SceneList[Id].BasegameHitRate}</h2>\r\n        </div>\r\n        <div className=\"container_column\" style={{overflow:\"auto\", maxWidth:\"100%\"}}>\r\n          <div className=\"container_row\" >\r\n            <div className=\"container_row\" style={{minWidth:\"100px\",border:\"1px solid black\"}}>\r\n                Symbol\r\n            </div>\r\n            {\r\n                \r\n                \r\n                keys(DefaultOperation.Game.SceneList[Id].Reels).length!=0?\r\n                keys(DefaultOperation.Game.SceneList[Id].Reels)\r\n                            .map((key)=>\r\n                            <div key={key}  className=\"container_row\" style={{minWidth:\"60px\", border:\"1px solid black\", justifyContent:\"center\"}}>\r\n                                \r\n                                {(key)}\r\n                            </div>)\r\n                :<div style={{display:\"none\"}}></div>\r\n            }\r\n          </div>\r\n          {\r\n                keys(DefaultOperation.Game.SceneList[Id].Symbols).length!=0?\r\n                keys(DefaultOperation.Game.SceneList[Id].Reels).length!=0?\r\n                keys(DefaultOperation.Game.SceneList[Id].Reels[1].symbols)\r\n                            .map((key)=>\r\n                            <div className=\"container_column\"  key={key}>\r\n                                <div className=\"container_row\">\r\n                                <div key={key} className=\"container_row\" style={{minWidth:\"100px\", border:\"1px solid black\", justifyContent:\"center\", overflow:\"hidden\"}}>\r\n                                    {\r\n                                        \r\n                                    DefaultOperation.Game.SceneList[Id].Symbols[key].name}\r\n                                </div>\r\n                                {\r\n                                    keys(DefaultOperation.Game.SceneList[Id].Reels[1].symbols[key].Rate).map((key1)=>\r\n                                        <div key={key1} className=\"container_row\" style={{minWidth:\"60px\", border:\"1px solid black\", justifyContent:\"center\"}}>\r\n                                            {DefaultOperation.Game.SceneList[Id].Reels[1].symbols[key].Rate[key1]}\r\n                                        </div>\r\n                                    )\r\n                                }\r\n                                </div>\r\n                                \r\n                                \r\n                            </div>\r\n                            )\r\n                :<div style={{display:\"none\"}}></div>:<div style={{display:\"none\"}}></div>\r\n            }\r\n        </div>\r\n        \r\n        \r\n        <div className=\"container_row\" style={{justifyContent:\"center\", marginTop:\"40px\"}}>\r\n            <h2>Returns</h2>\r\n        </div>\r\n        <div className=\"container_column\" style={{overflow:\"auto\", maxWidth:\"100%\"}}>\r\n          <div className=\"container_row\" >\r\n            <div className=\"container_row\" style={{minWidth:\"100px\",border:\"1px solid black\"}}>\r\n                Symbol\r\n            </div>\r\n            {\r\n                \r\n                \r\n                keys(DefaultOperation.Game.SceneList[Id].Reels).length!=0?\r\n                keys(DefaultOperation.Game.SceneList[Id].Reels)\r\n                            .map((key)=>\r\n                            <div key={key}  className=\"container_row\" style={{minWidth:\"60px\", border:\"1px solid black\", justifyContent:\"center\"}}>\r\n                                \r\n                                {(key)}\r\n                            </div>)\r\n                :<div style={{display:\"none\"}}></div>\r\n            }\r\n          </div>\r\n          {\r\n                keys(DefaultOperation.Game.SceneList[Id].Symbols).length!=0?\r\n                keys(DefaultOperation.Game.SceneList[Id].Reels).length!=0?\r\n                keys(DefaultOperation.Game.SceneList[Id].Reels[1].symbols)\r\n                            .map((key)=>\r\n                            <div className=\"container_column\"  key={key}>\r\n                                <div className=\"container_row\">\r\n                                <div key={key} className=\"container_row\" style={{minWidth:\"100px\", border:\"1px solid black\", justifyContent:\"center\", overflow:\"hidden\"}}>\r\n                                    {\r\n                                        \r\n                                    DefaultOperation.Game.SceneList[Id].Symbols[key].name}\r\n                                </div>\r\n                                {\r\n                                    keys(DefaultOperation.Game.SceneList[Id].Reels[1].symbols[key].Rate).map((key1)=>\r\n                                        <div key={key1} className=\"container_row\" style={{minWidth:\"60px\", border:\"1px solid black\", justifyContent:\"center\"}}>\r\n                                            {DefaultOperation.Game.SceneList[Id].Reels[1].symbols[key].RTP[key1]}\r\n                                        </div>\r\n                                    )\r\n                                }\r\n                                </div>\r\n                                \r\n                                \r\n                            </div>\r\n                            )\r\n                :<div style={{display:\"none\"}}></div>:<div style={{display:\"none\"}}></div>\r\n            }\r\n        </div>\r\n      </div>   \r\n    );\r\n  }\r\n  \r\n}\r\n\r\nexport default connect(\r\n  state=>({state:state}),\r\n  dispatch => ({\r\n    \r\n  })\r\n)(AllInfo);\r\n","import {keys} from \"lodash\"\r\nimport {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport {CreateAction} from '../../../../../Store/action/MainAction';\r\nimport AllInfo from './AllInfo/AllInfo'\r\n\r\nclass Paytable extends Component {\r\n  \r\n  render(){\r\n    const{DefaultOperation}=this.props.state\r\n    const{Id}=this.props\r\n    return (\r\n      <div className=\"container_column\">\r\n        <div className=\"container_column\" style={{overflow:\"auto\", maxWidth:\"100%\"}}>\r\n          <div className=\"container_row\" >\r\n            <div className=\"container_row\" style={{minWidth:\"100px\",border:\"1px solid black\"}}>\r\n                Symbol\r\n            </div>\r\n            {\r\n                \r\n                keys(DefaultOperation.Game.SceneList[Id].Symbols).length!=0?\r\n                    DefaultOperation.Game.SceneList[Id].Symbols[keys(DefaultOperation.Game.SceneList[Id].Symbols)[0]].Reelstrip!=0?\r\n                keys(DefaultOperation.Game.SceneList[Id].Symbols[keys(DefaultOperation.Game.SceneList[Id].Symbols)[0]].Reelstrip)\r\n                            .map((key, n=1)=>\r\n                            <div key={key}  className=\"container_row\" style={{minWidth:\"60px\", border:\"1px solid black\", justifyContent:\"center\"}}>\r\n                                \r\n                                {\"Reel \"+(n+1)}\r\n                            </div>)\r\n                :<div style={{display:\"none\"}}></div>:<div style={{display:\"none\"}}></div>\r\n            }\r\n          </div>\r\n          {\r\n                \r\n                keys(DefaultOperation.Game.SceneList[Id].Symbols).length!=0?\r\n                keys(DefaultOperation.Game.SceneList[Id].Symbols)\r\n                            .map((key)=>\r\n                            <div className=\"container_column\"  key={key}>\r\n                                <div className=\"container_row\">\r\n                                <div  className=\"container_row\" style={{minWidth:\"100px\", border:\"1px solid black\", justifyContent:\"center\", overflow:\"hidden\"}}>\r\n                                    {DefaultOperation.Game.SceneList[Id].Symbols[key].name}\r\n                                </div>\r\n                                {\r\n                                    keys(DefaultOperation.Game.SceneList[Id].Symbols[key].Reelstrip).map((key1)=>\r\n                                        <input onChange={(e)=>this.props.InputSymReel({vID:Id, vKEY:key, vKEY1:key1, targetV:e})} value={DefaultOperation.Game.SceneList[Id].Symbols[key].Reelstrip[key1]} key={key1}  className=\"container_row\" style={{minWidth:\"60px\", border:\"1px solid black\", textAlign:\"center\"}}/>\r\n                                    \r\n                                    )\r\n                                }\r\n                                </div>\r\n                                \r\n                                \r\n                            </div>\r\n                            )\r\n                :<div style={{display:\"none\"}}></div>\r\n            }\r\n        </div>\r\n        <div className=\"con_but\" style={{width:\"90px\", marginTop:\"10px\"}}onClick={()=>this.props.UpRTP(Id)}>\r\n              Up RTP\r\n        </div>\r\n        <div className=\"container_row\">\r\n          TotalRTP:{DefaultOperation.Game.SceneList[Id].TotalRTP}\r\n        </div>\r\n        <div className=\"container_row\">\r\n          BaseGameRTP:{DefaultOperation.Game.SceneList[Id].BaseGameRTP}\r\n        </div>\r\n        <div className=\"container_row\">\r\n          FreespinsRTP:{DefaultOperation.Game.SceneList[Id].FreespinsRTP}\r\n        </div>\r\n        <div className=\"container_row\" style={{justifyContent:\"center\"}}>\r\n          <div className=\"con_but\" style={{width:\"50%\", height:\"50px\"}} onClick={()=>this.props.SelectAI(Id)}>\r\n            Show all\r\n          </div>\r\n          \r\n        </div>\r\n        <div className=\"container_row\" style={!DefaultOperation.Game.SceneList[Id].ScernTypeOfConf.AllInfo?{display:\"none\"}:{justifyContent:\"center\",display:\"flex\"}}>\r\n          \r\n          <AllInfo\r\n            Id={Id}\r\n          />\r\n        </div>\r\n      </div>   \r\n    );\r\n  }\r\n  \r\n}\r\n\r\nexport default connect(\r\n  state=>({state:state}),\r\n  dispatch => ({\r\n    InputSymReel: (value) => {\r\n       \r\n    \r\n      dispatch(CreateAction(\"INPUT_SYMBOL_REELSTRIP\", value))\r\n      dispatch(CreateAction(\"WORK_WITH_REELS\", value))\r\n    },\r\n    SelectAI: (value) => {\r\n       \r\n    \r\n      dispatch(CreateAction(\"SELECT_ALL_INFORMATION\", value))\r\n      \r\n    },\r\n    UpRTP: (value) => {\r\n       \r\n    \r\n      \r\n      dispatch(CreateAction(\"WORK_WITH_REELS\", value))\r\n    },\r\n  })\r\n)(Paytable);\r\n","import {keys} from \"lodash\"\r\nimport {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport {CreateAction} from '../../../../../Store/action/MainAction';\r\n\r\n\r\nclass NumberIfFreespin extends Component {\r\n  \r\n  render(){\r\n    const{DefaultOperation}=this.props.state\r\n    const{Id}=this.props\r\n    return (\r\n        <div className=\"container_column\" style={{overflow:\"auto\", maxWidth:\"100%\"}}>\r\n            <div className=\"container_row\">\r\n                \r\n                <div className=\"container_column\">\r\n                    <div className=\"container_row\" style={{minWidth:\"100px\",border:\"1px solid black\"}}>\r\n                        Num of Sc\r\n                    </div>\r\n                    \r\n                    <div className=\"container_row\" style={{minWidth:\"100px\",border:\"1px solid black\"}}>\r\n                        Num freespin\r\n                    </div>\r\n                </div>\r\n                {\r\n                    keys(DefaultOperation.Game.SceneList[Id].Reels).length!=0?\r\n                    keys(DefaultOperation.Game.SceneList[Id].NumberIfFreespin).map((key)=>\r\n                        <div className=\"container_column\" key={key} style={{minWidth:\"60px\", border:\"1px solid black\", justifyContent:\"center\"}}>\r\n                            <div className=\"container_row\" style={{justifyContent:\"center\"}}>\r\n                                {key}\r\n                            </div>\r\n                            <div className=\"container_row\" >\r\n                                \r\n                                <input onChange={(e)=>this.props.InputNumberIfFreespin({vID:Id, vKEY:key, targetV:e})} value={DefaultOperation.Game.SceneList[Id].NumberIfFreespin[key]} className=\"container_row\" style={{height:\"100%\", border:\"1px solid black\", textAlign:\"center\"}}/>\r\n                            </div>\r\n                        </div>\r\n                    ):<div style={{display:\"none\"}}></div>\r\n                }\r\n            </div>\r\n            \r\n        </div>   \r\n    );\r\n  }\r\n  \r\n}\r\n\r\nexport default connect(\r\n  state=>({state:state}),\r\n  dispatch => ({\r\n    InputNumberIfFreespin: (value) => {\r\n       \r\n    \r\n      dispatch(CreateAction(\"INPUT_NUMBER_IF_FREESPIN\", value))\r\n      dispatch(CreateAction(\"WORK_WITH_REELS\", value))\r\n    },\r\n  })\r\n)(NumberIfFreespin);\r\n","\r\nimport {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport {CreateAction} from '../../../../Store/action/MainAction';\r\nimport './DetailСofiguration.css'\r\nimport Symbols from './Symbols/Symbols'\r\nimport Paytable from './Paytable/Paytable'\r\nimport Substiture from './Substitutes/Substitutes'\r\nimport Special from './Secial/Secial'\r\nimport Reelstrip from './Reelstrip/Reelstrip'\r\nimport NumberIfFreespin from './NumberIfFreespin/NumberIfFreespin'\r\n\r\nlet butStyle={height:\"30px\", justifyContent:\"flex-start\" }\r\nlet SlectedB={background:\"green\",height:\"30px\", justifyContent:\"flex-start\" }\r\nlet SlectedD={display:\"flex\"}\r\nclass DetailСofiguration extends Component {\r\n\r\n  render(){\r\n    const{DefaultOperation}=this.props.state\r\n    const{Id}=this.props\r\n    return (\r\n        <div className=\"containe_column\" style={{marginTop:\"40px\",}}>\r\n            <div className=\"con_sub\" onClick={()=>this.props.SelectMC({v1:\"Symbols\",v2:Id})} style={DefaultOperation.Game.SceneList[Id].ScernTypeOfConf.Symbols?SlectedB:butStyle}>\r\n                Symbols\r\n            </div>\r\n            <div className=\"table_scrin\" style={DefaultOperation.Game.SceneList[Id].ScernTypeOfConf.Symbols?SlectedD:{display:\"none\"}}>\r\n                <Symbols\r\n                    Id={Id}\r\n                />\r\n            </div>\r\n            <div className=\"con_sub\" onClick={()=>this.props.SelectMC({v1:\"Paytable\",v2:Id})} style={DefaultOperation.Game.SceneList[Id].ScernTypeOfConf.Paytable?SlectedB:butStyle}>\r\n                Paytable\r\n            </div>\r\n            <div className=\"table_scrin\" style={DefaultOperation.Game.SceneList[Id].ScernTypeOfConf.Paytable?SlectedD:{display:\"none\"}}>\r\n                <Paytable\r\n                    Id={Id}\r\n                />\r\n            </div>\r\n            <div className=\"con_sub\" onClick={()=>this.props.SelectMC({v1:\"Substiture\",v2:Id})} style={DefaultOperation.Game.SceneList[Id].ScernTypeOfConf.Substiture?SlectedB:butStyle}>\r\n                Substitute\r\n            </div>\r\n            <div className=\"table_scrin\" style={DefaultOperation.Game.SceneList[Id].ScernTypeOfConf.Substiture?SlectedD:{display:\"none\"}}>\r\n                \r\n                <Substiture Id={Id}/>\r\n            </div>\r\n            <div className=\"con_sub\" onClick={()=>this.props.SelectMC({v1:\"Special\",v2:Id})} style={DefaultOperation.Game.SceneList[Id].ScernTypeOfConf.Special?SlectedB:butStyle}>\r\n                Special\r\n            </div>\r\n            <div className=\"table_scrin\" style={DefaultOperation.Game.SceneList[Id].ScernTypeOfConf.Special?SlectedD:{display:\"none\"}}>\r\n                <Special\r\n                     Id={Id}\r\n                />\r\n            </div>\r\n            <div className=\"con_sub\" onClick={()=>this.props.SelectMC({v1:\"NumberIfFreespin\",v2:Id})} style={DefaultOperation.Game.SceneList[Id].ScernTypeOfConf.NumberIfFreespin?SlectedB:butStyle}>\r\n                Number if freespin\r\n            </div>\r\n            <div className=\"table_scrin\" style={DefaultOperation.Game.SceneList[Id].ScernTypeOfConf.NumberIfFreespin?SlectedD:{display:\"none\"}}>\r\n                <NumberIfFreespin\r\n                    Id={Id}\r\n                />\r\n            </div>\r\n            <div className=\"con_sub\" onClick={()=>this.props.SelectMC({v1:\"Reelstrip\",v2:Id})} style={DefaultOperation.Game.SceneList[Id].ScernTypeOfConf.Reelstrip?SlectedB:butStyle}>\r\n                Reelstrip\r\n            </div>\r\n            <div className=\"table_scrin\" style={DefaultOperation.Game.SceneList[Id].ScernTypeOfConf.Reelstrip?SlectedD:{display:\"none\"}}>\r\n                <Reelstrip\r\n                    Id={Id}\r\n                />\r\n            </div>\r\n            \r\n        </div>\r\n    );\r\n  }\r\n  \r\n}\r\n\r\nexport default connect(\r\n  state=>({state:state}),\r\n  dispatch => ({SelectMC: (value) => {\r\n    \r\n      dispatch(CreateAction(\"SELECT_MENU_CONFIG\", value))\r\n      \r\n  },\r\n})\r\n)(DetailСofiguration);\r\n","import {keys} from \"lodash\"\r\nimport {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\nimport Select from '@material-ui/core/Select';\r\nimport InputLabel from '@material-ui/core/InputLabel'\r\nimport MenuItem from '@material-ui/core/MenuItem'\r\n\r\n\r\nimport {CreateAction} from '../../../Store/action/MainAction';\r\nimport './ScrenScene.css'\r\nimport DetailConfiguration from './DetailСofiguration/DetailСofiguration'\r\n\r\n\r\nclass ScrenScene extends Component {\r\n  NS=(event)=>{\r\n    this.props.InputNS({v1:event.target.value, v2:this.props.Id})\r\n  }\r\n  GT = (event) => {\r\n   \r\n    this.props.InputGT({v1:event.target.value, v2:this.props.Id} );\r\n  };\r\n  NOR=(event)=>{\r\n    let num\r\n    let a = NaN\r\n     if(event.target.value!=\"\"){\r\n      num = parseInt(event.target.value.replace(/\\D+/g,\"\"))\r\n      \r\n      if(isNaN(num)){\r\n        num = \"\"\r\n        \r\n      }\r\n      this.props.InputNOR({v1:num, v2:this.props.Id, ReelSize:true, v3:this.props.state.DefaultOperation.Game.SceneList[this.props.Id].NumberOfReels} );\r\n     }\r\n     \r\n    else {\r\n      num = \"\"\r\n      this.props.InputNOR({v1:num, v2:this.props.Id,ReelSize:true , v3:this.props.state.DefaultOperation.Game.SceneList[this.props.Id].NumberOfReels} );\r\n    }\r\n    \r\n  }\r\n  render(){\r\n    const{DefaultOperation}=this.props.state\r\n    const{Id}=this.props\r\n    return (\r\n      <div className=\"ScrenScene\" style={{display:DefaultOperation.ScrenList[Id].display}}>\r\n          <div className=\"container_column\">\r\n            <div   className=\"container_row\">\r\n\r\n            <div  className=\"container_column\">\r\n            \r\n            <InputLabel id=\"SceneName\">SceneName </InputLabel>\r\n            <input className=\"con_input\" value={DefaultOperation.Game.SceneList[Id].SceneName} onChange={this.NS} style={{height:\"30px\"}}/>\r\n          \r\n            <InputLabel id=\"GameType\">GameType</InputLabel>\r\n            <Select labelId=\"GameType\" id=\"select\" onChange={this.GT} value={DefaultOperation.Game.SceneList[Id].GameType}>\r\n              <MenuItem value=\"Slot\">Slot</MenuItem>\r\n              <MenuItem value=\"Bonus\">Bonus</MenuItem>\r\n            </Select>\r\n          \r\n          \r\n            <InputLabel id=\"NumberofReels\">Number of Reels </InputLabel>\r\n            <input className=\"con_input\" onChange={this.NOR} style={{height:\"30px\"}} value={DefaultOperation.Game.SceneList[Id].NumberOfReels}/>\r\n            <InputLabel id=\"FreespinGame\">Freespin Game </InputLabel>\r\n            <Select labelId=\"FreespinGame\" onChange={(e)=>this.props.InputFreesG({vID:Id, targetV:e})}  value={DefaultOperation.Game.SceneList[Id].FreespinGame!=undefined?DefaultOperation.Game.SceneList[Id].FreespinGame:\"u\"}>\r\n            <MenuItem value=\"u\"></MenuItem>\r\n              {\r\n                keys(DefaultOperation.Game.SceneList).length>1?\r\n                  keys(DefaultOperation.Game.SceneList).map((key)=>\r\n                    \r\n                    Id!=key?\r\n                    <MenuItem value={key} key={key}>{DefaultOperation.Game.SceneList[key].SceneName!=undefined?DefaultOperation.Game.SceneList[key].SceneName:\"u\"}</MenuItem>:\"\"\r\n                  \r\n                  )\r\n                :\"\"\r\n              }\r\n              <MenuItem value={Id}>Empty</MenuItem>\r\n              \r\n              \r\n            </Select>\r\n            <div className=\"con_but\" style={{height:\"30px\"}}  onClick={()=>this.props.AddFreespinGame(Id)} >\r\n              Create Freespin\r\n            </div>\r\n          </div>\r\n          <div className=\"container_row\" style={{justifyContent:\"flex-end\"}}>\r\n            <div className=\"con_but\" style={{width:\"90px\",height:\"25px\"}}onClick={()=>this.props.VoidT({void:\"Delete\", value:Id})}>\r\n              Delete\r\n            </div>\r\n          </div>\r\n\r\n            </div>\r\n            <DetailConfiguration\r\n              Id={Id}\r\n            />\r\n          </div>  \r\n      </div>\r\n    );\r\n  }\r\n  \r\n}\r\n\r\nexport default connect(\r\n  state=>({state:state}),\r\n  dispatch => ({\r\n    Delete: (value) => {\r\n      dispatch(CreateAction(\"DELETE_SCENE\", value))\r\n    },\r\n    InputNS: (value) => {\r\n        dispatch(CreateAction(\"INPUT_SCENE_NAME\", value))\r\n    },\r\n    InputGT: (value) => {\r\n        dispatch(CreateAction(\"INPUT_GAME_TYPE\", value))\r\n        dispatch(CreateAction(\"WORK_WITH_REELS\", value))\r\n    },\r\n    InputNOR: (value) => {\r\n      \r\n      dispatch(CreateAction(\"INPUT_NUM_REELS\", value))\r\n      \r\n      dispatch(CreateAction(\"WORK_WITH_REELS\", value))\r\n  },\r\n  InputFreesG: (value) => {\r\n      \r\n    dispatch(CreateAction(\"INPUT_FREESPIN_GAME\", value))\r\n    \r\n    dispatch(CreateAction(\"WORK_WITH_REELS\", value))\r\n  },\r\n  AddFreespinGame: (value) => {\r\n      \r\n    dispatch(CreateAction(\"ADD_FREESPIN_GAME\", value))\r\n    \r\n    dispatch(CreateAction(\"WORK_WITH_REELS\", value))\r\n  },\r\n  VoidT:(state)=>{\r\n    dispatch(CreateAction(\"VOID_TYPE\",state))\r\n  }\r\n  })\r\n)(ScrenScene);\r\n","import {keys} from \"lodash\"\r\nimport {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport {CreateAction} from '../../Store/action/MainAction';\r\nimport './SlotsScenes.css'\r\nimport Bookmark from './ScrenScene/Bookmark'\r\nimport ScrenScene from './ScrenScene/ScrenScene'\r\n\r\n\r\nclass SlotsScenes extends Component {\r\n   \r\n\r\n  render(){\r\n    const{DefaultOperation}=this.props.state\r\n    return (\r\n      <div className=\"SlotsScenes\">\r\n        <div className=\"container_row\" style={{height:\"50px\"}}>\r\n            <div  style={{display:\"flex\",maxWidth:\"100%\",overflow:\"auto\"}}>\r\n                \r\n                {\r\n                   DefaultOperation.Game!=undefined?\r\n                    keys(DefaultOperation.Game.SceneList)\r\n                    .map((key) =>\r\n                        <Bookmark key={key}\r\n                            Id={key}\r\n                        />\r\n                    ):<div style={{maxWidth:\"0\",display:\"none\"}}></div>\r\n                    \r\n                        \r\n                }\r\n            </div>\r\n            <div className=\"con_but\" style={{marginLeft:\"5px\",height:\"30px\", width:\"30px\", minWidth:\"30px\"}} onClick={this.props.AddScene}>\r\n                +\r\n            </div>\r\n        </div>\r\n        <div className=\"container_column\">\r\n        {\r\n                   DefaultOperation.Game!=undefined?\r\n                    keys(DefaultOperation.Game.SceneList)\r\n                    .map((key) =>\r\n                        <ScrenScene key={key}\r\n                            Id={key}\r\n                        />\r\n                    ):<div></div>\r\n                    \r\n                        \r\n                }\r\n             \r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n  \r\n}\r\n\r\nexport default connect(\r\n  state=>({state:state}),\r\n  dispatch => ({\r\n    AddScene: (state) => {\r\n        \r\n          dispatch(CreateAction(\"ADD_NEW_SCENE\"))\r\n          \r\n      },\r\n  })\r\n)(SlotsScenes);\r\n","import '../common/Style/main.css'\nimport {Component} from 'react'\nimport {connect} from 'react-redux'\n\nimport {CreateAction} from '../Store/action/MainAction';\nimport Header from '../componentsJS/Header/Header'\nimport SlotsScenes from '../componentsJS/SlotsScenes/SlotsScenes'\n\nclass App extends Component {\n  Yes(v){\n    if(v.void==\"Reset\"){\n      this.props.PressFirstBut(this.props.State.DefaultOperation)\n    }\n    if(v.void==\"Delete Scene\"){\n      this.props.Delete(v.value)\n    }\n  }\n  render(){\n    return (\n      <div className=\"App\">\n        <div className=\"None_Filde\" style={this.props.State.DefaultOperation.NoneFilde?{display:\"flex\"}:{display:\"none\"}}>\n          <div className=\"container_column\"  style={{width:\"40%\", border:\"1px solid black\", background:\"white\", borderRadius:\"5px\"}}>\n              <div className=\"container_row\" style={{justifyContent:\"center\",marginTop:\"20px\"}}>\n                  <h2>{this.props.State.DefaultOperation.Void.TypeOfVoid}</h2>\n              </div>\n              <div className=\"container_row\" style={{justifyContent:\"center\", marginTop:\"20px\"}}>\n              {this.props.State.DefaultOperation.Void.text}\n              </div>\n              <div className=\"container_row\" style={{ marginTop:\"20px\"}}>\n                <div className=\"con_but\" style={{width:\"100%\", height:\"40px\"}} onClick={()=>this.props.VoidT({void:\"No\", value:null})}>\n                    No\n                </div>\n                <div className=\"con_but\" style={{width:\"100%\", height:\"40px\"}} onClick={()=>this.Yes({void:this.props.State.DefaultOperation.Void.TypeOfVoid, value:this.props.State.DefaultOperation.Void.value})}>\n                    Yes\n                </div>\n              </div>\n          </div>\n        </div>\n         <Header/>\n         {\n                this.props.State.DefaultOperation.Game!=undefined?<SlotsScenes/>:<div></div>\n          }\n      </div>\n    );\n  }\n  \n}\n\nexport default connect(\n  state=>({State:state}),\n  dispatch => ({\n    PressFirstBut: (DefaultOperation, value) => {\n      if(DefaultOperation.Game==undefined)\n        dispatch(CreateAction(\"ADD_NEW_SCENE\", value))\n        dispatch(CreateAction(\"START_RESET\"))\n        dispatch(CreateAction(\"VOID_TYPE\",{void:\"No\", value:null}))\n    },\n    \n    Delete: (value) => {\n      dispatch(CreateAction(\"DELETE_SCENE\", value))\n      dispatch(CreateAction(\"VOID_TYPE\",{void:\"No\", value:null}))\n    },\n    VoidT:(state)=>{\n      dispatch(CreateAction(\"VOID_TYPE\",state))\n    }\n  })\n)(App);\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","const initialState = {\r\n    FirstBut:\"Start\",\r\n    FirstInputId:\"\",\r\n    FirstInputName:\"\",\r\n    Validation:{\r\n        FirstInputName:true,\r\n        FirstInputId:true\r\n    },\r\n    Void:{\r\n        TypeOfVoid:\"\",\r\n        value:\"\",\r\n        text:\"\"\r\n    },\r\n    NoneFilde:false\r\n}\r\n \r\nexport default initialState;","\r\nimport {keys} from \"lodash\"\r\nimport {omit} from 'lodash'\r\n\r\n\r\nfunction CreateScene(state){\r\n    if(state.FirstBut==\"Start\"){\r\n        let State={\r\n            ...state,\r\n            Game:{\r\n                GameName:state.FirstInputName,\r\n                Id:state.FirstInputId,\r\n                SceneList:{\r\n                    0:{\r\n                        id:\"0\",\r\n                        SceneName : \"SceneName_\"+0,\r\n                        GameType : \"Slot\",\r\n                        NumberOfReels:5,\r\n                        Reels : {\r\n                            1:{\r\n                                name:\"Reel1\"\r\n                            },\r\n                            2:{\r\n                                name:\"Reel2\"\r\n                            },\r\n                            3:{\r\n                                name:\"Reel3\"\r\n                            },\r\n                            4:{\r\n                                name:\"Reel4\"\r\n                            },\r\n                            5:{\r\n                                name:\"Reel5\"\r\n                            },\r\n                        },\r\n                        ScernTypeOfConf:{\r\n                            Symbols:false,\r\n                            Paytable:false,\r\n                            Substitutes:false,\r\n                            Special:false,\r\n                            Reelstrip:false,\r\n                            NumberIfFreespin:false,\r\n                            AllInfo:false\r\n                        },\r\n                        SlectedScernTypeOfConf:\"\",\r\n                        Symbols:{\r\n                            \r\n                        },\r\n                        Log:{\r\n\r\n                        },\r\n                        Wild:false,\r\n                        Scatter:false,\r\n                        FreespinGame:0,\r\n                        NumberIfFreespin:{},\r\n                        TotalRTP: \"0\",\r\n                        BaseGameRTP: \"0\",\r\n                        FreespinsRTP: \"0\",\r\n                        BonusGameRTP: \"0\",\r\n                        BasegameHitRate: \"0\",\r\n                        HitRate:{},\r\n                        Combinations:{},\r\n                        Returns:{}\r\n                    }\r\n                }\r\n            },\r\n            \r\n            \r\n            ScrenList:{\r\n                ...state.ScrenList,\r\n                    0:{\r\n                        Id:\"\"+0+\"\",\r\n                        display:\"flex\"\r\n                    },\r\n                },\r\n                BookmarkList:{\r\n                    ...state.BookmarkList,\r\n                        0:{\r\n                            Id:\"\"+0+\"\",\r\n                            backg:\"green\"\r\n                        },\r\n                    },\r\n                BookmarkOn:0\r\n            \r\n        }\r\n        let reels=State.Game.SceneList[0].Reels\r\n        for(let i = 1;i<=keys(reels).length;i++){\r\n            State={\r\n                ...State,\r\n                Game:{\r\n                    ...State.Game,\r\n                    SceneList:{\r\n                        ...State.Game.SceneList,\r\n                            [0]:{\r\n                                ...State.Game.SceneList[0],\r\n                                NumberIfFreespin:{\r\n                                    ...State.Game.SceneList[0].NumberIfFreespin,\r\n                                    [i]:0\r\n                                },\r\n                            }  \r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return{\r\n            ...State\r\n        }\r\n           \r\n    }\r\n    else{\r\n        \r\n        let N = 0\r\n        let C = false\r\n        while(!C){\r\n            \r\n            C=true;\r\n            for(let i = 0;i<keys(state.Game.SceneList).length;i++)\r\n            \r\n            {\r\n                if(N==keys(state.Game.SceneList)[i])\r\n                 C=false;\r\n            }\r\n            if(!C)\r\n                N++;\r\n            \r\n        }\r\n        let State={\r\n            ...state,\r\n            Game:{\r\n                ...state.Game,\r\n                SceneList:{\r\n                    ...state.Game.SceneList,\r\n                    [N]:{\r\n                        \r\n                        id:[N],\r\n                        SceneName : \"SceneName_\"+[N],\r\n                        GameType : \"Slot\",\r\n                        NumberOfReels:5,\r\n                        Reels : {\r\n                            1:{\r\n                                name:\"Reel1\"\r\n                            },\r\n                            2:{\r\n                                name:\"Reel2\"\r\n                            },\r\n                            3:{\r\n                                name:\"Reel3\"\r\n                            },\r\n                            4:{\r\n                                name:\"Reel4\"\r\n                            },\r\n                            5:{\r\n                                name:\"Reel5\"\r\n                            }\r\n                        },\r\n                        ScernTypeOfConf:{\r\n                            Symbols:false,\r\n                            Paytable:false,\r\n                            Substitutes:false,\r\n                            Special:false,\r\n                            Reelstrip:false,\r\n                            NumberIfFreespin:false,\r\n                            AllInfo:false\r\n                        },\r\n                        SlectedScernTypeOfConf:\"\",\r\n                        Symbols:{\r\n                            \r\n                        },\r\n                        Log:{\r\n                            \r\n                        },\r\n                        Wild:false,\r\n                        Scatter:false,\r\n                        FreespinGame:N,\r\n                        NumberIfFreespin:{},\r\n                        TotalRTP: \"0\",\r\n                        BaseGameRTP: \"0\",\r\n                        FreespinsRTP: \"0\",\r\n                        BonusGameRTP: \"0\",\r\n                        BasegameHitRate: \"0\",\r\n                        Combinations:{},\r\n                        Returns:{}\r\n                    }\r\n                }\r\n            },\r\n            ScrenList:{\r\n            ...state.ScrenList,\r\n                [N]:{\r\n                    Id:\"\"+N+\"\",\r\n                    display:\"none\"\r\n                },\r\n            },\r\n            BookmarkList:{\r\n                ...state.BookmarkList,\r\n                    [N]:{\r\n                        Id:\"\"+N+\"\",\r\n                        backg:\"white\"\r\n                    },\r\n            },\r\n        }\r\n        let reels=State.Game.SceneList[N].Reels\r\n        for(let i = 1;i<=keys(reels).length;i++){\r\n            State={\r\n                ...State,\r\n                Game:{\r\n                    ...State.Game,\r\n                    SceneList:{\r\n                        ...State.Game.SceneList,\r\n                            [N]:{\r\n                                ...State.Game.SceneList[N],\r\n                                NumberIfFreespin:{\r\n                                    ...State.Game.SceneList[N].NumberIfFreespin,\r\n                                    [i]:0\r\n                                },\r\n                            }  \r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return{\r\n            ...State\r\n        }\r\n    }\r\n    return state\r\n}\r\nexport default CreateScene","import {keys} from \"lodash\"\r\nimport {omit} from 'lodash'\r\n\r\nfunction InputFid(state, action){\r\n    let  num\r\n    if(action.paylot!=\"\"){\r\n             num = parseInt(action.paylot.replace(/\\D+/g,\"\"))\r\n             if(isNaN(num)){\r\n                num = \"\"\r\n                \r\n              }\r\n    }\r\n    else{\r\n        num=\"\"\r\n    }\r\n    return{\r\n        ...state,\r\n        FirstInputId: num,\r\n        Validation:{\r\n            ...state.Validation,\r\n            FirstInputId:true\r\n        }\r\n    }\r\n}\r\nfunction InputFN(state, action){\r\n    return{\r\n        ...state,\r\n        FirstInputName: action.paylot,\r\n        Validation:{\r\n            ...state.Validation,\r\n            FirstInputName:true\r\n        }\r\n        \r\n    }\r\n}\r\nfunction InputSN(state, action){\r\n    \r\n    return {\r\n        ...state,\r\n        Game:{\r\n            ...state.Game,\r\n            SceneList:{\r\n                ...state.Game.SceneList,\r\n                [action.paylot.v2]:{\r\n                    ...state.Game.SceneList[action.paylot.v2],\r\n                    SceneName : action.paylot.v1,\r\n                    \r\n                }\r\n            }\r\n        },\r\n        \r\n        \r\n    }\r\n}\r\nfunction InputGT(state, action){\r\n    return {\r\n        ...state,\r\n        Game:{\r\n            ...state.Game,\r\n            SceneList:{\r\n                ...state.Game.SceneList,\r\n                [action.paylot.v2]:{\r\n                    ...state.Game.SceneList[action.paylot.v2],\r\n                    GameType : action.paylot.v1,\r\n                }\r\n            }\r\n        },\r\n        \r\n        \r\n    }\r\n}\r\n\r\nfunction InputNOR(state, action){\r\n    let Nof = state.Game.SceneList[action.paylot.v2].NumberOfReels\r\n    let nValue = action.paylot.v1\r\n    let symbols=state.Game.SceneList[action.paylot.v2].Symbols\r\n    let NIF = state.Game.SceneList[action.paylot.v2].NumberIfFreespin\r\n\r\n    if(nValue<Nof){\r\n        for(let i = nValue+1;i<=Nof;i++){\r\n            NIF={\r\n                \r\n                ...omit(NIF, i)\r\n            }\r\n            for(let a = 0;a<keys(symbols).length;a++){\r\n                symbols={\r\n                    ...symbols,\r\n                    [keys(symbols)[a]]:{\r\n                        ...symbols[keys(symbols)[a]],\r\n                        Reelstrip:{\r\n                            ...omit(symbols[keys(symbols)[a]].Reelstrip, i)\r\n                        },\r\n                        Paytable:{\r\n                            ...omit(symbols[keys(symbols)[a]].Paytable, i)\r\n                        }\r\n                    }\r\n                }\r\n                \r\n            }\r\n        }\r\n    }\r\n    else if(nValue>Nof){\r\n        \r\n        for(let i = Nof+1;i<=nValue;i++){\r\n            NIF={\r\n                \r\n                ...NIF,\r\n                [i]:0\r\n            }\r\n            for(let a = 0;a<keys(symbols).length;a++){\r\n                symbols={\r\n                    ...symbols,\r\n                    [keys(symbols)[a]]:{\r\n                        ...symbols[keys(symbols)[a]],\r\n                        Reelstrip:{\r\n                            ...symbols[keys(symbols)[a]].Reelstrip,\r\n                            [i]:0\r\n                        },\r\n                        Paytable:{\r\n                            ...symbols[keys(symbols)[a]].Paytable,\r\n                            [i]:0\r\n                        }\r\n                    }\r\n                }\r\n                \r\n            }\r\n        }\r\n    }\r\n    return {\r\n        ...state,\r\n        Game:{\r\n            ...state.Game,\r\n            SceneList:{\r\n                ...state.Game.SceneList,\r\n                [action.paylot.v2]:{\r\n                    ...state.Game.SceneList[action.paylot.v2],\r\n                    NumberOfReels : nValue,\r\n                    Symbols:{\r\n                        ...symbols\r\n                    },\r\n                    NumberIfFreespin:{\r\n                        ...NIF\r\n                    }\r\n                }\r\n            }\r\n        },\r\n        \r\n    }\r\n}\r\nfunction InputSymN(state, action){\r\n    let vID=action.paylot.vID, vKEY=action.paylot.vKEY, targetV=action.paylot.targetV.target.value\r\n    let Name = state.Game.SceneList[vID].Symbols[vKEY].Corect.Name\r\n    \r\n    if(!/^[A-Za-z0-9_.]+$/gi.test(targetV)){\r\n        Name=false\r\n        \r\n    }\r\n    else{\r\n        Name=true\r\n    }  \r\n    return {\r\n            ...state,\r\n            Game:{\r\n                ...state.Game,\r\n                SceneList:{\r\n                    ...state.Game.SceneList,\r\n                    [vID]:{\r\n                        ...state.Game.SceneList[vID],\r\n                        \r\n                        Symbols:{\r\n                            ...state.Game.SceneList[vID].Symbols,\r\n                            [vKEY]:{\r\n                                ...state.Game.SceneList[vID].Symbols[vKEY],\r\n                                name:targetV,\r\n                                Corect:{\r\n                                    ...state.Game.SceneList[vID].Symbols[vKEY].Corect,\r\n                                    Name:Name\r\n                                }\r\n                            }\r\n                        },\r\n                    }\r\n                }\r\n            },\r\n            \r\n        }\r\n\r\n}\r\nfunction InputSymID(state, action){\r\n    let vID=action.paylot.vID, vKEY=action.paylot.vKEY, targetV=action.paylot.targetV.target.value\r\n    let Id = state.Game.SceneList[vID].Symbols[vKEY].Corect.Id\r\n    \r\n    if(!/^[A-Za-z0-9_.]+$/gi.test(targetV)){\r\n        Id=false\r\n        \r\n    }\r\n    else{\r\n        Id=true\r\n    }    \r\n    return {\r\n            ...state,\r\n            Game:{\r\n                ...state.Game,\r\n                SceneList:{\r\n                    ...state.Game.SceneList,\r\n                    [vID]:{\r\n                        ...state.Game.SceneList[vID],\r\n                        \r\n                        Symbols:{\r\n                            ...state.Game.SceneList[vID].Symbols,\r\n                            [vKEY]:{\r\n                                ...state.Game.SceneList[vID].Symbols[vKEY],\r\n                                id:targetV,\r\n                                Corect:{\r\n                                    ...state.Game.SceneList[vID].Symbols[vKEY].Corect,\r\n                                    Id:Id\r\n                                }\r\n                            }\r\n                        },\r\n                    }\r\n                }\r\n            },\r\n            \r\n        }\r\n\r\n}\r\nfunction InputSymPayT(state, action){\r\n    let vID=action.paylot.vID, vKEY=action.paylot.vKEY, num\r\n    let vKEY1=action.paylot.vKEY1, targetV=action.paylot.targetV.target.value\r\n    if(targetV!=\"\"){\r\n             num = parseInt(targetV.replace(/\\D+/g,\"\"))\r\n             if(isNaN(num)){\r\n                num = \"\"\r\n                \r\n              }\r\n    }\r\n    else{\r\n        num=\"\"\r\n    }\r\n    \r\n        return {\r\n            ...state,\r\n            Game:{\r\n                ...state.Game,\r\n                SceneList:{\r\n                    ...state.Game.SceneList,\r\n                    [vID]:{\r\n                        ...state.Game.SceneList[vID],\r\n                        \r\n                        Symbols:{\r\n                            ...state.Game.SceneList[vID].Symbols,\r\n                            [vKEY]:{\r\n                                ...state.Game.SceneList[vID].Symbols[vKEY],\r\n                                Paytable:{\r\n                                    ...state.Game.SceneList[vID].Symbols[vKEY].Paytable,\r\n                                    [vKEY1]:num\r\n                                }\r\n                            }\r\n                        },\r\n                    }\r\n                }\r\n            },\r\n            \r\n        }\r\n\r\n}\r\n\r\nfunction InputSymSub(state, action){\r\n    let vID=action.paylot.vID, vKEY=action.paylot.vKEY\r\n    let vKEY1=action.paylot.vKEY1\r\n    let targetV=!state.Game.SceneList[vID].Symbols[vKEY].Substiture[vKEY1].value\r\n    \r\n    \r\n    \r\n        return {\r\n            ...state,\r\n            Game:{\r\n                ...state.Game,\r\n                SceneList:{\r\n                    ...state.Game.SceneList,\r\n                    [vID]:{\r\n                        ...state.Game.SceneList[vID],\r\n                        \r\n                        Symbols:{\r\n                            ...state.Game.SceneList[vID].Symbols,\r\n                            [vKEY]:{\r\n                                ...state.Game.SceneList[vID].Symbols[vKEY],\r\n                                Substiture:{\r\n                                    ...state.Game.SceneList[vID].Symbols[vKEY].Substiture,\r\n                                    [vKEY1]:{\r\n                                       ...state.Game.SceneList[vID].Symbols[vKEY].Substiture[vKEY1],\r\n                                       value:targetV \r\n                                    }\r\n                                }\r\n                                \r\n                            },\r\n                            [vKEY1]:{\r\n                                ...state.Game.SceneList[vID].Symbols[vKEY1],\r\n                                Substiture:{\r\n                                    ...state.Game.SceneList[vID].Symbols[vKEY1].Substiture,\r\n                                    [vKEY]:{\r\n                                       ...state.Game.SceneList[vID].Symbols[vKEY1].Substiture[vKEY],\r\n                                       value:targetV \r\n                                    }\r\n                                }\r\n                                \r\n                            }\r\n                        },\r\n                    }\r\n                }\r\n            },\r\n            \r\n        }\r\n\r\n}\r\nfunction InputSymSpec(state, action){\r\n    let vID=action.paylot.vID, vKEY=action.paylot.vKEY\r\n    let vKEY1=action.paylot.vKEY1\r\n    let targetV=!state.Game.SceneList[vID].Symbols[vKEY].Special[vKEY1]\r\n    let Wild, Scatter\r\n    \r\n    \r\n        return {\r\n            ...state,\r\n            Game:{\r\n                ...state.Game,\r\n                SceneList:{\r\n                    ...state.Game.SceneList,\r\n                    [vID]:{\r\n                        ...state.Game.SceneList[vID],\r\n                        Wild:Wild,\r\n                        Scatter:Scatter,\r\n                        Symbols:{\r\n                            ...state.Game.SceneList[vID].Symbols,\r\n                            [vKEY]:{\r\n                                ...state.Game.SceneList[vID].Symbols[vKEY],\r\n                                Special:{\r\n                                    ...state.Game.SceneList[vID].Symbols[vKEY].Special,\r\n                                    [vKEY1]:targetV \r\n                                }\r\n                                \r\n                            }\r\n                        },\r\n                    }\r\n                }\r\n            },\r\n            \r\n        }\r\n\r\n}\r\nfunction InputSymReel(state, action){\r\n    let vID=action.paylot.vID, vKEY=action.paylot.vKEY, num\r\n    let vKEY1=action.paylot.vKEY1, targetV=action.paylot.targetV.target.value\r\n    if(targetV!=\"\"){\r\n             num = parseInt(targetV.replace(/\\D+/g,\"\"))\r\n             if(isNaN(num)){\r\n                num = \"\"\r\n                \r\n              }\r\n    }\r\n    else{\r\n        num=\"\"\r\n    }\r\n    \r\n        return {\r\n            ...state,\r\n            Game:{\r\n                ...state.Game,\r\n                SceneList:{\r\n                    ...state.Game.SceneList,\r\n                    [vID]:{\r\n                        ...state.Game.SceneList[vID],\r\n                        \r\n                        Symbols:{\r\n                            ...state.Game.SceneList[vID].Symbols,\r\n                            [vKEY]:{\r\n                                ...state.Game.SceneList[vID].Symbols[vKEY],\r\n                                Reelstrip:{\r\n                                    ...state.Game.SceneList[vID].Symbols[vKEY].Reelstrip,\r\n                                    [vKEY1]:num\r\n                                }\r\n                            }\r\n                        },\r\n                    }\r\n                }\r\n            },\r\n            \r\n        }\r\n\r\n}\r\n function InputNumberIfFreespin(state, action){\r\n    let vID=action.paylot.vID, vKEY=action.paylot.vKEY, targetV=action.paylot.targetV.target.value, num\r\n    if(targetV!=\"\"){\r\n             num = parseInt(targetV.replace(/\\D+/g,\"\"))\r\n             if(isNaN(num)){\r\n                num = \"\"\r\n                \r\n              }\r\n    }\r\n    else{\r\n        num=\"\"\r\n    }\r\n    return{\r\n        ...state,\r\n            Game:{\r\n                ...state.Game,\r\n                SceneList:{\r\n                    ...state.Game.SceneList,\r\n                    [vID]:{\r\n                        ...state.Game.SceneList[vID],\r\n                        NumberIfFreespin:{\r\n                            ...state.Game.SceneList[vID].NumberIfFreespin,\r\n                            [vKEY]:num\r\n                        }\r\n                        \r\n                    }\r\n                }\r\n            },\r\n    }\r\n }\r\n function InputFreesG(state, action){\r\n     \r\n    let vID=action.paylot.vID, targetV=action.paylot.targetV.target.value\r\n    \r\n    return{\r\n        ...state,\r\n            Game:{\r\n                ...state.Game,\r\n                SceneList:{\r\n                    ...state.Game.SceneList,\r\n                    [vID]:{\r\n                        ...state.Game.SceneList[vID],\r\n                        FreespinGame:targetV\r\n                        \r\n                    }\r\n                }\r\n            },\r\n    }\r\n }\r\nexport {InputFreesG, InputNumberIfFreespin,InputFid, InputFN, InputSN, InputGT, InputNOR, InputSymN, InputSymID, InputSymPayT, InputSymSub, InputSymSpec, InputSymReel}","import {keys} from \"lodash\"\r\nimport {omit} from 'lodash'\r\n\r\nfunction DeleteScene(state, action){\r\n    if(keys(state.BookmarkList).length==1){\r\n                let sceneList=state.Game.SceneList\r\n                let bookmarkList=state.BookmarkList\r\n                let screnList=state.ScrenList\r\n                sceneList={\r\n                    ...omit(state.Game.SceneList,action.paylot)\r\n                }\r\n                bookmarkList={\r\n                    ...omit(state.BookmarkList,action.paylot)\r\n                }\r\n                screnList={\r\n                    ...omit(state.ScrenList,action.paylot)\r\n                }\r\n                sceneList={\r\n                    0:{\r\n                        id:\"0\",\r\n                        SceneName : \"SceneName_\"+0,\r\n                        GameType : \"Slot\",\r\n                        NumberOfReels:5,\r\n                        Reels : {\r\n                            1:{\r\n                                name:\"Reel1\"\r\n                            },\r\n                            2:{\r\n                                name:\"Reel1\"\r\n                            },\r\n                            3:{\r\n                                name:\"Reel1\"\r\n                            },\r\n                            4:{\r\n                                name:\"Reel1\"\r\n                            },\r\n                            5:{\r\n                                name:\"Reel1\"\r\n                            },\r\n                        },\r\n\r\n                        ScernTypeOfConf:{\r\n                            Symbols:false,\r\n                            Paytable:false,\r\n                            Substitutes:false,\r\n                            Special:false,\r\n                            Reelstrip:false,\r\n                            NumberIfFreespin:false,\r\n                            AllInfo:false\r\n                        },\r\n                        SlectedScernTypeOfConf:\"\",\r\n                        Symbols:{\r\n                            \r\n                        },\r\n                        Log:{\r\n                            \r\n                        },\r\n                        Wild:false,\r\n                        Scatter:false,\r\n                        FreespinGame:0,\r\n                        NumberIfFreespin:{},\r\n                        TotalRTP: \"0\",\r\n                        BaseGameRTP: \"0\",\r\n                        FreespinsRTP: \"0\",\r\n                        BonusGameRTP: \"0\",\r\n                        BasegameHitRate: \"0\",\r\n                        HitRate:{},\r\n                        Combinations:{},\r\n                        Returns:{}\r\n                    }\r\n                }\r\n                bookmarkList={\r\n                    ...state.bookmarkList,\r\n                        0:{\r\n                            Id:\"\"+0+\"\",\r\n                            backg:\"green\"\r\n                        },\r\n                }\r\n                screnList={\r\n                    ...state.screnList,\r\n                    0:{\r\n                        Id:\"\"+0+\"\",\r\n                        display:\"flex\"\r\n                    },\r\n                }\r\n                let reels=sceneList[0].Reels\r\n                for(let i = 1;i<=keys(reels).length;i++){\r\n                    \r\n                        \r\n                            \r\n                                sceneList={\r\n                                    ...sceneList,\r\n                                        [0]:{\r\n                                            ...sceneList[0],\r\n                                            NumberIfFreespin:{\r\n                                                ...sceneList[0].NumberIfFreespin,\r\n                                                [i]:0\r\n                                            },\r\n                                        }  \r\n                                }\r\n                        \r\n                    \r\n                }\r\n                return{\r\n                    ...state,\r\n                    Game:{\r\n                        ...state.Game,\r\n                        SceneList:{\r\n                            ...sceneList\r\n                        }\r\n                    \r\n                    },\r\n                    BookmarkList:{\r\n                        ...bookmarkList\r\n                    },\r\n                    ScrenList:{\r\n                        ...screnList\r\n                    },\r\n                    BookmarkOn:0\r\n                }\r\n        }\r\n         else{\r\n             let k = keys(omit(state.ScrenList,action.paylot))[0]\r\n             let State = {...state}\r\n             \r\n             for(let i = 0;i<keys(State.Game.SceneList).length;i++){\r\n                 if(keys(State.Game.SceneList)[i]!=action.paylot){\r\n                     if(State.Game.SceneList[keys(State.Game.SceneList)[i]].FreespinGame==action.paylot){\r\n                         \r\n                        State={\r\n                            ...State,\r\n                            Game:{\r\n                                ...State.Game,\r\n                                SceneList:{\r\n                                    ...State.Game.SceneList,\r\n                                    [keys(State.Game.SceneList)[i]]:{\r\n                                        ...State.Game.SceneList[keys(State.Game.SceneList)[i]],\r\n                                        FreespinGame:Number(keys(State.Game.SceneList)[i])\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                     }\r\n                 }\r\n             }\r\n             \r\n             State={\r\n                ...State,\r\n                Game:{\r\n                    ...State.Game,\r\n                    SceneList:{\r\n                        \r\n                        ...omit(State.Game.SceneList,action.paylot),\r\n                        \r\n                    }\r\n                    \r\n                },\r\n                BookmarkList:{\r\n                    \r\n                    ...omit(State.BookmarkList,action.paylot),\r\n                    [k]:{\r\n                        Id:\"\"+k+\"\",\r\n                        backg:\"green\"\r\n                    },\r\n                },\r\n                ScrenList:{\r\n                    \r\n                    ...omit(State.ScrenList,action.paylot),\r\n                    [k]:{\r\n                        Id:\"\"+k+\"\",\r\n                        display:\"flex\"\r\n                    },\r\n                },\r\n                BookmarkOn:k\r\n            }\r\n            \r\n            return{\r\n                ...State\r\n            }\r\n         }\r\n}\r\n\r\nexport {DeleteScene}","import {keys} from \"lodash\"\r\nimport {omit} from 'lodash'\r\n\r\nfunction Select(state, action){\r\n    \r\n    if(state.BookmarkOn!=action.paylot)\r\n    return{\r\n        ...state,\r\n        ScrenList:{\r\n            ...state.ScrenList,\r\n                [action.paylot]:{\r\n                    Id:\"\"+action.paylot+\"\",\r\n                    display:\"flex\"\r\n                },\r\n                [state.BookmarkOn]:{\r\n                    Id:\"\"+[state.BookmarkOn]+\"\",\r\n                    display:\"none\"\r\n                },\r\n            },\r\n        BookmarkList:{\r\n                ...state.BookmarkList,\r\n                    [action.paylot]:{\r\n                        Id:\"\"+action.paylot+\"\",\r\n                        backg:\"green\"\r\n                    },\r\n                    [state.BookmarkOn]:{\r\n                        Id:\"\"+[state.BookmarkOn]+\"\",\r\n                        backg:\"white\"\r\n                    },\r\n        },\r\n        BookmarkOn:action.paylot\r\n    }\r\n    else{\r\n        return{\r\n            ...state\r\n        }\r\n    }\r\n}\r\n\r\nfunction SelectMC(state, action){\r\n    \r\n    let v, s=action.paylot.v1, s2=\"\"\r\n    switch(action.paylot.v1){\r\n        case \"Symbols\":{\r\n            \r\n            if(state.Game.SceneList[action.paylot.v2].ScernTypeOfConf.Symbols){\r\n                s2=\"\"\r\n                v=false\r\n            }\r\n            else{\r\n                if(state.Game.SceneList[action.paylot.v2].SlectedScernTypeOfConf!=\"Symbols\")\r\n                    s2=state.Game.SceneList[action.paylot.v2].SlectedScernTypeOfConf\r\n                v=true\r\n            }\r\n            break\r\n        }\r\n        case \"Paytable\":{\r\n            if(state.Game.SceneList[action.paylot.v2].ScernTypeOfConf.Paytable){\r\n                s2=\"\"\r\n                v=false\r\n            }\r\n            else{\r\n                if(state.Game.SceneList[action.paylot.v2].SlectedScernTypeOfConf!=\"Paytable\")\r\n                    s2=state.Game.SceneList[action.paylot.v2].SlectedScernTypeOfConf\r\n                v=true\r\n            }\r\n            break\r\n        }\r\n        case \"Substiture\":{\r\n            if(state.Game.SceneList[action.paylot.v2].ScernTypeOfConf.Substiture){\r\n                s2=\"\"\r\n                v=false\r\n            }\r\n            else{\r\n                if(state.Game.SceneList[action.paylot.v2].SlectedScernTypeOfConf!=\"Substiture\")\r\n                    s2=state.Game.SceneList[action.paylot.v2].SlectedScernTypeOfConf\r\n                v=true\r\n            }\r\n            break\r\n        }\r\n        case \"Special\":{\r\n            if(state.Game.SceneList[action.paylot.v2].ScernTypeOfConf.Special){\r\n                s2=\"\"\r\n                v=false\r\n            }\r\n            else{\r\n                if(state.Game.SceneList[action.paylot.v2].SlectedScernTypeOfConf!=\"Special\")\r\n                    s2=state.Game.SceneList[action.paylot.v2].SlectedScernTypeOfConf\r\n                v=true\r\n            }\r\n            break\r\n        }\r\n        case \"Reelstrip\":{\r\n            if(state.Game.SceneList[action.paylot.v2].ScernTypeOfConf.Reelstrip){\r\n                s2=\"\"\r\n                v=false\r\n            }\r\n            else{\r\n                if(state.Game.SceneList[action.paylot.v2].SlectedScernTypeOfConf!=\"Reelstrip\")\r\n                    s2=state.Game.SceneList[action.paylot.v2].SlectedScernTypeOfConf\r\n                v=true\r\n            }\r\n            break\r\n        }\r\n        case \"NumberIfFreespin\":{\r\n            if(state.Game.SceneList[action.paylot.v2].ScernTypeOfConf.NumberIfFreespin){\r\n                s2=\"\"\r\n                v=false\r\n            }\r\n            else{\r\n                if(state.Game.SceneList[action.paylot.v2].SlectedScernTypeOfConf!=\"NumberIfFreespin\")\r\n                    s2=state.Game.SceneList[action.paylot.v2].SlectedScernTypeOfConf\r\n                v=true\r\n            }\r\n            break\r\n        }\r\n    }\r\n    if(s!=s2) \r\n    if(state.Game.SceneList[action.paylot.v2].SlectedScernTypeOfConf!=\"\") \r\n    return{\r\n        ...state,\r\n        Game:{\r\n            ...state.Game,\r\n            SceneList:{\r\n                ...state.Game.SceneList,\r\n                [action.paylot.v2]:{\r\n                    ...state.Game.SceneList[action.paylot.v2],\r\n                    \r\n                    ScernTypeOfConf:{\r\n                        ...state.Game.SceneList[action.paylot.v2].ScernTypeOfConf,\r\n                        [s]:v,\r\n                        [s2]:!v,\r\n                    },\r\n                    SlectedScernTypeOfConf:action.paylot.v1\r\n                }\r\n            }\r\n        },\r\n        \r\n    }\r\n    else\r\n    return{\r\n        ...state,\r\n        Game:{\r\n            ...state.Game,\r\n            SceneList:{\r\n                ...state.Game.SceneList,\r\n                [action.paylot.v2]:{\r\n                    ...state.Game.SceneList[action.paylot.v2],\r\n                    \r\n                    ScernTypeOfConf:{\r\n                        ...state.Game.SceneList[action.paylot.v2].ScernTypeOfConf,\r\n                        [s]:v,\r\n                        \r\n                    },\r\n                    SlectedScernTypeOfConf:action.paylot.v1\r\n                }\r\n            }\r\n        },\r\n        \r\n    }\r\n    return{\r\n        ...state,\r\n        Game:{\r\n            ...state.Game,\r\n            SceneList:{\r\n                ...state.Game.SceneList,\r\n                [action.paylot.v2]:{\r\n                    ...state.Game.SceneList[action.paylot.v2],\r\n                    \r\n                    ScernTypeOfConf:{\r\n                        ...state.Game.SceneList[action.paylot.v2].ScernTypeOfConf,\r\n                        [s]:v,\r\n                        \r\n                    },\r\n                    SlectedScernTypeOfConf:\"\"\r\n                }\r\n            }\r\n        },\r\n        \r\n    }\r\n}\r\nfunction SelectAI(state, action){\r\n    return{\r\n        ...state,\r\n        Game:{\r\n            ...state.Game,\r\n            SceneList:{\r\n                ...state.Game.SceneList,\r\n                [action.paylot]:{\r\n                    ...state.Game.SceneList[action.paylot],\r\n                    \r\n                    ScernTypeOfConf:{\r\n                        ...state.Game.SceneList[action.paylot].ScernTypeOfConf,\r\n                        AllInfo:!state.Game.SceneList[action.paylot].ScernTypeOfConf.AllInfo,\r\n                        \r\n                    }\r\n                }\r\n            }\r\n        },\r\n        \r\n    }\r\n}\r\nexport {Select, SelectMC, SelectAI}","import {keys} from \"lodash\"\r\nimport {omit} from 'lodash'\r\n\r\nfunction StartReset(state, action){\r\n    if(state.FirstBut==\"Start\"){\r\n        return{\r\n            ...state,\r\n            FirstBut:\"Reset\"\r\n        }\r\n    }\r\n    else{\r\n        return{\r\n            \r\n            \r\n            \r\n            FirstBut:\"Start\",\r\n            FirstInputId:\"\",\r\n            FirstInputName:\"\",\r\n            Validation:{\r\n                FirstInputName:true,\r\n                FirstInputId:true\r\n            },\r\n            Void:{\r\n                TypeOfVoid:\"\",\r\n                value:\"\",\r\n                text:\"\"\r\n            },\r\n            NoneFilde:false\r\n        }\r\n    }\r\n\r\n}\r\nexport {StartReset}","import {keys} from \"lodash\"\r\nimport {omit} from 'lodash'\r\n\r\nfunction AddSymbol(state, action){\r\n    \r\n    let Subst={}\r\n    let Reel={}\r\n    \r\n    let N=0\r\n    let symbols=state.Game.SceneList[action.paylot].Symbols\r\n    let masKey=keys(symbols)\r\n    \r\n    if(keys(state.Game.SceneList[action.paylot].Symbols).length==0)\r\n    {\r\n        \r\n        \r\n        \r\n        for(let i = 0;i<state.Game.SceneList[action.paylot].NumberOfReels;i++){\r\n            Reel={\r\n                ...Reel,\r\n                [i+1]:0\r\n            }\r\n            \r\n        }\r\n        symbols={\r\n            \r\n            [N]:{\r\n                name:\"Symbol_\"+N,\r\n                id:\"s\"+N+\"w\",\r\n                Paytable:{\r\n                    ...Reel\r\n                },\r\n                Substiture:{\r\n                    [N]:{\r\n                        id:N,\r\n                        value:false\r\n                    }\r\n                   \r\n                },\r\n                Special:{\r\n                    isWild:false,\r\n                    isScatter:false,\r\n                    isSpecific:false\r\n                },\r\n                Reelstrip:{\r\n                    ...Reel\r\n                },\r\n                Corect:{\r\n                    Name:true,\r\n                    Id:true\r\n                },\r\n            },\r\n            \r\n        }\r\n        \r\n    }\r\n        \r\n    else\r\n        {\r\n            \r\n            let C = false\r\n            while(!C){\r\n                \r\n                C=true;\r\n                for(let i = 0;i<keys(state.Game.SceneList[action.paylot].Symbols).length;i++)\r\n            \r\n                {\r\n                    if(N==keys(state.Game.SceneList[action.paylot].Symbols)[i])\r\n                    C=false;\r\n                }\r\n                if(!C)\r\n                    N++;\r\n            \r\n            }\r\n            \r\n            \r\n            \r\n            for(let i = 0;i<state.Game.SceneList[action.paylot].NumberOfReels;i++){\r\n                Reel={\r\n                    ...Reel,\r\n                    [i+1]:0\r\n                }\r\n            }\r\n                \r\n            \r\n            for(var i = 0;i<masKey.length+1;i++)\r\n            {\r\n                if(i<masKey.length)\r\n                symbols={\r\n                    ...symbols,\r\n                    [masKey[i]]:{\r\n                        ...symbols[masKey[i]],\r\n                        Substiture:{\r\n                            ...symbols[masKey[i]].Substiture,\r\n                            [N]:{\r\n                                id:N,\r\n                                value:false\r\n                            }\r\n                            \r\n                        }\r\n                    }\r\n                }\r\n                \r\n                \r\n            }\r\n            for(let i=0;i<=masKey.length;i++){\r\n                if(i!=masKey.length){\r\n                    Subst={\r\n                        ...Subst,\r\n                        [masKey[i]]:{\r\n                            id:masKey[i],\r\n                            value:false\r\n                        }\r\n                    }\r\n                }\r\n                else{\r\n                    Subst={\r\n                        ...Subst,\r\n                        [N]:{\r\n                            id:[N],\r\n                            value:false\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            symbols={\r\n              ...symbols,\r\n              [N]:{\r\n                name:\"Symbol_\"+N,\r\n                id:\"s\"+N+\"w\",\r\n                Paytable:{\r\n                    ...Reel,\r\n                },\r\n                Substiture:{\r\n                    ...Subst\r\n                },\r\n                Special:{\r\n                    isWild:false,\r\n                    isScatter:false,\r\n                    isSpecific:false\r\n                },\r\n                Reelstrip:{\r\n                    ...Reel\r\n                },\r\n                Corect:{\r\n                    Name:true,\r\n                    Id:true\r\n                },\r\n              }\r\n            }\r\n            \r\n        }\r\n    return {\r\n        ...state,\r\n        Game:{\r\n            ...state.Game,\r\n            SceneList:{\r\n                ...state.Game.SceneList,\r\n                [action.paylot]:{\r\n                    ...state.Game.SceneList[action.paylot],\r\n                    \r\n                    Symbols:{\r\n                        ...symbols\r\n                    },\r\n                }\r\n            }\r\n        },\r\n        \r\n    }\r\n}\r\n\r\nexport {AddSymbol}","import {keys} from \"lodash\"\r\nimport {omit} from 'lodash'\r\n\r\nfunction DeleteSymbol(state, action){\r\n    let symbols = state.Game.SceneList[action.paylot.v1].Symbols\r\n    \r\n    \r\n    symbols={\r\n        \r\n        ...omit(symbols,action.paylot.v2)\r\n    }\r\n    let sarray=keys(symbols)\r\n    \r\n    \r\n    \r\n    for(let i = 0;i<sarray.length;i++){\r\n        \r\n       \r\n        symbols={\r\n            ...symbols,\r\n            [sarray[i]]:{\r\n                ...symbols[sarray[i]],\r\n                Substiture:{\r\n                    ...omit(symbols[sarray[i]].Substiture, action.paylot.v2)\r\n\r\n                }\r\n            }\r\n        }\r\n       \r\n        \r\n    }\r\n    \r\n    \r\n    return {\r\n        ...state,\r\n        Game:{\r\n            ...state.Game,\r\n            SceneList:{\r\n                ...state.Game.SceneList,\r\n                [action.paylot.v1]:{\r\n                    ...state.Game.SceneList[action.paylot.v1],\r\n                    \r\n                    Symbols:{\r\n                        \r\n                        ...symbols\r\n                    },\r\n                }\r\n            }\r\n        },\r\n        \r\n    }\r\n}\r\nexport {DeleteSymbol}","import {keys} from \"lodash\"\r\nimport {omit} from 'lodash'\r\n\r\n\r\nfunction WorkWithReels(state, action){\r\n    let MasKey=keys(action.paylot)\r\n    let KeySc\r\n    let WorkType=false\r\n    let RTP_base = 0\r\n    let FreeGame = 0\r\n    let RTP = 0\r\n    let HitRate=0\r\n    \r\n    for(let i = 0;i<keys(action.paylot).length;i++){\r\n        if(MasKey[i]==\"vID\"){\r\n            KeySc=action.paylot.vID\r\n            \r\n            break\r\n        }\r\n         else if(MasKey[i]==\"v2\"){\r\n            \r\n            KeySc=action.paylot.v2\r\n            for(let i = 0;i<keys(action.paylot).length;i++){\r\n                if(MasKey[i]==\"ReelSize\"){\r\n                    WorkType=\"ReelSize\"\r\n                }\r\n            }\r\n        }\r\n        \r\n        else if(MasKey.length==1){\r\n            \r\n            KeySc=action.paylot\r\n        }\r\n    }\r\n    \r\n    let scene=state.Game.SceneList[KeySc]\r\n    let symbols = state.Game.SceneList[KeySc].Symbols\r\n    let reels=scene.Reels\r\n    if(WorkType==\"ReelSize\"){\r\n        \r\n        let Nof = action.paylot.v3\r\n        let nValue = parseInt((action.paylot.v1+\" \").replace(/\\D+/g,\"\"))\r\n        \r\n        if(isNaN(nValue)){\r\n            \r\n            reels={}\r\n        }\r\n        else if(keys(reels).length==0){\r\n\r\n            for(let i = 1;i<=nValue;i++){\r\n                \r\n                    reels={\r\n                \r\n                        ...reels,\r\n                        [i]:{\r\n                            name:\"Reel\"+[i],\r\n                            symbols:{\r\n                                ...symbols\r\n                            },\r\n                            NumS:0,\r\n                            NumW:0\r\n                        }\r\n                    }\r\n                \r\n            }\r\n        }\r\n        else{\r\n           \r\n            if(nValue<Nof){\r\n                \r\n                for(let i = nValue+1;i<=Nof;i++){\r\n                    for(let a = 0;a<keys(reels).length;a++){\r\n                    \r\n                        reels={\r\n                        \r\n                            ...omit(reels, i)\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            else if(nValue>Nof){\r\n            \r\n                    for(let i = Nof+1;i<=nValue;i++){\r\n                        for(let a = 0;a<keys(reels).length;a++){\r\n                            reels={\r\n                        \r\n                                ...reels,\r\n                                [i]:{\r\n                                    name:\"Reel\"+[i],\r\n                                    symbols:{\r\n                                        ...symbols\r\n                                    },\r\n                                    NumS:0,\r\n                                    NumW:0\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n            } \r\n        }\r\n       \r\n    }\r\n    else{\r\n        for(let i = 1;i<=keys(reels).length;i++){\r\n            \r\n            reels={     \r\n                ...reels,\r\n                [i]:{\r\n                    name:\"Reel\"+[i],\r\n                    symbols:{\r\n                        ...symbols\r\n                    },\r\n                    NumS:0,\r\n                    NumW:0,\r\n                    NumSc:0\r\n                }\r\n            }\r\n        }\r\n    }\r\n    if(keys(symbols).length!=0){\r\n        \r\n        let wild=undefined\r\n        for(let i=0;i<keys(symbols).length;i++){\r\n            if(symbols[keys(symbols)[i]].Special[\"isWild\"]){\r\n                wild=keys(symbols)[i]\r\n                break\r\n            }\r\n        }\r\n        for(let i = 1;i<=keys(reels).length;i++){\r\n            for(let a = 0;a<keys(symbols).length;a++){\r\n                if(symbols[keys(symbols)[a]].Reelstrip[i]==0){\r\n                    \r\n                    reels={\r\n                        ...reels,\r\n                        [i]:{\r\n                            ...reels[i],\r\n                            NumS:reels[i].NumS,\r\n                            NumW:reels[i].NumW,\r\n                            NumSc:reels[i].NumSc\r\n                        }\r\n                        \r\n                    }\r\n                }\r\n                else if(symbols[keys(symbols)[a]].Reelstrip[i]==\"\"){\r\n                    reels={\r\n                        ...reels,\r\n                        [i]:{\r\n                            ...reels[i],\r\n                            NumS:reels[i].NumS,\r\n                            NumW:reels[i].NumW,\r\n                            NumSc:reels[i].NumSc\r\n                        }\r\n                        \r\n                    }\r\n                }\r\n                else if(symbols[keys(symbols)[a]].Reelstrip[i]==undefined){\r\n                    reels={\r\n                        ...reels,\r\n                        [i]:{\r\n                            ...reels[i],\r\n                            NumS:reels[i].NumS,\r\n                            NumW:reels[i].NumW,\r\n                            NumSc:reels[i].NumSc\r\n                        }\r\n                        \r\n                    }\r\n                }\r\n                else{\r\n                   \r\n                    reels={\r\n                        ...reels,\r\n                        [i]:{\r\n                            ...reels[i],\r\n                            NumS:reels[i].NumS+symbols[keys(symbols)[a]].Reelstrip[i],\r\n                            NumW:symbols[keys(symbols)[a]].Special.isWild?reels[i].NumW+symbols[keys(symbols)[a]].Reelstrip[i]:reels[i].NumW,\r\n                            NumSc:reels[i].symbols[keys(symbols)[a]].Special.isScatter?reels[i].NumSc+symbols[keys(symbols)[a]].Reelstrip[i]:reels[i].NumSc,\r\n                        }\r\n                        \r\n                    }\r\n                }\r\n            }\r\n        }\r\n        \r\n        for(let a=1;a<=keys(reels).length;a++){\r\n            reels={\r\n                ...reels,\r\n                [a]:{\r\n                    ...reels[a],\r\n                    ScInReel:reels[a].NumSc*1\r\n                }\r\n            },\r\n            reels={\r\n                ...reels,\r\n                [a]:{\r\n                    ...reels[a],\r\n                    p_Sc:reels[a].ScInReel!=0?reels[a].ScInReel/reels[a].NumS:0,\r\n                    p_no_Sc:reels[a].ScInReel!=0?1-reels[a].ScInReel/reels[a].NumS:1\r\n                    \r\n                }\r\n            }\r\n            \r\n            for (let i = 0; i<keys(symbols).length;i++){    \r\n                    let check=true\r\n                    let SubArray = keys(reels[a].symbols[keys(symbols)[i]].Substiture)\r\n                    \r\n                    for(let o = 0;o<SubArray.length;o++){\r\n                        \r\n                        if(reels[a].symbols[SubArray[o]].Special[\"isWild\"]&&reels[a].symbols[keys(symbols)[i]].Substiture[SubArray[o]].value){\r\n                            \r\n                            check=false\r\n                        }\r\n                    }\r\n                    if(check)\r\n                        reels={\r\n                            ...reels,\r\n                            [a]:{\r\n                                ...reels[a],\r\n                                symbols:{\r\n                                    ...reels[a].symbols,\r\n                                    [keys(symbols)[i]]:{\r\n                                        ...reels[a].symbols[keys(symbols)[i]],\r\n                                        Num:reels[a].symbols[keys(symbols)[i]].Reelstrip[a],\r\n                                        NumInreel:reels[a].symbols[keys(symbols)[i]].Reelstrip[a]!=0?reels[a].symbols[keys(symbols)[i]].Reelstrip[a]/reels[a].NumS:0,\r\n                                        NumNoreel:reels[a].symbols[keys(symbols)[i]].Reelstrip[a]!=0?1-(reels[a].symbols[keys(symbols)[i]].Reelstrip[a]/reels[a].NumS):1,\r\n                                        NumZW:reels[a].symbols[keys(symbols)[i]].Reelstrip[a],\r\n                                        NumInreelZW:reels[a].symbols[keys(symbols)[i]].Reelstrip[a]!=0?reels[a].symbols[keys(symbols)[i]].Reelstrip[a]/reels[a].NumS:0,\r\n                                        NumNoreelZW:reels[a].symbols[keys(symbols)[i]].Reelstrip[a]!=0?1-(reels[a].symbols[keys(symbols)[i]].Reelstrip[a]/reels[a].NumS):1,\r\n                                        IsWithWild:false\r\n                                    }\r\n\r\n                                }\r\n                            }\r\n                        }\r\n                    else\r\n                        reels={\r\n                            ...reels,\r\n                            [a]:{\r\n                                ...reels[a],\r\n                                symbols:{\r\n                                    ...reels[a].symbols,\r\n                                    [keys(symbols)[i]]:{\r\n                                        ...reels[a].symbols[keys(symbols)[i]],\r\n                                        Num:reels[a].symbols[keys(symbols)[i]].Reelstrip[a],\r\n                                        NumInreel:reels[a].symbols[keys(symbols)[i]].Reelstrip[a]!=0?reels[a].symbols[keys(symbols)[i]].Reelstrip[a]/reels[a].NumS:0,\r\n                                        NumNoreel:reels[a].symbols[keys(symbols)[i]].Reelstrip[a]!=0?1-(reels[a].symbols[keys(symbols)[i]].Reelstrip[a]/reels[a].NumS):1,\r\n                                        NumZW:reels[a].symbols[keys(symbols)[i]].Reelstrip[a]+reels[a].NumW,\r\n                                        NumInreelZW:reels[a].symbols[keys(symbols)[i]].Reelstrip[a]!=0?(reels[a].symbols[keys(symbols)[i]].Reelstrip[a]+reels[a].NumW)/reels[a].NumS:0,\r\n                                        NumNoreelZW:reels[a].symbols[keys(symbols)[i]].Reelstrip[a]!=0?1-((reels[a].symbols[keys(symbols)[i]].Reelstrip[a]+reels[a].NumW)/reels[a].NumS):1,\r\n                                        IsWithWild:true\r\n                                    }\r\n\r\n                                }\r\n                            }\r\n                        }     \r\n            }\r\n\r\n        }\r\n        let p_Sc_win={\r\n\r\n        }\r\n        for(let i = 1;i<=keys(reels).length;i++){\r\n            let ArrNoKay = [ ]\r\n            \r\n            if(i!=keys(reels).length){\r\n                for(let a = 0;a<keys(reels).length-i;a++){\r\n                    ArrNoKay[a]=Number(keys(reels)[a])\r\n                }\r\n                p_Sc_win={\r\n                    ...p_Sc_win,\r\n                    [i]:0\r\n                }\r\n                let las = ArrNoKay.length-1, start = true, k=ArrNoKay.length-2, mul\r\n                if(ArrNoKay.length!=1&&ArrNoKay.length!=2){\r\n                    while(start){\r\n                        \r\n                        mul=1\r\n                        for(let c = 0;c<keys(reels).length;c++){\r\n                            let check1=true\r\n                            for(let v = 0;v<ArrNoKay.length;v++){\r\n                                if(keys(reels)[c]==ArrNoKay[v])\r\n                                    check1=false\r\n                            }\r\n                            if(check1){\r\n                                mul=mul*reels[(keys(reels)[c])].p_Sc\r\n                                \r\n                            }\r\n                            else{\r\n                                mul=mul*reels[(keys(reels)[c])].p_no_Sc\r\n                                \r\n                            }\r\n                            \r\n                        }\r\n                        \r\n                        p_Sc_win={\r\n                            ...p_Sc_win,\r\n                            [i]:p_Sc_win[i]+mul\r\n                                \r\n                            \r\n                        }\r\n                       \r\n                        \r\n                        ArrNoKay[las]++;\r\n                        if(ArrNoKay[las]>keys(reels).length){\r\n                            if((Number(ArrNoKay[las]-2)==Number(ArrNoKay[k]))){\r\n                                let start2 = true\r\n                                while(start2){\r\n                                    if(ArrNoKay[k-1]!=undefined){\r\n                                        if(Number(ArrNoKay[k]-1)!=Number(ArrNoKay[k-1])){\r\n                                            let temp = Number(ArrNoKay[k-1])\r\n                                            \r\n                                            for(let q = k-1, m=1;q<ArrNoKay.length;q++,m++){\r\n                                                \r\n                                                ArrNoKay[q]=temp+m\r\n                                            }\r\n                                            k=ArrNoKay.length-2\r\n                                            start2=!start2\r\n                                        }\r\n                                        else{\r\n                                            k--\r\n                                        }\r\n                                    }\r\n                                    else{\r\n                                        start2=!start2\r\n                                        start=!start\r\n                                          \r\n                                        mul=1\r\n                                        for(let c = 0;c<keys(reels).length;c++){\r\n                                        let check1=true\r\n                                        for(let v = 0;v<ArrNoKay.length;v++){\r\n                                            if(keys(reels)[c]==ArrNoKay[v])\r\n                                                check1=false\r\n                                        }\r\n                                        if(check1)\r\n                                            mul=mul*reels[(keys(reels)[c])].p_Sc\r\n                                        else\r\n                                            mul=mul*reels[(keys(reels)[c])].p_no_Sc\r\n                                        }\r\n                                        p_Sc_win={\r\n                                            ...p_Sc_win,\r\n                                            [i]:p_Sc_win[i]+mul\r\n                                        }\r\n                                        \r\n                                    }\r\n                                }\r\n                            }\r\n                            else{\r\n                                ArrNoKay[las]=Number(ArrNoKay[k])+2\r\n                                ArrNoKay[k]=Number(ArrNoKay[k])+1\r\n                            }  \r\n                        }\r\n                    }\r\n                }\r\n                else if(ArrNoKay.length==1){\r\n                    while(start){\r\n                        mul=1\r\n                        for(let c = 0;c<keys(reels).length;c++){\r\n                        let check1=true\r\n                        for(let v = 0;v<ArrNoKay.length;v++){\r\n                            if(keys(reels)[c]==ArrNoKay[v])\r\n                                check1=false\r\n                        }\r\n                        if(check1)\r\n                            mul=mul*reels[(keys(reels)[c])].p_Sc\r\n                        else\r\n                            mul=mul*reels[(keys(reels)[c])].p_no_Sc\r\n                        }\r\n                        p_Sc_win={\r\n                            ...p_Sc_win,\r\n                            [i]:p_Sc_win[i]+mul\r\n                        }\r\n                        \r\n                        ArrNoKay[las]++;\r\n                        if(ArrNoKay[las]>keys(reels).length){\r\n                            \r\n                            \r\n                            start=!start\r\n                        }\r\n                    }\r\n                }\r\n                else if(ArrNoKay.length==2){\r\n                    while(start){\r\n                        mul=1\r\n                        for(let c = 0;c<keys(reels).length;c++){\r\n                        let check1=true\r\n                        for(let v = 0;v<ArrNoKay.length;v++){\r\n                            if(keys(reels)[c]==ArrNoKay[v])\r\n                                check1=false\r\n                        }\r\n                        if(check1)\r\n                            mul=mul*reels[(keys(reels)[c])].p_Sc\r\n                        else\r\n                            mul=mul*reels[(keys(reels)[c])].p_no_Sc\r\n                        }\r\n                        p_Sc_win={\r\n                            ...p_Sc_win,\r\n                            [i]:p_Sc_win[i]+mul\r\n                        }\r\n                        \r\n                        ArrNoKay[las]++;\r\n                        if(ArrNoKay[las]>keys(reels).length)\r\n                            if((Number(ArrNoKay[las]-2)==Number(ArrNoKay[k]))){\r\n                                \r\n                                start=!start\r\n                            }\r\n                            else{\r\n                                ArrNoKay[las]=Number(ArrNoKay[k])+2\r\n                                ArrNoKay[k]=Number(ArrNoKay[k])+1\r\n                            }\r\n                    }\r\n                } \r\n            }\r\n            else if(i==keys(reels).length){\r\n                p_Sc_win={\r\n                    ...p_Sc_win,\r\n                    [i]:1\r\n                }\r\n                for(let c = 0;c<keys(reels).length;c++){\r\n                    p_Sc_win={\r\n                        ...p_Sc_win,\r\n                        [i]:p_Sc_win[i]*reels[keys(reels)[c]].p_Sc\r\n                    }\r\n                    \r\n                }\r\n                \r\n            }\r\n            reels={\r\n                ...reels,\r\n                [i]:{\r\n                    ...reels[i],\r\n                    p_Sc_win:p_Sc_win[i]\r\n                }\r\n                \r\n\r\n            }\r\n        }\r\n        ///////////////////////////////\r\n        ///////////////////////////////\r\n        ///////////////////////////////\r\n        ///////////////////////////////\r\n        ///////////////////////////////\r\n        ///////////////////////////////\r\n        let TheBigestValues={}\r\n        \r\n        for(let i = 1;i<=keys(reels).length;i++){\r\n            let temp=symbols[keys(symbols)[0]].Paytable[i]\r\n            let index\r\n            for(let a = 0;a<keys(symbols).length;a++){\r\n                if(reels[i].symbols[keys(symbols)[a]].IsWithWild)\r\n                    if(temp<=symbols[keys(symbols)[a]].Paytable[i]){\r\n                        temp=symbols[keys(symbols)[a]].Paytable[i]\r\n                        index=keys(symbols)[a]\r\n                    }\r\n            }\r\n            TheBigestValues={\r\n                ...TheBigestValues,\r\n                [i]:index\r\n            }\r\n           \r\n        }\r\n        \r\n        for(let i = 1;i<=keys(reels).length;i++){\r\n            for(let a = 0;a<keys(symbols).length;a++){\r\n                let p_sym_win={}\r\n                reels={\r\n                    ...reels,\r\n                    [i]:{\r\n                        ...reels[i],\r\n                        symbols:{\r\n                            ...reels[i].symbols,\r\n                            [keys(symbols)[a]]:{\r\n                                ...reels[i].symbols[keys(symbols)[a]],\r\n                                p_sym_win:{} \r\n                            }  \r\n                        }\r\n                    }\r\n                }\r\n                \r\n                for(let l=1;l<=keys(reels).length;l++){\r\n                    \r\n                    if(l==keys(reels).length){\r\n                        \r\n                        p_sym_win={\r\n                            ...p_sym_win,\r\n                            [l]:1\r\n                        }\r\n                        for(let o = 1;o<=keys(reels).length;o++){\r\n                            p_sym_win={\r\n                                ...p_sym_win,\r\n                                [l]:p_sym_win[l]*reels[o].symbols[keys(symbols)[a]].NumInreelZW\r\n                            }\r\n                        }\r\n                        \r\n                        let add=1\r\n                        if(reels[i].symbols[keys(symbols)[a]].IsWithWild){\r\n                            if(wild!=undefined){\r\n                                if(keys(symbols)[a]!=TheBigestValues[i]){\r\n                                    for(let o = 1;o<=keys(reels).length;o++){\r\n                                        add=add*reels[o].symbols[wild].NumInreel\r\n                                        \r\n                                    }\r\n                                    \r\n                                    p_sym_win={\r\n                                        ...p_sym_win,\r\n                                        [l]:p_sym_win[l]-add\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    else{\r\n                        let tick=l+1\r\n                        p_sym_win={\r\n                            ...p_sym_win,\r\n                            [l]:1\r\n                        }\r\n                        for(let o = 1;o<=tick;o++){\r\n                            if(o==tick){\r\n                                p_sym_win={\r\n                                    ...p_sym_win,\r\n                                    [l]:p_sym_win[l]*reels[o].symbols[keys(symbols)[a]].NumNoreelZW\r\n                                }\r\n                            }\r\n                            else{\r\n                                p_sym_win={\r\n                                    ...p_sym_win,\r\n                                    [l]:p_sym_win[l]*reels[o].symbols[keys(symbols)[a]].NumInreelZW\r\n                                }\r\n                            }\r\n                        }\r\n                        \r\n                        let add=1\r\n                        if(reels[i].symbols[keys(symbols)[a]].IsWithWild)\r\n                            if(wild!=undefined){\r\n                                for(let o = 1;o<=tick;o++){\r\n                                    if(o==tick){\r\n                                        add=add*reels[o].symbols[keys(symbols)[a]].NumNoreelZW\r\n                                    }\r\n                                    else{\r\n                                        add=add*reels[o].symbols[wild].NumInreel\r\n                                    }\r\n                                }\r\n                                \r\n                                p_sym_win={\r\n                                    ...p_sym_win,\r\n                                    [l]:p_sym_win[l]-add\r\n                                }\r\n                                \r\n                                if(keys(symbols)[a]==TheBigestValues[i]){\r\n                                    add=1\r\n                                    for(let o = 1;o<=keys(reels).length;o++){\r\n                                        if(o==tick){\r\n                                            add=add*reels[o].symbols[keys(symbols)[a]].NumNoreelZW\r\n                                        }\r\n                                        else{\r\n                                            add=add*reels[o].p_Sc\r\n                                        }\r\n                                    }\r\n                                    \r\n                                    p_sym_win={\r\n                                        ...p_sym_win,\r\n                                        [l]:p_sym_win[l]+add\r\n                                    }\r\n                                }\r\n                            }\r\n                    }\r\n                    \r\n                }\r\n                reels={\r\n                    ...reels,\r\n                    [i]:{\r\n                        ...reels[i],\r\n                        symbols:{\r\n                            ...reels[i].symbols,\r\n                            [keys(symbols)[a]]:{\r\n                                ...reels[i].symbols[keys(symbols)[a]],\r\n                                p_sym_win:{\r\n                                    ...reels[i].symbols[keys(symbols)[a]].p_sym_win,\r\n                                    ...p_sym_win \r\n                                } \r\n                            }  \r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        RTP_base=0\r\n        for(let i = 1;i<=keys(reels).length;i++){\r\n            for(let a = 0;a<keys(symbols).length;a++){\r\n                for(let l = 1;l<=keys(reels).length;l++){\r\n                    reels={\r\n                        ...reels,\r\n                        [i]:{\r\n                            ...reels[i],\r\n                            symbols:{\r\n                                ...reels[i].symbols,\r\n                                [keys(symbols)[a]]:{\r\n                                    ...reels[i].symbols[keys(symbols)[a]],\r\n                                    RTP:{\r\n                                        ...reels[i].symbols[keys(symbols)[a]].RTP,\r\n                                        [l]:reels[i].symbols[keys(symbols)[a]].Paytable[l]*reels[i].symbols[keys(symbols)[a]].p_sym_win[l]\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    RTP_base=RTP_base+reels[i].symbols[keys(symbols)[a]].Paytable[l]*reels[i].symbols[keys(symbols)[a]].p_sym_win[l]\r\n                }\r\n                \r\n            }\r\n        }\r\n        \r\n        if(KeySc==state.Game.SceneList[KeySc].FreespinGame){\r\n            FreeGame=0\r\n        }\r\n        else{\r\n            let keyFS=state.Game.SceneList[KeySc].FreespinGame\r\n            for(let i = 1;i<=keys(reels).length;i++){\r\n                FreeGame=FreeGame+(state.Game.SceneList[keyFS].BaseGameRTP*state.Game.SceneList[KeySc].NumberIfFreespin[i]*reels[i].p_Sc_win)\r\n            }\r\n        }\r\n        \r\n        \r\n        RTP=RTP_base+FreeGame\r\n        \r\n        //HitRate\r\n\r\n        HitRate=0\r\n\r\n        if(keys(reels).length!=0){\r\n            for(let i = 1;i<=keys(reels).length;i++){\r\n                HitRate=0\r\n                for(let a = 0;a<keys(reels[i].symbols).length;a++){\r\n                    for(let l = 1;l<=keys(reels).length;l++){\r\n                        reels={\r\n                            ...reels,\r\n                            [i]:{\r\n                                ...reels[i],\r\n                                symbols:{\r\n                                  ...reels[i].symbols,\r\n                                    [keys(symbols)[a]]:{\r\n                                        ...reels[i].symbols[keys(symbols)[a]],\r\n                                        Rate:{\r\n                                            ...reels[i].symbols[keys(symbols)[a]].Rate,\r\n                                            [l]:reels[i].symbols[keys(symbols)[a]].p_sym_win[l]!=0?1/reels[i].symbols[keys(symbols)[a]].p_sym_win[l]:0\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                        HitRate=HitRate+reels[i].symbols[keys(symbols)[a]].p_sym_win[l]\r\n                    }\r\n                    \r\n                }\r\n                if(HitRate!=0)\r\n                    HitRate=1/HitRate \r\n                else \r\n                    HitRate=0\r\n            }\r\n        }\r\n            \r\n    }\r\n    \r\n    return{\r\n        ...state,\r\n        Game:{\r\n            ...state.Game,\r\n            SceneList:{\r\n                ...state.Game.SceneList,\r\n                [KeySc]:{\r\n                   ...state.Game.SceneList[KeySc],\r\n                   Reels:{\r\n                       ...reels\r\n                   },\r\n                   BaseGameRTP:RTP_base ,\r\n                   TotalRTP:RTP,\r\n                   FreespinsRTP:FreeGame,\r\n                   BasegameHitRate:HitRate\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\nexport {WorkWithReels}","import {keys} from \"lodash\"\r\nimport {omit} from 'lodash'\r\n\r\nimport {WorkWithReels} from './WorkWithReels'\r\n\r\nfunction AddFreespinGame(state, action){\r\n    \r\n    let State=state,vID=action.paylot\r\n    let N = 0\r\n        let C = false\r\n        while(!C){\r\n            \r\n            C=true;\r\n            for(let i = 0;i<keys(state.Game.SceneList).length;i++)\r\n            \r\n            {\r\n                if(N==keys(state.Game.SceneList)[i])\r\n                 C=false;\r\n            }\r\n            if(!C)\r\n                N++;\r\n            \r\n        }\r\n        State={\r\n            ...State,\r\n            Game:{\r\n                ...State.Game,\r\n                SceneList:{\r\n                    ...State.Game.SceneList,\r\n                    [N]:{\r\n                        ...State.Game.SceneList[vID]\r\n                    }\r\n                },\r\n                \r\n            },\r\n            ScrenList:{\r\n                ...state.ScrenList,\r\n                    [N]:{\r\n                        Id:\"\"+N+\"\",\r\n                        display:\"none\"\r\n                    },\r\n                },\r\n            BookmarkList:{\r\n                ...state.BookmarkList,\r\n                [N]:{\r\n                    Id:\"\"+N+\"\",\r\n                    backg:\"white\"\r\n                },\r\n            },\r\n        }\r\n        State={\r\n            ...State,\r\n            Game:{\r\n                ...State.Game,\r\n                SceneList:{\r\n                    ...State.Game.SceneList,\r\n                    [N]:{\r\n                        ...State.Game.SceneList[N],\r\n                        id:\"\"+N+\"\",\r\n                        SceneName : \"Freespen_\"+[N],\r\n                        FreespinGame:N,\r\n                    }\r\n                } \r\n            }\r\n        }\r\n        let reels=State.Game.SceneList[N].Reels\r\n        for(let i = 1;i<=keys(reels).length;i++){\r\n            State={\r\n                ...State,\r\n                Game:{\r\n                    ...State.Game,\r\n                    SceneList:{\r\n                        ...State.Game.SceneList,\r\n                            [N]:{\r\n                                ...State.Game.SceneList[N],\r\n                                NumberIfFreespin:{\r\n                                    ...State.Game.SceneList[N].NumberIfFreespin,\r\n                                    [i]:0\r\n                                },\r\n                            }  \r\n                    }\r\n                }\r\n            }\r\n        }\r\n        let Action={\r\n            \r\n                paylot:\"\"+N+\"\"\r\n            \r\n        }\r\n        \r\n        \r\n        State={\r\n            ...WorkWithReels(State, Action)\r\n        }\r\n        \r\n        State={\r\n            ...State,\r\n            Game:{\r\n                ...State.Game,\r\n                SceneList:{\r\n                    ...State.Game.SceneList,\r\n                    [vID]:{\r\n                        ...State.Game.SceneList[vID],\r\n                        FreespinGame:N,\r\n                    }\r\n                } \r\n            }\r\n        }\r\n    return{\r\n        ...State\r\n    }\r\n}\r\nexport {AddFreespinGame}","export default function(state){\r\n    \r\n      \r\n    return{\r\n            ...state\r\n        }\r\n}","import {keys} from \"lodash\"\r\nimport {omit} from 'lodash'\r\n\r\nfunction Valid(state, action){\r\n\r\n    return {\r\n        ...state,\r\n        Validation:{\r\n            FirstInputName:action.paylot.Name,\r\n            FirstInputId:action.paylot.Id\r\n        }\r\n    }\r\n}\r\nfunction Windows(state, action){\r\n    let text=\"\"\r\n    let NoneFilde=true\r\n    let Name\r\n    if(action.paylot.void==\"Reset\"){\r\n        text=\"Do you want to reset current game settings\"\r\n        Name=action.paylot.void\r\n    }\r\n    else if(action.paylot.void==\"Delete\"){\r\n        text=\"Do you really want to delete current scene\"\r\n        Name=action.paylot.void+\" Scene\"\r\n        \r\n    }\r\n    else if(action.paylot.void==\"No\"){\r\n        Name=\"\"\r\n        text=\"\"\r\n        NoneFilde=!NoneFilde\r\n    }\r\n    return{\r\n        ...state,\r\n        Void:{\r\n            TypeOfVoid:Name,\r\n            value:action.paylot.value,\r\n            text:text\r\n        },\r\n        NoneFilde:NoneFilde\r\n    }\r\n}\r\nexport {Valid, Windows}","import {keys} from \"lodash\"\r\nimport {omit} from 'lodash'\r\n\r\nimport initialState from './initialState';\r\nimport CreateScene from './components/CreateScene'\r\nimport {InputFreesG, InputNumberIfFreespin, InputFid, InputFN, InputSN, InputGT, InputNOR, InputSymN, InputSymID, InputSymPayT, InputSymSub, InputSymSpec, InputSymReel} from './components/Inputs'\r\nimport {DeleteScene} from './components/Deletes'\r\nimport {Select, SelectMC, SelectAI} from './components/Select' \r\nimport {StartReset} from './components/StartReset'\r\nimport {AddSymbol} from './components/AddSymbol'\r\nimport {DeleteSymbol} from './components/DeleteSymbol'\r\nimport {WorkWithReels} from './components/WorkWithReels'\r\nimport {AddFreespinGame} from './components/AddFreespinGame'\r\nimport ImportJSON from './components/ImportJSON'\r\nimport {Valid, Windows} from './components/ControlInterface'\r\n\r\n function DefaultOpration(state = initialState, action){\r\n    switch(action.type) {\r\n        \r\n        \r\n        case \"ADD_NEW_SCENE\": {\r\n            return CreateScene(state, action)\r\n        }\r\n        case \"ADD_SYMBOL\": {\r\n            return AddSymbol(state, action)\r\n        }\r\n        case \"DELETE_SCENE\":{\r\n         return DeleteScene(state, action)\r\n        }\r\n        case \"DELETE_SYMBOL\":{\r\n            return DeleteSymbol(state, action)\r\n           }\r\n        case \"SELECT\":{\r\n            return Select(state, action)\r\n        }\r\n        case \"SELECT_MENU_CONFIG\":{\r\n            return SelectMC(state, action)\r\n        }\r\n        case \"SELECT_ALL_INFORMATION\":{\r\n            return SelectAI(state, action)\r\n        }\r\n        case \"START_RESET\":{\r\n            return StartReset(state, action)\r\n        }\r\n        case \"INPUT_FID\":{\r\n            return InputFid(state, action)\r\n        }\r\n        case \"INPUT_FNAME\":{\r\n           return InputFN(state, action)\r\n        }\r\n        case \"INPUT_SCENE_NAME\": {\r\n            return InputSN(state, action)\r\n        }\r\n        case \"INPUT_NUM_REELS\": {\r\n            return InputNOR(state, action)\r\n        }\r\n        case \"INPUT_GAME_TYPE\": {\r\n            return InputGT(state, action)\r\n        }\r\n        case \"INPUT_SYMBOL_NAME\":{\r\n            return InputSymN(state, action)\r\n        }\r\n        case \"INPUT_SYMBOL_ID\":{\r\n            return InputSymID(state, action)\r\n        }\r\n\r\n        case \"INPUT_SYMBOL_PAYTABLE\":{\r\n            return InputSymPayT(state, action)\r\n        }\r\n        case \"INPUT_SYMBOL_SUBSTITURE\":{\r\n            return InputSymSub(state, action)\r\n        }\r\n        case \"INPUT_SYMBOL_SPECIAL\":{\r\n            return InputSymSpec(state, action)\r\n        }\r\n        case \"INPUT_SYMBOL_REELSTRIP\":{\r\n            return InputSymReel(state, action)\r\n        }\r\n        case \"INPUT_NUMBER_IF_FREESPIN\":{\r\n            return InputNumberIfFreespin(state, action)\r\n        } \r\n        case \"INPUT_FREESPIN_GAME\":{\r\n            return InputFreesG(state, action)\r\n        }\r\n        case \"WORK_WITH_REELS\":{\r\n            return WorkWithReels(state, action)\r\n        }\r\n        case \"ADD_FREESPIN_GAME\":{\r\n            return AddFreespinGame(state, action)\r\n        }\r\n        case \"IMPORT_JSON\":{\r\n            return ImportJSON(action.paylot)\r\n        }\r\n        case \"VALIDATION\":{\r\n            return Valid(state, action)\r\n        }\r\n        case \"VOID_TYPE\":{\r\n            return Windows(state, action)\r\n        }\r\n        default: return state;\r\n    }\r\n} \r\nexport default DefaultOpration;","\r\n\r\nimport DefaultOperation from './DefaultOperation'\r\n\r\nimport { combineReducers } from 'redux';\r\n  \r\nexport default combineReducers({\r\n    \r\n    DefaultOperation,\r\n    \r\n    \r\n    \r\n\r\n  })\r\n  ","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux'\nimport App from './App/App';\nimport reportWebVitals from './reportWebVitals';\n\nimport configureStore  from './Store/CreateStore';\n\n\n  const store = configureStore();\n \n  //Note that subscribe() returns a function for unregistering the listener\n   \n\n\n\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n\nreportWebVitals();\n","import {createStore} from 'redux';  \r\nimport MainReducer from './reducers/MainReducer';  \r\n \r\n/*Create a function called configureStore */\r\n \r\nexport default function configureStore() {  \r\n  return createStore(MainReducer);\r\n}"],"sourceRoot":""}