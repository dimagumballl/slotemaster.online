{"version":3,"sources":["Store/action/MainAction.js","componentsJS/Header/Header.js","componentsJS/SlotsScenes/ScrenScene/Bookmark.js","componentsJS/SlotsScenes/ScrenScene/DetailСofiguration/Symbols/Symbols.js","componentsJS/SlotsScenes/ScrenScene/DetailСofiguration/Paytable/Paytable.js","componentsJS/SlotsScenes/ScrenScene/DetailСofiguration/Substitutes/Substitutes.js","componentsJS/SlotsScenes/ScrenScene/DetailСofiguration/Secial/Secial.js","componentsJS/SlotsScenes/ScrenScene/DetailСofiguration/Reelstrip/Reelstrip.js","componentsJS/SlotsScenes/ScrenScene/DetailСofiguration/DetailСofiguration.js","componentsJS/SlotsScenes/ScrenScene/ScrenScene.js","componentsJS/SlotsScenes/SlotsScenes.js","App/App.js","reportWebVitals.js","Store/reducers/initialState.js","Store/reducers/components/CreateScene.js","Store/reducers/components/Inputs.js","Store/reducers/components/Deletes.js","Store/reducers/components/Select.js","Store/reducers/components/StartReset.js","Store/reducers/components/AddSymbol.js","Store/reducers/components/DeleteSymbol.js","Store/reducers/DefaultOperation.js","Store/reducers/MainReducer.js","index.js","Store/CreateStore.js"],"names":["CreateAction","Type","value","type","paylot","Header","DefaultOperation","this","props","state","className","FirstInputId","style","width","height","marginLeft","onChange","undefined","Game","InputFid","FirstInputName","InputFname","onClick","PressFirstBut","FirstBut","justifyContent","marginRight","Component","connect","dispatch","event","target","Bookmark","Id","Select","backgroundColor","BookmarkList","backg","SceneList","SceneName","Symbols","margin","borderRight","overflow","display","keys","length","map","key","name","e","InputSymN","vID","vKEY","p","targetV","InputSymID","id","DeleteSymbol","v1","v2","AddSymbol","console","log","Paytable","maxWidth","minWidth","border","Reelstrip","n","key1","InputSymPayT","vKEY1","textAlign","Substiture","Checkbox","checked","InputSymSub","color","Special","InputSymSpec","InputSymReel","butStyle","SlectedB","background","SlectedD","DetailСofiguration","marginTop","SelectMC","ScernTypeOfConf","ScrenScene","NS","InputNS","GT","InputGT","NOR","num","parseInt","replace","isNaN","InputNOR","ScrenList","InputLabel","labelId","GameType","MenuItem","NumberOfReels","Delete","SlotsScenes","AddScene","App","State","AddContact","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","CreateScene","GameName","0","Reels","1","2","3","4","Substitutes","SlectedScernTypeOfConf","TotalRTP","BaseGameRTP","FreespinsRTP","BonusGameRTP","BasegameHitRate","HitRate","Combinations","Returns","BookmarkOn","N","C","i","action","InputFN","InputSN","Nof","nValue","symbols","a","omit","DeleteScene","sceneList","bookmarkList","screnList","k","v","s","s2","StartReset","Reel","masKey","isWild","isScatter","isSpecific","sarray","DefaultOpration","combineReducers","store","createStore","MainReducer","ReactDOM","render","document","getElementById"],"mappings":"mTAAaA,G,MAAc,SAACC,EAAMC,GAC9B,MAAO,CACHC,KAAMF,EACNG,OAAOF,K,eCITG,E,4JAEJ,WAAS,IAAD,OACAC,EAAkBC,KAAKC,MAAMC,MAA7BH,iBACN,OACE,sBAAKI,UAAU,SAAf,UACE,sBAAKA,UAAU,gBAAf,UACI,uBAAOA,UAAU,YAAYR,MAAOI,EAAiBK,aAAcC,MAAO,CAACC,MAAM,OAAOC,OAAO,OAAOC,WAAW,QAASC,cAAiCC,GAAvBX,EAAiBY,KAAgBX,KAAKC,MAAMW,SAAS,eAGzL,uBAAOT,UAAU,YAAYR,MAAOI,EAAiBc,eAAgBR,MAAO,CAACE,OAAO,OAAOC,WAAW,QAAUC,cAAkCC,GAAvBX,EAAiBY,KAAgBX,KAAKC,MAAMa,WAAW,eAGlL,qBAAKX,UAAU,UAAUE,MAAO,CAACC,MAAM,OAAOC,OAAO,OAAOC,WAAW,QAASO,QAAS,kBAAI,EAAKd,MAAMe,cAAcjB,IAAtH,SAEQA,EAAiBkB,cAK7B,sBAAKd,UAAU,gBAAgBE,MAAO,CAACa,eAAe,YAAtD,UACK,qBAAKf,UAAU,UAAUE,MAAO,CAACC,MAAM,OAAOC,OAAO,QAArD,oBAGD,qBAAKJ,UAAU,UAAUE,MAAO,CAACC,MAAM,OAAOC,OAAO,OAAOC,WAAW,OAAQW,YAAY,QAA3F,8B,GAxBSC,aAkCNC,eACb,SAAAnB,GAAK,MAAG,CAACA,MAAMA,MACf,SAAAoB,GAAQ,MAAK,CACXN,cAAe,SAACjB,EAAkBJ,QACNe,GAAvBX,EAAiBY,MAClBW,EAAS7B,EAAa,gBAAiBE,IACvC2B,EAAS7B,EAAa,iBAE1BmB,SAAU,SAACW,GACPD,EAAS7B,EAAa,YAAa8B,EAAMC,OAAO7B,SAEpDmB,WAAY,SAACS,GACTD,EAAS7B,EAAa,cAAe8B,EAAMC,OAAO7B,YAZ3C0B,CAebvB,G,OCjDI2B,G,kKAEJ,WAAS,IAAD,OACA1B,EAAkBC,KAAKC,MAAMC,MAA7BH,iBACA2B,EAAI1B,KAAKC,MAATyB,GACN,OACE,qBAAKvB,UAAU,WAAWY,QAAS,kBAAI,EAAKd,MAAM0B,OAAO,EAAK1B,MAAMyB,KAAKrB,MAAO,CAACuB,gBAAgB7B,EAAiB8B,aAAaH,GAAII,OAAnI,SACI/B,EAAiBY,KAAKoB,UAAUL,GAAIM,gB,GAPvBZ,cAcRC,eACb,SAAAnB,GAAK,MAAG,CAACA,MAAMA,MACf,SAAAoB,GAAQ,MAAK,CAACK,OAAQ,SAAChC,GAEnB2B,EAAS7B,EAAa,SAAUE,QAJvB0B,CAQbI,G,2BCtBIQ,G,wKAGJ,WAAS,IAAD,OACAlC,EAAkBC,KAAKC,MAAMC,MAA7BH,iBACA2B,EAAI1B,KAAKC,MAATyB,GACN,OACE,sBAAKvB,UAAU,mBAAf,UACI,sBAAKA,UAAU,gBAAgBE,MAAO,CAAC6B,OAAO,QAA9C,UACE,sBAAK/B,UAAU,mBAAmBE,MAAO,CAACC,MAAM,QAAS6B,YAAY,mBAArE,UAEQ,qBAAKhC,UAAU,gBAAgBE,MAAO,CAACE,OAAO,OAAOD,MAAM,QAAS6B,YAAY,mBAAhF,0BAMA,qBAAKhC,UAAU,gBAAgBE,MAAO,CAACE,OAAO,OAAOD,MAAM,QAAS6B,YAAY,mBAAhF,mBAMR,qBAAM9B,MAAO,CAAC+B,SAAS,OAAOC,QAAQ,QAAtC,SAEsE,GAA1DC,eAAKvC,EAAiBY,KAAKoB,UAAUL,GAAIO,SAASM,OAC9CD,eAAKvC,EAAiBY,KAAKoB,UAAUL,GAAIO,SACxCO,KAAI,SAACC,GAAD,OACL,sBAAKtC,UAAU,mBAA6BE,MAAO,CAACE,OAAO,OAAOD,MAAM,SAAxE,UACI,qBAAKH,UAAU,gBAAf,SACI,uBAAOuC,KAAK,aAAajC,SAAU,SAACkC,GAAD,OAAK,EAAK1C,MAAM2C,UAAW,CAACC,IAAInB,EAAIoB,KAAKL,EAAKM,EAAE,EAAK9C,MAAO+C,QAAQL,KAAKhD,MAAOI,EAAiBY,KAAKoB,UAAUL,GAAIO,QAAQQ,GAAKC,KAAMrC,MAAO,CAACC,MAAM,YAG5L,qBAAKH,UAAU,gBAAf,SACI,uBAAOM,SAAU,SAACkC,GAAD,OAAK,EAAK1C,MAAMgD,WAAW,CAACJ,IAAInB,EAAIoB,KAAKL,EAAKM,EAAE,EAAK9C,MAAO+C,QAAQL,KAAKhD,MAAOI,EAAiBY,KAAKoB,UAAUL,GAAIO,QAAQQ,GAAKS,GAAI7C,MAAO,CAACC,MAAM,YAGxK,qBAAKH,UAAU,UAAUY,QAAS,kBAAI,EAAKd,MAAMkD,aAAa,CAACC,GAAG1B,EAAG2B,GAAGZ,KAAOpC,MAAO,CAACE,OAAO,QAA9F,sBATmCkC,MAcjC,qBAAKpC,MAAO,CAACgC,QAAQ,YAK3C,qBAAKlC,UAAU,UAAUE,MAAO,CAACC,MAAM,QAASS,QAAS,kBAAI,EAAKd,MAAMqD,UAAU5B,IAAlF,kBAIF,qBAAKvB,UAAU,gBAAf,SACI,qBAAKE,MAAO,CAACC,MAAM,mB,GApDXc,cA8DPC,eACb,SAAAnB,GAAK,MAAG,CAACA,MAAMA,MACf,SAAAoB,GAAQ,MAAK,CACTgC,UAAW,SAAC3D,GAIZ2B,EAAS7B,EAAa,aAAcE,KAIxCwD,aAAc,SAACxD,GAEb2B,EAAS7B,EAAa,gBAAiBE,KAGvCiD,UAAW,SAACjD,GAGR2B,EAAS7B,EAAa,oBAAqBE,KAG/CsD,WAAY,SAACtD,GAET4D,QAAQC,IAAI7D,GACZ2B,EAAS7B,EAAa,kBAAmBE,QAzBlC0B,CA6BbY,GC3FIwB,E,4JAEJ,WAAS,IAAD,OACA1D,EAAkBC,KAAKC,MAAMC,MAA7BH,iBACA2B,EAAI1B,KAAKC,MAATyB,GACN,OACE,sBAAKvB,UAAU,mBAAmBE,MAAO,CAAC+B,SAAS,OAAQsB,SAAS,SAApE,UACI,sBAAKvD,UAAU,gBAAf,UACE,qBAAKA,UAAU,gBAAgBE,MAAO,CAACsD,SAAS,QAAQC,OAAO,mBAA/D,oBAK8D,GAA1DtB,eAAKvC,EAAiBY,KAAKoB,UAAUL,GAAIO,SAASM,QAC+D,GAA7GxC,EAAiBY,KAAKoB,UAAUL,GAAIO,QAAQK,eAAKvC,EAAiBY,KAAKoB,UAAUL,GAAIO,SAAS,IAAI4B,UACtGvB,eAAKvC,EAAiBY,KAAKoB,UAAUL,GAAIO,QAAQK,eAAKvC,EAAiBY,KAAKoB,UAAUL,GAAIO,SAAS,IAAI4B,WAC1FrB,KAAI,SAACC,GAAD,IAAMqB,EAAN,uDAAQ,EAAR,OACL,qBAAgB3D,UAAU,gBAAgBE,MAAO,CAACsD,SAAS,OAAQC,OAAO,kBAAmB1C,eAAe,UAA5G,SAEK4C,EAAE,GAFGrB,MAIgB,qBAAKpC,MAAO,CAACgC,QAAQ,aAKD,GAA1DC,eAAKvC,EAAiBY,KAAKoB,UAAUL,GAAIO,SAASM,OAClDD,eAAKvC,EAAiBY,KAAKoB,UAAUL,GAAIO,SAC5BO,KAAI,SAACC,GAAD,OACL,qBAAKtC,UAAU,mBAAf,SACI,sBAAKA,UAAU,gBAAf,UACA,qBAAMA,UAAU,gBAAgBE,MAAO,CAACsD,SAAS,QAASC,OAAO,kBAAmB1C,eAAe,SAAUkB,SAAS,UAAtH,SACKrC,EAAiBY,KAAKoB,UAAUL,GAAIO,QAAQQ,GAAKC,OAErDJ,eAAKvC,EAAiBY,KAAKoB,UAAUL,GAAIO,QAAQQ,GAAKgB,UAAUjB,KAAI,SAACuB,GAAD,OACjE,uBAAOtD,SAAU,SAACkC,GAAD,OAAK,EAAK1C,MAAM+D,aAAa,CAACnB,IAAInB,EAAIoB,KAAKL,EAAKwB,MAAMF,EAAMf,QAAQL,KAAKhD,MAAOI,EAAiBY,KAAKoB,UAAUL,GAAIO,QAAQQ,GAAKgB,SAASM,GAAmB5D,UAAU,gBAAgBE,MAAO,CAACsD,SAAS,OAAQC,OAAO,kBAAmBM,UAAU,WAA9FH,UANvItB,MAcnD,+B,GA3CMrB,aAmDRC,eACb,SAAAnB,GAAK,MAAG,CAACA,MAAMA,MACf,SAAAoB,GAAQ,MAAK,CACX0C,aAAc,SAACrE,GAGb2B,EAAS7B,EAAa,wBAAyBE,QANtC0B,CASboC,G,SC5DIU,E,4JAEJ,WAAS,IAAD,OACApE,EAAkBC,KAAKC,MAAMC,MAA7BH,iBACA2B,EAAI1B,KAAKC,MAATyB,GACN,OACE,sBAAKvB,UAAU,mBAAmBE,MAAO,CAAC+B,SAAS,OAAQsB,SAAS,SAApE,UACI,sBAAKvD,UAAU,gBAAf,UACE,qBAAKA,UAAU,gBAAgBE,MAAO,CAACsD,SAAS,QAAQC,OAAO,mBAA/D,wBAK8D,GAA1DtB,eAAKvC,EAAiBY,KAAKoB,UAAUL,GAAIO,SAASM,OAClDD,eAAKvC,EAAiBY,KAAKoB,UAAUL,GAAIO,SAC5BO,KAAI,SAACC,GAAD,OACL,qBAAgBtC,UAAU,gBAAgBE,MAAO,CAACsD,SAAS,QAASC,OAAO,kBAAmB1C,eAAe,UAA7G,SACKnB,EAAiBY,KAAKoB,UAAUL,GAAIO,QAAQQ,GAAKC,MAD5CD,MAGrB,2BAKyD,GAA1DH,eAAKvC,EAAiBY,KAAKoB,UAAUL,GAAIO,SAASM,OAClDD,eAAKvC,EAAiBY,KAAKoB,UAAUL,GAAIO,SAC5BO,KAAI,SAACC,GAAD,OACL,qBAAKtC,UAAU,mBAAf,SACI,sBAAKA,UAAU,gBAAf,UACA,qBAAMA,UAAU,gBAAgBE,MAAO,CAACsD,SAAS,QAASC,OAAO,kBAAmB1C,eAAe,SAAUkB,SAAS,UAAtH,SACKrC,EAAiBY,KAAKoB,UAAUL,GAAIO,QAAQQ,GAAKC,OAErDJ,eAAKvC,EAAiBY,KAAKoB,UAAUL,GAAIO,QAAQQ,GAAK0B,YAAY3B,KAAI,SAACuB,GAAD,OACnE,qBAAiB5D,UAAU,gBAAgBE,MAAO,CAACsD,SAAS,QAASC,OAAO,kBAAmB1C,eAAe,UAA9G,SACE,cAACkD,EAAA,EAAD,CACEC,QAAStE,EAAiBY,KAAKoB,UAAUL,GAAIO,QAAQQ,GAAK0B,WAAWJ,GAAMpE,MAC3Ec,SAAU,kBAAI,EAAKR,MAAMqE,YAAY,CAACzB,IAAInB,EAAIoB,KAAKL,EAAKwB,MAAMF,KAE9DQ,MAAM,aALAR,UANsBtB,MAqBnD,+B,GAhDQrB,aAwDVC,eACb,SAAAnB,GAAK,MAAG,CAACA,MAAMA,MACf,SAAAoB,GAAQ,MAAK,CACXgD,YAAa,SAAC3E,GAGZ2B,EAAS7B,EAAa,0BAA2BE,QANxC0B,CASb8C,GChEIK,E,4JAEJ,WAAS,IAAD,OACAzE,EAAkBC,KAAKC,MAAMC,MAA7BH,iBACA2B,EAAI1B,KAAKC,MAATyB,GACN,OACE,sBAAKvB,UAAU,mBAAmBE,MAAO,CAAC+B,SAAS,OAAQsB,SAAS,SAApE,UACI,sBAAKvD,UAAU,gBAAf,UACE,qBAAKA,UAAU,gBAAgBE,MAAO,CAACsD,SAAS,QAAQC,OAAO,mBAA/D,qBAMgB,qBAAMzD,UAAU,gBAAgBE,MAAO,CAACsD,SAAS,QAASC,OAAO,kBAAmB1C,eAAe,UAAnG,oBAGA,qBAAMf,UAAU,gBAAgBE,MAAO,CAACsD,SAAS,QAASC,OAAO,kBAAmB1C,eAAe,UAAnG,uBAGA,qBAAMf,UAAU,gBAAgBE,MAAO,CAACsD,SAAS,QAASC,OAAO,kBAAmB1C,eAAe,UAAnG,2BAQ8C,GAA1DoB,eAAKvC,EAAiBY,KAAKoB,UAAUL,GAAIO,SAASM,OAClDD,eAAKvC,EAAiBY,KAAKoB,UAAUL,GAAIO,SAC5BO,KAAI,SAACC,GAAD,OACL,qBAAKtC,UAAU,mBAAf,SACI,sBAAKA,UAAU,gBAAf,UACA,qBAAMA,UAAU,gBAAgBE,MAAO,CAACsD,SAAS,QAASC,OAAO,kBAAmB1C,eAAe,SAAUkB,SAAS,UAAtH,SACKrC,EAAiBY,KAAKoB,UAAUL,GAAIO,QAAQQ,GAAKC,OAErDJ,eAAKvC,EAAiBY,KAAKoB,UAAUL,GAAIO,QAAQQ,GAAK+B,SAAShC,KAAI,SAACuB,GAAD,OAChE,qBAAiB5D,UAAU,gBAAgBE,MAAO,CAACsD,SAAS,QAASC,OAAO,kBAAmB1C,eAAe,UAA9G,SACI,cAACkD,EAAA,EAAD,CACAC,QAAStE,EAAiBY,KAAKoB,UAAUL,GAAIO,QAAQQ,GAAK+B,QAAQT,GAClEtD,SAAU,kBAAI,EAAKR,MAAMwE,aAAa,CAAC5B,IAAInB,EAAIoB,KAAKL,EAAKwB,MAAMF,KAC/DQ,MAAM,aAJAR,UANsBtB,MAoBnD,+B,GAnDKrB,aA2DPC,eACb,SAAAnB,GAAK,MAAG,CAACA,MAAMA,MACf,SAAAoB,GAAQ,MAAK,CACXmD,aAAc,SAAC9E,GAGX2B,EAAS7B,EAAa,uBAAwBE,QANvC0B,CASbmD,GCrEIf,E,4JAEJ,WAAS,IAAD,OACA1D,EAAkBC,KAAKC,MAAMC,MAA7BH,iBACA2B,EAAI1B,KAAKC,MAATyB,GACN,OACE,sBAAKvB,UAAU,mBAAmBE,MAAO,CAAC+B,SAAS,OAAQsB,SAAS,SAApE,UACI,sBAAKvD,UAAU,gBAAf,UACE,qBAAKA,UAAU,gBAAgBE,MAAO,CAACsD,SAAS,QAAQC,OAAO,mBAA/D,oBAK8D,GAA1DtB,eAAKvC,EAAiBY,KAAKoB,UAAUL,GAAIO,SAASM,QAC+D,GAA7GxC,EAAiBY,KAAKoB,UAAUL,GAAIO,QAAQK,eAAKvC,EAAiBY,KAAKoB,UAAUL,GAAIO,SAAS,IAAI4B,UACtGvB,eAAKvC,EAAiBY,KAAKoB,UAAUL,GAAIO,QAAQK,eAAKvC,EAAiBY,KAAKoB,UAAUL,GAAIO,SAAS,IAAI4B,WAC1FrB,KAAI,SAACC,GAAD,IAAMqB,EAAN,uDAAQ,EAAR,OACL,qBAAgB3D,UAAU,gBAAgBE,MAAO,CAACsD,SAAS,OAAQC,OAAO,kBAAmB1C,eAAe,UAA5G,SAEK,SAAS4C,EAAE,IAFNrB,MAIgB,qBAAKpC,MAAO,CAACgC,QAAQ,aAKD,GAA1DC,eAAKvC,EAAiBY,KAAKoB,UAAUL,GAAIO,SAASM,OAClDD,eAAKvC,EAAiBY,KAAKoB,UAAUL,GAAIO,SAC5BO,KAAI,SAACC,GAAD,OACL,qBAAKtC,UAAU,mBAAf,SACI,sBAAKA,UAAU,gBAAf,UACA,qBAAMA,UAAU,gBAAgBE,MAAO,CAACsD,SAAS,QAASC,OAAO,kBAAmB1C,eAAe,SAAUkB,SAAS,UAAtH,SACKrC,EAAiBY,KAAKoB,UAAUL,GAAIO,QAAQQ,GAAKC,OAGlDJ,eAAKvC,EAAiBY,KAAKoB,UAAUL,GAAIO,QAAQQ,GAAKoB,WAAWrB,KAAI,SAACuB,GAAD,OACjE,uBAAOtD,SAAU,SAACkC,GAAD,OAAK,EAAK1C,MAAMyE,aAAa,CAAC7B,IAAInB,EAAIoB,KAAKL,EAAKwB,MAAMF,EAAMf,QAAQL,KAAKhD,MAAOI,EAAiBY,KAAKoB,UAAUL,GAAIO,QAAQQ,GAAKoB,UAAUE,GAAmB5D,UAAU,gBAAgBE,MAAO,CAACsD,SAAS,OAAQC,OAAO,kBAAmBM,UAAU,WAA9FH,UAP5ItB,MAgBnD,qBAAKpC,MAAO,CAACgC,QAAQ,iB,GA7CfjB,aAqDRC,eACb,SAAAnB,GAAK,MAAG,CAACA,MAAMA,MACf,SAAAoB,GAAQ,MAAK,CACXoD,aAAc,SAAC/E,GAGb2B,EAAS7B,EAAa,yBAA0BE,QANvC0B,CASboC,GCzDEkB,EAAS,CAACpE,OAAO,OAAQW,eAAe,cACxC0D,EAAS,CAACC,WAAW,QAAQtE,OAAO,OAAQW,eAAe,cAC3D4D,EAAS,CAACzC,QAAQ,QAChB0C,E,4JAEJ,WAAS,IAAD,OACAhF,EAAkBC,KAAKC,MAAMC,MAA7BH,iBACA2B,EAAI1B,KAAKC,MAATyB,GACN,OACI,sBAAKvB,UAAU,kBAAkBE,MAAO,CAAC2E,UAAU,QAAnD,UACI,qBAAK7E,UAAU,UAAUY,QAAS,kBAAI,EAAKd,MAAMgF,SAAS,CAAC7B,GAAG,UAAUC,GAAG3B,KAAMrB,MAAON,EAAiBY,KAAKoB,UAAUL,GAAIwD,gBAAgBjD,QAAQ2C,EAASD,EAA7J,qBAGA,qBAAKxE,UAAU,cAAcE,MAAON,EAAiBY,KAAKoB,UAAUL,GAAIwD,gBAAgBjD,QAAQ6C,EAAS,CAACzC,QAAQ,QAAlH,SACI,cAAC,EAAD,CACIX,GAAIA,MAGZ,qBAAKvB,UAAU,UAAUY,QAAS,kBAAI,EAAKd,MAAMgF,SAAS,CAAC7B,GAAG,WAAWC,GAAG3B,KAAMrB,MAAON,EAAiBY,KAAKoB,UAAUL,GAAIwD,gBAAgBzB,SAASmB,EAASD,EAA/J,sBAGA,qBAAKxE,UAAU,cAAcE,MAAON,EAAiBY,KAAKoB,UAAUL,GAAIwD,gBAAgBzB,SAASqB,EAAS,CAACzC,QAAQ,QAAnH,SACI,cAAC,EAAD,CACIX,GAAIA,MAGZ,qBAAKvB,UAAU,UAAUY,QAAS,kBAAI,EAAKd,MAAMgF,SAAS,CAAC7B,GAAG,aAAaC,GAAG3B,KAAMrB,MAAON,EAAiBY,KAAKoB,UAAUL,GAAIwD,gBAAgBf,WAAWS,EAASD,EAAnK,wBAGA,qBAAKxE,UAAU,cAAcE,MAAON,EAAiBY,KAAKoB,UAAUL,GAAIwD,gBAAgBf,WAAWW,EAAS,CAACzC,QAAQ,QAArH,SAEI,cAAC,EAAD,CAAYX,GAAIA,MAEpB,qBAAKvB,UAAU,UAAUY,QAAS,kBAAI,EAAKd,MAAMgF,SAAS,CAAC7B,GAAG,UAAUC,GAAG3B,KAAMrB,MAAON,EAAiBY,KAAKoB,UAAUL,GAAIwD,gBAAgBV,QAAQI,EAASD,EAA7J,qBAGA,qBAAKxE,UAAU,cAAcE,MAAON,EAAiBY,KAAKoB,UAAUL,GAAIwD,gBAAgBV,QAAQM,EAAS,CAACzC,QAAQ,QAAlH,SACI,cAAC,EAAD,CACKX,GAAIA,MAGb,qBAAKvB,UAAU,UAAUY,QAAS,kBAAI,EAAKd,MAAMgF,SAAS,CAAC7B,GAAG,YAAYC,GAAG3B,KAAMrB,MAAON,EAAiBY,KAAKoB,UAAUL,GAAIwD,gBAAgBrB,UAAUe,EAASD,EAAjK,uBAGA,qBAAKxE,UAAU,cAAcE,MAAON,EAAiBY,KAAKoB,UAAUL,GAAIwD,gBAAgBrB,UAAUiB,EAAS,CAACzC,QAAQ,QAApH,SACI,cAACwB,EAAD,CACInC,GAAIA,a,GA3CSN,aAoDlBC,eACb,SAAAnB,GAAK,MAAG,CAACA,MAAMA,MACf,SAAAoB,GAAQ,MAAK,CAAC2D,SAAU,SAACtF,GAErB2B,EAAS7B,EAAa,qBAAsBE,QAJnC0B,CAQb0D,GC9DII,E,4MACJC,GAAG,SAAC7D,GACF,EAAKtB,MAAMoF,QAAQ,CAACjC,GAAG7B,EAAMC,OAAO7B,MAAO0D,GAAG,EAAKpD,MAAMyB,M,EAE3D4D,GAAK,SAAC/D,GAEJ,EAAKtB,MAAMsF,QAAQ,CAACnC,GAAG7B,EAAMC,OAAO7B,MAAO0D,GAAG,EAAKpD,MAAMyB,M,EAE3D8D,IAAI,SAACjE,GACH,IAAIkE,EAEoB,IAApBlE,EAAMC,OAAO7B,OACf8F,EAAMC,SAASnE,EAAMC,OAAO7B,MAAMgG,QAAQ,OAAO,KAE9CC,MAAMH,KACPA,EAAM,IAGR,EAAKxF,MAAM4F,SAAS,CAACzC,GAAGqC,EAAKpC,GAAG,EAAKpD,MAAMyB,OAI3C+D,EAAM,GACN,EAAKxF,MAAM4F,SAAS,CAACzC,GAAGqC,EAAKpC,GAAG,EAAKpD,MAAMyB,O,4CAI/C,WAAS,IAAD,OACA3B,EAAkBC,KAAKC,MAAMC,MAA7BH,iBACA2B,EAAI1B,KAAKC,MAATyB,GACN,OACE,qBAAKvB,UAAU,aAAaE,MAAO,CAACgC,QAAQtC,EAAiB+F,UAAUpE,GAAIW,SAA3E,SACI,sBAAKlC,UAAU,mBAAf,UACE,sBAAOA,UAAU,gBAAjB,UAEA,sBAAMA,UAAU,mBAAhB,UAEA,cAAC4F,EAAA,EAAD,CAAY7C,GAAG,YAAf,wBACA,uBAAO/C,UAAU,YAAYR,MAAOI,EAAiBY,KAAKoB,UAAUL,GAAIM,UAAWvB,SAAUT,KAAKoF,GAAI/E,MAAO,CAACE,OAAO,UAErH,cAACwF,EAAA,EAAD,CAAY7C,GAAG,WAAf,sBACA,eAAC,IAAD,CAAQ8C,QAAQ,WAAW9C,GAAG,SAASzC,SAAUT,KAAKsF,GAAI3F,MAAOI,EAAiBY,KAAKoB,UAAUL,GAAIuE,SAArG,UACE,cAACC,EAAA,EAAD,CAAUvG,MAAM,OAAhB,kBACA,cAACuG,EAAA,EAAD,CAAUvG,MAAM,QAAhB,sBAIF,cAACoG,EAAA,EAAD,CAAY7C,GAAG,gBAAf,8BACA,uBAAO/C,UAAU,YAAYM,SAAUT,KAAKwF,IAAKnF,MAAO,CAACE,OAAO,QAASZ,MAAOI,EAAiBY,KAAKoB,UAAUL,GAAIyE,mBAGtH,qBAAKhG,UAAU,gBAAgBE,MAAO,CAACa,eAAe,YAAtD,SACE,qBAAKf,UAAU,UAAUE,MAAO,CAACC,MAAM,OAAOC,OAAO,QAASQ,QAAS,kBAAI,EAAKd,MAAMmG,OAAO1E,IAA7F,yBAMA,cAAC,EAAD,CACEA,GAAIA,a,GA3DON,aAoEVC,eACb,SAAAnB,GAAK,MAAG,CAACA,MAAMA,MACf,SAAAoB,GAAQ,MAAK,CACX8E,OAAQ,SAACzG,GACP2B,EAAS7B,EAAa,eAAgBE,KAExC0F,QAAS,SAAC1F,GACN2B,EAAS7B,EAAa,mBAAoBE,KAE9C4F,QAAS,SAAC5F,GACN2B,EAAS7B,EAAa,kBAAmBE,KAE7CkG,SAAU,SAAClG,GACT2B,EAAS7B,EAAa,kBAAmBE,QAbhC0B,CAgBb8D,GCvFIkB,E,4JAGJ,WAAS,IACDtG,EAAkBC,KAAKC,MAAMC,MAA7BH,iBACN,OACE,sBAAKI,UAAU,cAAf,UACE,sBAAKA,UAAU,gBAAgBE,MAAO,CAACE,OAAO,QAA9C,UACI,qBAAMF,MAAO,CAACgC,QAAQ,OAAOqB,SAAS,OAAOtB,SAAS,QAAtD,cAG8B1B,GAAvBX,EAAiBY,KAChB2B,eAAKvC,EAAiBY,KAAKoB,WAC1BS,KAAI,SAACC,GAAD,OACD,cAAC,EAAD,CACIf,GAAIe,GADOA,MAGjB,qBAAKpC,MAAO,CAACqD,SAAS,IAAIrB,QAAQ,YAK5C,qBAAKlC,UAAU,UAAUE,MAAO,CAACG,WAAW,MAAMD,OAAO,OAAQD,MAAM,OAAQqD,SAAS,QAAS5C,QAASf,KAAKC,MAAMqG,SAArH,kBAIJ,qBAAKnG,UAAU,mBAAf,cAEkCO,GAAvBX,EAAiBY,KAChB2B,eAAKvC,EAAiBY,KAAKoB,WAC1BS,KAAI,SAACC,GAAD,OACD,cAAC,EAAD,CACIf,GAAIe,GADSA,MAGnB,iC,GAlCIrB,aA8CXC,eACb,SAAAnB,GAAK,MAAG,CAACA,MAAMA,MACf,SAAAoB,GAAQ,MAAK,CACXgF,SAAU,SAACpG,GAELoB,EAAS7B,EAAa,sBALjB4B,CASbgF,GCzDIE,E,4JAEJ,WACE,OACE,sBAAKpG,UAAU,MAAf,UACG,cAAC,EAAD,SAE+CO,GAAxCV,KAAKC,MAAMuG,MAAMzG,iBAAiBY,KAAgB,cAAC,EAAD,IAAe,+B,GAP/DS,aAeHC,eACb,SAAAnB,GAAK,MAAG,CAACsG,MAAMtG,MACf,SAAAoB,GAAQ,MAAK,CACXmF,WAAY,WACVnF,EAAS7B,SAJA4B,CAObkF,GClBaG,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,QCDCQ,EANM,CACjBlG,SAAS,QACTb,aAAa,GACbS,eAAe,I,cC6OJuG,MA3Of,SAAqBlH,GACjB,GAAmB,SAAhBA,EAAMe,SACL,kCACOf,GADP,IAEIS,KAAK,CACD0G,SAASnH,EAAMW,eACfa,GAAGxB,EAAME,aACT2B,UAAU,CACNuF,EAAE,CACEpE,GAAG,IACHlB,UAAY,cACZiE,SAAW,OACXE,cAAc,EACdoB,MAAQ,CACJD,EAAE,CACE5E,KAAK,SAET8E,EAAE,CACE9E,KAAK,SAET+E,EAAE,CACE/E,KAAK,SAETgF,EAAE,CACEhF,KAAK,SAETiF,EAAE,CACEjF,KAAK,UAGbwC,gBAAgB,CACZjD,SAAQ,EACRwB,UAAS,EACTmE,aAAY,EACZpD,SAAQ,EACRX,WAAU,GAEdgE,uBAAuB,GACvB5F,QAAQ,GAIR6F,SAAU,IACVC,YAAa,IACbC,aAAc,IACdC,aAAc,IACdC,gBAAiB,IACjBC,QAAQ,GACRC,aAAa,GACbC,QAAQ,MAMpBvC,UAAU,2BACH5F,EAAM4F,WADJ,IAEDwB,EAAE,CACE5F,GAAG,IACHW,QAAQ,UAGhBR,aAAa,2BACN3B,EAAM2B,cADD,IAEJyF,EAAE,CACE5F,GAAG,IACHI,MAAM,WAGlBwG,WAAW,IAKlB,GAAsC,GAAnChG,eAAKpC,EAAMS,KAAKoB,WAAWQ,OAC/B,kCACOrC,GADP,IAEIS,KAAK,CACD0G,SAASnH,EAAMW,eACfa,GAAGxB,EAAME,aACT2B,UAAU,CACNuF,EAAE,CACEpE,GAAG,IACHlB,UAAY,cACZiE,SAAW,OACXE,cAAc,EACdoB,MAAQ,CACJD,EAAE,CACE5E,KAAK,SAET8E,EAAE,CACE9E,KAAK,SAET+E,EAAE,CACE/E,KAAK,SAETgF,EAAE,CACEhF,KAAK,SAETiF,EAAE,CACEjF,KAAK,UAGbwC,gBAAgB,CACZjD,SAAQ,EACRwB,UAAS,EACTmE,aAAY,EACZpD,SAAQ,EACRX,WAAU,GAEdgE,uBAAuB,GACvB5F,QAAQ,GAIR6F,SAAU,IACVC,YAAa,IACbC,aAAc,IACdC,aAAc,IACdC,gBAAiB,IACjBC,QAAQ,GACRC,aAAa,GACbC,QAAQ,MAMpBvC,UAAU,2BACH5F,EAAM4F,WADJ,IAEDwB,EAAE,CACE5F,GAAG,IACHW,QAAQ,UAGhBR,aAAa,2BACN3B,EAAM2B,cADD,IAEJyF,EAAE,CACE5F,GAAG,IACHI,MAAM,WAGlBwG,WAAW,IAOnB,IAFA,IAAIC,EAAI,EACJC,GAAI,GACDA,GAAE,CAELA,GAAE,EACF,IAAI,IAAIC,EAAI,EAAEA,EAAEnG,eAAKpC,EAAMS,KAAKoB,WAAWQ,OAAOkG,IAG3CF,GAAGjG,eAAKpC,EAAMS,KAAKoB,WAAW0G,KAChCD,GAAE,GAEHA,GACAD,IAMR,kCACOrI,GADP,IAEIS,KAAK,2BACET,EAAMS,MADT,IAEAoB,UAAU,2BACH7B,EAAMS,KAAKoB,WADT,kBAEJwG,EAAG,CAEArF,GAAG,CAACqF,GACJvG,UAAY,aAAa,CAACuG,GAC1BtC,SAAW,OACXE,cAAc,EACdoB,MAAQ,CACJD,EAAE,CACE5E,KAAK,SAET8E,EAAE,CACE9E,KAAK,SAET+E,EAAE,CACE/E,KAAK,SAETgF,EAAE,CACEhF,KAAK,SAETiF,EAAE,CACEjF,KAAK,UAGbwC,gBAAgB,CACZjD,SAAQ,EACRwB,UAAS,EACTmE,aAAY,EACZpD,SAAQ,EACRX,WAAU,GAEdgE,uBAAuB,GACvB5F,QAAQ,GAIR6F,SAAU,IACVC,YAAa,IACbC,aAAc,IACdC,aAAc,IACdC,gBAAiB,IACjBC,QAAQ,GACRC,aAAa,GACbC,QAAQ,QAIpBvC,UAAU,2BACP5F,EAAM4F,WADA,kBAEJyC,EAAG,CACA7G,GAAG,GAAG6G,EACNlG,QAAQ,UAGhBR,aAAa,2BACN3B,EAAM2B,cADD,kBAEH0G,EAAG,CACA7G,GAAG,GAAG6G,EACNzG,MAAM,cCrO9B,SAASlB,EAASV,EAAOwI,GACrB,kCACOxI,GADP,IAEIE,aAAcsI,EAAO7I,SAG7B,SAAS8I,EAAQzI,EAAOwI,GACpB,kCACOxI,GADP,IAEIW,eAAgB6H,EAAO7I,SAG/B,SAAS+I,EAAQ1I,EAAOwI,GACpB,OAAO,2BACAxI,GADP,IAEIS,KAAK,2BACET,EAAMS,MADT,IAEAoB,UAAU,2BACH7B,EAAMS,KAAKoB,WADT,kBAEJ2G,EAAO7I,OAAOwD,GAFV,2BAGEnD,EAAMS,KAAKoB,UAAU2G,EAAO7I,OAAOwD,KAHrC,IAIDrB,UAAY0G,EAAO7I,OAAOuD,WAQ9C,SAASmC,EAAQrF,EAAOwI,GACpB,OAAO,2BACAxI,GADP,IAEIS,KAAK,2BACET,EAAMS,MADT,IAEAoB,UAAU,2BACH7B,EAAMS,KAAKoB,WADT,kBAEJ2G,EAAO7I,OAAOwD,GAFV,2BAGEnD,EAAMS,KAAKoB,UAAU2G,EAAO7I,OAAOwD,KAHrC,IAID4C,SAAWyC,EAAO7I,OAAOuD,WAS7C,SAASyC,EAAS3F,EAAOwI,GACrB,IAAIG,EAAM3I,EAAMS,KAAKoB,UAAU2G,EAAO7I,OAAOwD,IAAI8C,cAC7C2C,EAASJ,EAAO7I,OAAOuD,GACvB2F,EAAQ7I,EAAMS,KAAKoB,UAAU2G,EAAO7I,OAAOwD,IAAIpB,QACnD,GAAG6G,EAAOD,EACN,IAAI,IAAIJ,EAAIK,EAAO,EAAEL,GAAGI,EAAIJ,IACxB,IAAI,IAAIO,EAAI,EAAEA,EAAE1G,eAAKyG,GAASxG,OAAOyG,IACjCD,EAAQ,2BACDA,GADA,kBAEFzG,eAAKyG,GAASC,GAFZ,2BAGID,EAAQzG,eAAKyG,GAASC,KAH1B,IAICnF,UAAU,eACHoF,eAAKF,EAAQzG,eAAKyG,GAASC,IAAInF,UAAW4E,IAEjDhF,SAAS,eACFwF,eAAKF,EAAQzG,eAAKyG,GAASC,IAAIvF,SAAUgF,aAQ/D,GAAGK,EAAOD,EACX,IAAI,IAAIJ,EAAII,EAAI,EAAEJ,GAAGK,EAAOL,IACxB,IAAI,IAAIO,EAAI,EAAEA,EAAE1G,eAAKyG,GAASxG,OAAOyG,IACjCD,EAAQ,2BACDA,GADA,kBAEFzG,eAAKyG,GAASC,GAFZ,2BAGID,EAAQzG,eAAKyG,GAASC,KAH1B,IAICnF,UAAU,2BACHkF,EAAQzG,eAAKyG,GAASC,IAAInF,WADxB,kBAEJ4E,EAAG,IAERhF,SAAS,2BACFsF,EAAQzG,eAAKyG,GAASC,IAAIvF,UADzB,kBAEHgF,EAAG,QAQ5B,OAAO,2BACAvI,GADP,IAEIS,KAAK,2BACET,EAAMS,MADT,IAEAoB,UAAU,2BACH7B,EAAMS,KAAKoB,WADT,kBAEJ2G,EAAO7I,OAAOwD,GAFV,2BAGEnD,EAAMS,KAAKoB,UAAU2G,EAAO7I,OAAOwD,KAHrC,IAID8C,cAAgB2C,EAChB7G,QAAQ,eACD8G,WAQ3B,SAASnG,GAAU1C,EAAOwI,GACtB,IAAI7F,EAAI6F,EAAO7I,OAAOgD,IAAKC,EAAK4F,EAAO7I,OAAOiD,KAAME,EAAQ0F,EAAO7I,OAAOmD,QAAQxB,OAAO7B,MACrF,OAAO,2BACAO,GADP,IAEIS,KAAK,2BACET,EAAMS,MADT,IAEAoB,UAAU,2BACH7B,EAAMS,KAAKoB,WADT,kBAEJc,EAFI,2BAGE3C,EAAMS,KAAKoB,UAAUc,IAHvB,IAKDZ,QAAQ,2BACD/B,EAAMS,KAAKoB,UAAUc,GAAKZ,SAD1B,kBAEFa,EAFE,2BAGI5C,EAAMS,KAAKoB,UAAUc,GAAKZ,QAAQ,CAACa,KAHvC,IAICJ,KAAKM,cAUrC,SAASC,GAAW/C,EAAOwI,GACvB,IAAI7F,EAAI6F,EAAO7I,OAAOgD,IAAKC,EAAK4F,EAAO7I,OAAOiD,KAAME,EAAQ0F,EAAO7I,OAAOmD,QAAQxB,OAAO7B,MACrF,OAAO,2BACAO,GADP,IAEIS,KAAK,2BACET,EAAMS,MADT,IAEAoB,UAAU,2BACH7B,EAAMS,KAAKoB,WADT,kBAEJc,EAFI,2BAGE3C,EAAMS,KAAKoB,UAAUc,IAHvB,IAKDZ,QAAQ,2BACD/B,EAAMS,KAAKoB,UAAUc,GAAKZ,SAD1B,kBAEFa,EAFE,2BAGI5C,EAAMS,KAAKoB,UAAUc,GAAKZ,QAAQ,CAACa,KAHvC,IAICI,GAAGF,cAUnC,SAASgB,GAAa9D,EAAOwI,GACzB,IAAoDjD,EAAhD5C,EAAI6F,EAAO7I,OAAOgD,IAAKC,EAAK4F,EAAO7I,OAAOiD,KAC1CmB,EAAMyE,EAAO7I,OAAOoE,MAAOjB,EAAQ0F,EAAO7I,OAAOmD,QAAQxB,OAAO7B,MAYhE,MAXQ,IAATqD,GACMyC,EAAMC,SAAS1C,EAAQ2C,QAAQ,OAAO,KACnCC,MAAMH,KACNA,EAAM,KAKdA,EAAI,GAGG,2BACAvF,GADP,IAEIS,KAAK,2BACET,EAAMS,MADT,IAEAoB,UAAU,2BACH7B,EAAMS,KAAKoB,WADT,kBAEJc,EAFI,2BAGE3C,EAAMS,KAAKoB,UAAUc,IAHvB,IAKDZ,QAAQ,2BACD/B,EAAMS,KAAKoB,UAAUc,GAAKZ,SAD1B,kBAEFa,EAFE,2BAGI5C,EAAMS,KAAKoB,UAAUc,GAAKZ,QAAQ,CAACa,KAHvC,IAICW,SAAS,2BACFvD,EAAMS,KAAKoB,UAAUc,GAAKZ,QAAQ,CAACa,IAAOW,UADzC,kBAEHQ,EAAOwB,gBAY5C,SAASnB,GAAYpE,EAAOwI,GACxB,IAAI7F,EAAI6F,EAAO7I,OAAOgD,IAAKC,EAAK4F,EAAO7I,OAAOiD,KAC1CmB,EAAMyE,EAAO7I,OAAOoE,MACpBjB,GAAS9C,EAAMS,KAAKoB,UAAUc,GAAKZ,QAAQa,GAAMqB,WAAWF,GAAOtE,MAInE,OAAO,2BACAO,GADP,IAEIS,KAAK,2BACET,EAAMS,MADT,IAEAoB,UAAU,2BACH7B,EAAMS,KAAKoB,WADT,kBAEJc,EAFI,2BAGE3C,EAAMS,KAAKoB,UAAUc,IAHvB,IAKDZ,QAAQ,2BACD/B,EAAMS,KAAKoB,UAAUc,GAAKZ,SAD1B,kBAEFa,EAFE,2BAGI5C,EAAMS,KAAKoB,UAAUc,GAAKZ,QAAQa,IAHtC,IAICqB,WAAW,2BACJjE,EAAMS,KAAKoB,UAAUc,GAAKZ,QAAQa,GAAMqB,YADrC,kBAELF,EAFK,2BAGA/D,EAAMS,KAAKoB,UAAUc,GAAKZ,QAAQa,GAAMqB,WAAWF,IAHnD,IAIHtE,MAAMqD,kBAa7C,SAASyB,GAAavE,EAAOwI,GACzB,IAAI7F,EAAI6F,EAAO7I,OAAOgD,IAAKC,EAAK4F,EAAO7I,OAAOiD,KAC1CmB,EAAMyE,EAAO7I,OAAOoE,MACpBjB,GAAS9C,EAAMS,KAAKoB,UAAUc,GAAKZ,QAAQa,GAAM0B,QAAQP,GAIzD,OAAO,2BACA/D,GADP,IAEIS,KAAK,2BACET,EAAMS,MADT,IAEAoB,UAAU,2BACH7B,EAAMS,KAAKoB,WADT,kBAEJc,EAFI,2BAGE3C,EAAMS,KAAKoB,UAAUc,IAHvB,IAKDZ,QAAQ,2BACD/B,EAAMS,KAAKoB,UAAUc,GAAKZ,SAD1B,kBAEFa,EAFE,2BAGI5C,EAAMS,KAAKoB,UAAUc,GAAKZ,QAAQa,IAHtC,IAIC0B,QAAQ,2BACDtE,EAAMS,KAAKoB,UAAUc,GAAKZ,QAAQa,GAAM0B,SADxC,kBAEFP,EAAOjB,gBAY5C,SAAS0B,GAAaxE,EAAOwI,GACzB,IAAoDjD,EAAhD5C,EAAI6F,EAAO7I,OAAOgD,IAAKC,EAAK4F,EAAO7I,OAAOiD,KAC1CmB,EAAMyE,EAAO7I,OAAOoE,MAAOjB,EAAQ0F,EAAO7I,OAAOmD,QAAQxB,OAAO7B,MAYhE,MAXQ,IAATqD,GACMyC,EAAMC,SAAS1C,EAAQ2C,QAAQ,OAAO,KACnCC,MAAMH,KACNA,EAAM,KAKdA,EAAI,GAGG,2BACAvF,GADP,IAEIS,KAAK,2BACET,EAAMS,MADT,IAEAoB,UAAU,2BACH7B,EAAMS,KAAKoB,WADT,kBAEJc,EAFI,2BAGE3C,EAAMS,KAAKoB,UAAUc,IAHvB,IAKDZ,QAAQ,2BACD/B,EAAMS,KAAKoB,UAAUc,GAAKZ,SAD1B,kBAEFa,EAFE,2BAGI5C,EAAMS,KAAKoB,UAAUc,GAAKZ,QAAQ,CAACa,KAHvC,IAICe,UAAU,2BACH3D,EAAMS,KAAKoB,UAAUc,GAAKZ,QAAQ,CAACa,IAAOe,WADxC,kBAEJI,EAAOwB,gBC7S5C,SAASyD,GAAYhJ,EAAOwI,GACxB,GAAoC,GAAjCpG,eAAKpC,EAAM2B,cAAcU,OAAU,CAC1B,IAAI4G,EAAUjJ,EAAMS,KAAKoB,UACrBqH,EAAalJ,EAAM2B,aACnBwH,EAAUnJ,EAAM4F,UAsEpB,OArEU,eACHmD,eAAK/I,EAAMS,KAAKoB,UAAU2G,EAAO7I,SAE3B,eACNoJ,eAAK/I,EAAM2B,aAAa6G,EAAO7I,SAE5B,eACHoJ,eAAK/I,EAAM4F,UAAU4C,EAAO7I,SAEnCsJ,EAAU,CACN7B,EAAE,CACEpE,GAAG,IACHlB,UAAY,cACZiE,SAAW,OACXE,cAAc,EACdoB,MAAQ,CACJD,EAAE,CACE5E,KAAK,SAET8E,EAAE,CACE9E,KAAK,SAET+E,EAAE,CACE/E,KAAK,SAETgF,EAAE,CACEhF,KAAK,SAETiF,EAAE,CACEjF,KAAK,UAIbwC,gBAAgB,CACZjD,SAAQ,EACRwB,UAAS,EACTmE,aAAY,EACZpD,SAAQ,EACRX,WAAU,GAEdgE,uBAAuB,GACvB5F,QAAQ,GAIR6F,SAAU,IACVC,YAAa,IACbC,aAAc,IACdC,aAAc,IACdC,gBAAiB,IACjBC,QAAQ,GACRC,aAAa,GACbC,QAAQ,KAGhBe,EAAa,2BACNlJ,EAAMkJ,cADD,IAEJ9B,EAAE,CACE5F,GAAG,IACHI,MAAM,WAGlBuH,EAAU,2BACHnJ,EAAMmJ,WADJ,IAEL/B,EAAE,CACE5F,GAAG,IACHW,QAAQ,UAGhB,2BACOnC,GADP,IAEIS,KAAK,2BACET,EAAMS,MADT,IAEAoB,UAAU,eACHoH,KAIXtH,aAAa,eACNuH,GAEPtD,UAAU,eACHuD,GAEPf,WAAW,IAIlB,IAAIgB,EAAIhH,eAAK2G,eAAK/I,EAAM4F,UAAU4C,EAAO7I,SAAS,GAEnD,kCACOK,GADP,IAEIS,KAAK,2BACET,EAAMS,MADT,IAEAoB,UAAU,eAEHkH,eAAK/I,EAAMS,KAAKoB,UAAU2G,EAAO7I,WAK5CgC,aAAa,2BAENoH,eAAK/I,EAAM2B,aAAa6G,EAAO7I,SAF1B,kBAGPyJ,EAAG,CACA5H,GAAG,GAAG4H,EACNxH,MAAM,WAGdgE,UAAU,2BAEHmD,eAAK/I,EAAM4F,UAAU4C,EAAO7I,SAF1B,kBAGJyJ,EAAG,CACA5H,GAAG,GAAG4H,EACNjH,QAAQ,UAGhBiG,WAAWgB,IC1H3B,SAAS3H,GAAOzB,EAAOwI,GAAQ,IAAD,IAE1B,OAAGxI,EAAMoI,YAAYI,EAAO7I,OAC5B,2BACOK,GADP,IAEI4F,UAAU,2BACH5F,EAAM4F,WADJ,uBAEA4C,EAAO7I,OAAQ,CACZ6B,GAAG,GAAGgH,EAAO7I,OACbwC,QAAQ,SAJX,cAMAnC,EAAMoI,WAAY,CACf5G,GAAG,GAAG,CAACxB,EAAMoI,YACbjG,QAAQ,SARX,IAWTR,aAAa,2BACF3B,EAAM2B,cADL,uBAEC6G,EAAO7I,OAAQ,CACZ6B,GAAG,GAAGgH,EAAO7I,OACbiC,MAAM,UAJV,cAMC5B,EAAMoI,WAAY,CACf5G,GAAG,GAAG,CAACxB,EAAMoI,YACbxG,MAAM,UARV,IAWZwG,WAAWI,EAAO7I,SAGlB,eACOK,GAKf,SAAS+E,GAAS/E,EAAOwI,GAAQ,IAAD,EAExBa,EAAGC,EAAEd,EAAO7I,OAAOuD,GAAIqG,EAAG,GAC9B,OAAOf,EAAO7I,OAAOuD,IACjB,IAAK,UAEElD,EAAMS,KAAKoB,UAAU2G,EAAO7I,OAAOwD,IAAI6B,gBAAgBjD,SACtDwH,EAAG,GACHF,GAAE,IAGgE,WAA/DrJ,EAAMS,KAAKoB,UAAU2G,EAAO7I,OAAOwD,IAAIwE,yBACtC4B,EAAGvJ,EAAMS,KAAKoB,UAAU2G,EAAO7I,OAAOwD,IAAIwE,wBAC9C0B,GAAE,GAEN,MAEJ,IAAK,WACErJ,EAAMS,KAAKoB,UAAU2G,EAAO7I,OAAOwD,IAAI6B,gBAAgBzB,UACtDgG,EAAG,GACHF,GAAE,IAGgE,YAA/DrJ,EAAMS,KAAKoB,UAAU2G,EAAO7I,OAAOwD,IAAIwE,yBACtC4B,EAAGvJ,EAAMS,KAAKoB,UAAU2G,EAAO7I,OAAOwD,IAAIwE,wBAC9C0B,GAAE,GAEN,MAEJ,IAAK,aACErJ,EAAMS,KAAKoB,UAAU2G,EAAO7I,OAAOwD,IAAI6B,gBAAgBf,YACtDsF,EAAG,GACHF,GAAE,IAGgE,cAA/DrJ,EAAMS,KAAKoB,UAAU2G,EAAO7I,OAAOwD,IAAIwE,yBACtC4B,EAAGvJ,EAAMS,KAAKoB,UAAU2G,EAAO7I,OAAOwD,IAAIwE,wBAC9C0B,GAAE,GAEN,MAEJ,IAAK,UACErJ,EAAMS,KAAKoB,UAAU2G,EAAO7I,OAAOwD,IAAI6B,gBAAgBV,SACtDiF,EAAG,GACHF,GAAE,IAGgE,WAA/DrJ,EAAMS,KAAKoB,UAAU2G,EAAO7I,OAAOwD,IAAIwE,yBACtC4B,EAAGvJ,EAAMS,KAAKoB,UAAU2G,EAAO7I,OAAOwD,IAAIwE,wBAC9C0B,GAAE,GAEN,MAEJ,IAAK,YACErJ,EAAMS,KAAKoB,UAAU2G,EAAO7I,OAAOwD,IAAI6B,gBAAgBrB,WACtD4F,EAAG,GACHF,GAAE,IAGgE,aAA/DrJ,EAAMS,KAAKoB,UAAU2G,EAAO7I,OAAOwD,IAAIwE,yBACtC4B,EAAGvJ,EAAMS,KAAKoB,UAAU2G,EAAO7I,OAAOwD,IAAIwE,wBAC9C0B,GAAE,GAKd,OAAGC,GAAGC,EAC4D,IAA/DvJ,EAAMS,KAAKoB,UAAU2G,EAAO7I,OAAOwD,IAAIwE,uBAC1C,2BACO3H,GADP,IAEIS,KAAK,2BACET,EAAMS,MADT,IAEAoB,UAAU,2BACH7B,EAAMS,KAAKoB,WADT,kBAEJ2G,EAAO7I,OAAOwD,GAFV,2BAGEnD,EAAMS,KAAKoB,UAAU2G,EAAO7I,OAAOwD,KAHrC,IAKD6B,gBAAgB,2BACThF,EAAMS,KAAKoB,UAAU2G,EAAO7I,OAAOwD,IAAI6B,iBAD/B,uBAEVsE,EAAGD,GAFO,cAGVE,GAAKF,GAHK,IAKf1B,uBAAuBa,EAAO7I,OAAOuD,WAOrD,2BACOlD,GADP,IAEIS,KAAK,2BACET,EAAMS,MADT,IAEAoB,UAAU,2BACH7B,EAAMS,KAAKoB,WADT,kBAEJ2G,EAAO7I,OAAOwD,GAFV,2BAGEnD,EAAMS,KAAKoB,UAAU2G,EAAO7I,OAAOwD,KAHrC,IAKD6B,gBAAgB,2BACThF,EAAMS,KAAKoB,UAAU2G,EAAO7I,OAAOwD,IAAI6B,iBAD/B,kBAEVsE,EAAGD,IAGR1B,uBAAuBa,EAAO7I,OAAOuD,WAMrD,2BACOlD,GADP,IAEIS,KAAK,2BACET,EAAMS,MADT,IAEAoB,UAAU,2BACH7B,EAAMS,KAAKoB,WADT,kBAEJ2G,EAAO7I,OAAOwD,GAFV,2BAGEnD,EAAMS,KAAKoB,UAAU2G,EAAO7I,OAAOwD,KAHrC,IAKD6B,gBAAgB,2BACThF,EAAMS,KAAKoB,UAAU2G,EAAO7I,OAAOwD,IAAI6B,iBAD/B,kBAEVsE,EAAGD,IAGR1B,uBAAuB,WC/J3C,SAAS6B,GAAWxJ,EAAOwI,GACvB,MAAmB,SAAhBxI,EAAMe,SACL,2BACOf,GADP,IAEIe,SAAS,UAIP,CAIEA,SAAS,QACTb,aAAa,GACbS,eAAe,ICd/B,SAASyC,GAAUpD,EAAOwI,GAEtB,IACIiB,EAAK,GAELpB,EAAE,EACFQ,EAAQ7I,EAAMS,KAAKoB,UAAU2G,EAAO7I,QAAQoC,QAC5C2H,EAAOtH,eAAKyG,GAEhB,GAA6D,GAA1DzG,eAAKpC,EAAMS,KAAKoB,UAAU2G,EAAO7I,QAAQoC,SAASM,OACrD,CAII,IAAI,IAAIkG,EAAI,EAAEA,EAAEvI,EAAMS,KAAKoB,UAAU2G,EAAO7I,QAAQsG,cAAcsC,IAC9DkB,EAAK,2BACEA,GADH,kBAEClB,EAAE,EAAG,IAIdM,EAAQ,eAEHR,EAAG,CACA7F,KAAK,UAAU6F,EACfrF,GAAG,IAAIqF,EAAE,IACT9E,SAAS,eACFkG,GAEPxF,WAAW,eACNoE,EAAG,CACArF,GAAGqF,EACH5I,OAAM,IAId6E,QAAQ,CACJqF,QAAO,EACPC,WAAU,EACVC,YAAW,GAEflG,UAAU,eACH8F,SASf,CAGI,IADA,IAAInB,GAAI,GACDA,GAAE,CAELA,GAAE,EACF,IAAI,IAAIC,EAAI,EAAEA,EAAEnG,eAAKpC,EAAMS,KAAKoB,UAAU2G,EAAO7I,QAAQoC,SAASM,OAAOkG,IAGlEF,GAAGjG,eAAKpC,EAAMS,KAAKoB,UAAU2G,EAAO7I,QAAQoC,SAASwG,KACxDD,GAAE,GAEFA,GACAD,IAMR,IAAI,IAAIE,EAAI,EAAEA,EAAEvI,EAAMS,KAAKoB,UAAU2G,EAAO7I,QAAQsG,cAAcsC,IAC9DkB,EAAK,2BACEA,GADH,kBAEClB,EAAE,EAAG,IAKd,IAAI,IAAIA,EAAI,EAAEA,EAAEmB,EAAOrH,OAAO,EAAEkG,IAEzBA,EAAEmB,EAAOrH,SACZwG,EAAQ,2BACDA,GADA,kBAEFa,EAAOnB,GAFL,2BAGIM,EAAQa,EAAOnB,KAHnB,IAICtE,WAAW,2BACJ4E,EAAQa,EAAOnB,IAAItE,YADhB,kBAELoE,EAAG,CACArF,GAAGqF,EACH5I,OAAM,UAS1BoJ,EAAQ,2BACHA,GADE,kBAEJR,EAAG,CACF7F,KAAK,UAAU6F,EACfrF,GAAG,IAAIqF,EAAE,IACT9E,SAAS,eACFkG,GAEPxF,WAAW,eAxGb,IA2GEK,QAAQ,CACJqF,QAAO,EACPC,WAAU,EACVC,YAAW,GAEflG,UAAU,eACH8F,MAMnB,OAAO,2BACAzJ,GADP,IAEIS,KAAK,2BACET,EAAMS,MADT,IAEAoB,UAAU,2BACH7B,EAAMS,KAAKoB,WADT,kBAEJ2G,EAAO7I,OAFH,2BAGEK,EAAMS,KAAKoB,UAAU2G,EAAO7I,SAH9B,IAKDoC,QAAQ,eACD8G,WCnI3B,SAAS5F,GAAajD,EAAOwI,GACzB,IAAIK,EAAU7I,EAAMS,KAAKoB,UAAU2G,EAAO7I,OAAOuD,IAAInB,QAGrD8G,EAAQ,eAEDE,eAAKF,EAAQL,EAAO7I,OAAOwD,KAKlC,IAHA,IAAI2G,EAAO1H,eAAKyG,GAGRN,EAAI,EAAEA,EAAEuB,EAAOzH,OAAOkG,IAG1BM,EAAQ,2BACDA,GADA,kBAEFiB,EAAOvB,GAFL,2BAGIM,EAAQiB,EAAOvB,KAHnB,IAIChF,SAAS,eACFwF,eAAKF,EAAQiB,EAAOvB,IAAIhF,SAAUuG,EAAOzH,OAAO,QAQnE,IAAI,IAAIkG,EAAI,EAAEA,EAAEuB,EAAOzH,OAAOkG,IAG1BM,EAAQ,2BACDA,GADA,kBAEFiB,EAAOvB,GAFL,2BAGIM,EAAQiB,EAAOvB,KAHnB,IAICtE,WAAW,eACJ8E,eAAKF,EAAQiB,EAAOvB,IAAItE,WAAYuE,EAAO7I,OAAOwD,SAUrE,OAAO,2BACAnD,GADP,IAEIS,KAAK,2BACET,EAAMS,MADT,IAEAoB,UAAU,2BACH7B,EAAMS,KAAKoB,WADT,kBAEJ2G,EAAO7I,OAAOuD,GAFV,2BAGElD,EAAMS,KAAKoB,UAAU2G,EAAO7I,OAAOuD,KAHrC,IAKDnB,QAAQ,eAED8G,WCgBZkB,OA/Dd,WAAuD,IAA9B/J,EAA6B,uDAArBiH,EAAcuB,EAAO,uCACnD,OAAOA,EAAO9I,MAGV,IAAK,gBACD,OAAOwH,EAAYlH,EAAOwI,GAE9B,IAAK,aACD,OAAOpF,GAAUpD,EAAOwI,GAE5B,IAAK,eACJ,OAAOQ,GAAYhJ,EAAOwI,GAE3B,IAAK,gBACD,OAAOvF,GAAajD,EAAOwI,GAE/B,IAAK,SACD,OAAO/G,GAAOzB,EAAOwI,GAEzB,IAAK,qBACD,OAAOzD,GAAS/E,EAAOwI,GAE3B,IAAK,cACD,OAAOgB,GAAWxJ,GAEtB,IAAK,YACD,OAAOU,EAASV,EAAOwI,GAE3B,IAAK,cACF,OAAOC,EAAQzI,EAAOwI,GAEzB,IAAK,mBACD,OAAOE,EAAQ1I,EAAOwI,GAE1B,IAAK,kBACD,OAAO7C,EAAS3F,EAAOwI,GAE3B,IAAK,kBACD,OAAOnD,EAAQrF,EAAOwI,GAE1B,IAAK,oBACD,OAAO9F,GAAU1C,EAAOwI,GAE5B,IAAK,kBACD,OAAOzF,GAAW/C,EAAOwI,GAG7B,IAAK,wBACD,OAAO1E,GAAa9D,EAAOwI,GAE/B,IAAK,0BACD,OAAOpE,GAAYpE,EAAOwI,GAE9B,IAAK,uBACD,OAAOjE,GAAavE,EAAOwI,GAE/B,IAAK,yBACD,OAAOhE,GAAaxE,EAAOwI,GAG/B,QAAS,OAAOxI,IClETgK,eAAgB,CAE3BnK,sBCCF,IAAMoK,GCHCC,YAAYC,IDWrBC,IAASC,OACP,cAAC,IAAD,CAAUJ,MAAOA,GAAjB,SACE,cAAC,EAAD,MAEFK,SAASC,eAAe,SAI1B/D,M","file":"static/js/main.f7fdfa1e.chunk.js","sourcesContent":["export const CreateAction =(Type, value) => {\r\n    return {\r\n        type: Type,\r\n        paylot:value,\r\n        \r\n    }\r\n}\r\n \r\n","\r\nimport {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport './Header.css'\r\nimport {CreateAction} from '../../Store/action/MainAction';\r\n\r\nclass Header extends Component {\r\n  \r\n  render(){\r\n    const{DefaultOperation}=this.props.state\r\n    return (\r\n      <div className=\"Header\">\r\n        <div className=\"container_row\">\r\n            <input className=\"con_input\" value={DefaultOperation.FirstInputId} style={{width:\"50px\",height:\"30px\",marginLeft:\"10px\"}} onChange={DefaultOperation.Game==undefined?this.props.InputFid:()=>{}}/>\r\n                \r\n            \r\n            <input className=\"con_input\" value={DefaultOperation.FirstInputName} style={{height:\"30px\",marginLeft:\"10px\"}}  onChange={ DefaultOperation.Game==undefined?this.props.InputFname:()=>{}}/>\r\n                \r\n            \r\n            <div className=\"con_but\" style={{width:\"90px\",height:\"30px\",marginLeft:\"10px\"}} onClick={()=>this.props.PressFirstBut(DefaultOperation)}>\r\n                {\r\n                    DefaultOperation.FirstBut \r\n                }\r\n                \r\n            </div>\r\n        </div>\r\n        <div className=\"container_row\" style={{justifyContent:'flex-end'}}>\r\n             <div className=\"con_but\" style={{width:\"90px\",height:\"30px\"}}>\r\n                export\r\n            </div>\r\n            <div className=\"con_but\" style={{width:\"90px\",height:\"30px\",marginLeft:\"10px\", marginRight:\"10px\"}}>\r\n                import\r\n            </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n  \r\n}\r\n\r\nexport default connect(\r\n  state=>({state:state}),\r\n  dispatch => ({\r\n    PressFirstBut: (DefaultOperation, value) => {\r\n      if(DefaultOperation.Game==undefined)\r\n        dispatch(CreateAction(\"ADD_NEW_SCENE\", value))\r\n        dispatch(CreateAction(\"START_RESET\"))\r\n    },\r\n    InputFid: (event) => {\r\n        dispatch(CreateAction(\"INPUT_FID\", event.target.value))\r\n    },\r\n    InputFname: (event) => {\r\n        dispatch(CreateAction(\"INPUT_FNAME\", event.target.value))\r\n    }\r\n  })\r\n)(Header);","\r\nimport {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport {CreateAction} from '../../../Store/action/MainAction';\r\n\r\n\r\nclass Bookmark extends Component {\r\n  \r\n  render(){\r\n    const{DefaultOperation}=this.props.state\r\n    const{Id}=this.props\r\n    return (\r\n      <div className=\"Bookmark\" onClick={()=>this.props.Select(this.props.Id)} style={{backgroundColor:DefaultOperation.BookmarkList[Id].backg}}>\r\n         {DefaultOperation.Game.SceneList[Id].SceneName}\r\n      </div>\r\n    );\r\n  }\r\n  \r\n}\r\n\r\nexport default connect(\r\n  state=>({state:state}),\r\n  dispatch => ({Select: (value) => {\r\n    \r\n      dispatch(CreateAction(\"SELECT\", value))\r\n      \r\n  },\r\n})\r\n)(Bookmark);\r\n","import {keys} from \"lodash\"\r\nimport {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport {CreateAction} from '../../../../../Store/action/MainAction';\r\n\r\n\r\nclass Symbols extends Component {\r\n    \r\n    \r\n  render(){\r\n    const{DefaultOperation}=this.props.state\r\n    const{Id}=this.props\r\n    return (\r\n      <div className=\"container_column\">\r\n          <div className=\"container_row\" style={{margin:\"20px\"}}>\r\n            <div className=\"container_column\" style={{width:\"100px\", borderRight:\"1px solid black\"}}>\r\n                \r\n                    <div className=\"container_row\" style={{height:\"30px\",width:\"100px\", borderRight:\"1px solid black\"}}>\r\n                        Symbols Name\r\n                    </div>\r\n                    \r\n                \r\n                \r\n                    <div className=\"container_row\" style={{height:\"30px\",width:\"100px\", borderRight:\"1px solid black\"}}>\r\n                        ID\r\n                    </div>\r\n                \r\n            </div>\r\n            \r\n            <div  style={{overflow:\"auto\",display:\"flex\"}}>\r\n            {\r\n                        keys(DefaultOperation.Game.SceneList[Id].Symbols).length!=0?\r\n                            keys(DefaultOperation.Game.SceneList[Id].Symbols)\r\n                            .map((key) =>\r\n                            <div className=\"container_column\" key={key} style={{height:\"100%\",width:\"120px\"}}>\r\n                                <div className=\"container_row\">\r\n                                    <input name=\"SymbolName\" onChange={(e)=>this.props.InputSymN( {vID:Id, vKEY:key, p:this.props, targetV:e})} value={DefaultOperation.Game.SceneList[Id].Symbols[key].name} style={{width:\"100%\"}}/>\r\n                                    \r\n                                </div>\r\n                                <div className=\"container_row\">\r\n                                    <input onChange={(e)=>this.props.InputSymID({vID:Id, vKEY:key, p:this.props, targetV:e})} value={DefaultOperation.Game.SceneList[Id].Symbols[key].id} style={{width:\"100%\"}}/>\r\n                                    \r\n                                </div>\r\n                                <div className=\"con_but\" onClick={()=>this.props.DeleteSymbol({v1:Id,v2:key})} style={{height:\"100%\"}}>\r\n                                    remove\r\n                                </div>\r\n                                \r\n                            </div>\r\n                                ):<div style={{display:\"none\"}}></div>\r\n                                \r\n                        \r\n                    }\r\n            </div>\r\n            <div className=\"con_but\" style={{width:\"50px\"}} onClick={()=>this.props.AddSymbol(Id)}>\r\n                +\r\n            </div>\r\n          </div>\r\n          <div className=\"container_row\">\r\n              <div style={{width:\"50px\"}}  >\r\n\r\n              </div>\r\n          </div>\r\n      </div>\r\n    );\r\n  }\r\n  \r\n}\r\n\r\nexport default connect(\r\n  state=>({state:state}),\r\n  dispatch => ({\r\n      AddSymbol: (value) => {\r\n\r\n        \r\n    \r\n      dispatch(CreateAction(\"ADD_SYMBOL\", value))\r\n      \r\n      \r\n  },\r\n  DeleteSymbol: (value) => {\r\n    \r\n    dispatch(CreateAction(\"DELETE_SYMBOL\", value))\r\n    \r\n    },\r\n    InputSymN: (value) => {\r\n       \r\n    \r\n        dispatch(CreateAction(\"INPUT_SYMBOL_NAME\", value))\r\n        \r\n    },\r\n    InputSymID: (value) => {\r\n       \r\n        console.log(value)\r\n        dispatch(CreateAction(\"INPUT_SYMBOL_ID\", value))\r\n        \r\n    },\r\n})\r\n)(Symbols);\r\n","import {keys} from \"lodash\"\r\nimport {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport {CreateAction} from '../../../../../Store/action/MainAction';\r\n\r\n\r\nclass Paytable extends Component {\r\n  \r\n  render(){\r\n    const{DefaultOperation}=this.props.state\r\n    const{Id}=this.props\r\n    return (\r\n      <div className=\"container_column\" style={{overflow:\"auto\", maxWidth:\"600px\"}}>\r\n          <div className=\"container_row\" >\r\n            <div className=\"container_row\" style={{minWidth:\"100px\",border:\"1px solid black\"}}>\r\n                Symbol\r\n            </div>\r\n            {\r\n                \r\n                keys(DefaultOperation.Game.SceneList[Id].Symbols).length!=0?\r\n                    DefaultOperation.Game.SceneList[Id].Symbols[keys(DefaultOperation.Game.SceneList[Id].Symbols)[0]].Reelstrip!=0?\r\n                keys(DefaultOperation.Game.SceneList[Id].Symbols[keys(DefaultOperation.Game.SceneList[Id].Symbols)[0]].Reelstrip)\r\n                            .map((key, n=1)=>\r\n                            <div key={key}  className=\"container_row\" style={{minWidth:\"60px\", border:\"1px solid black\", justifyContent:\"center\"}}>\r\n                                \r\n                                {n+1}\r\n                            </div>)\r\n                :<div style={{display:\"none\"}}></div>:<div style={{display:\"none\"}}></div>\r\n            }\r\n          </div>\r\n          {\r\n                \r\n                keys(DefaultOperation.Game.SceneList[Id].Symbols).length!=0?\r\n                keys(DefaultOperation.Game.SceneList[Id].Symbols)\r\n                            .map((key)=>\r\n                            <div className=\"container_column\"  key={key}>\r\n                                <div className=\"container_row\">\r\n                                <div  className=\"container_row\" style={{minWidth:\"100px\", border:\"1px solid black\", justifyContent:\"center\", overflow:\"hidden\"}}>\r\n                                    {DefaultOperation.Game.SceneList[Id].Symbols[key].name}\r\n                                </div>\r\n                                {keys(DefaultOperation.Game.SceneList[Id].Symbols[key].Paytable).map((key1)=>\r\n                                    <input onChange={(e)=>this.props.InputSymPayT({vID:Id, vKEY:key, vKEY1:key1, targetV:e})} value={DefaultOperation.Game.SceneList[Id].Symbols[key].Paytable[key1]} key={key1}  className=\"container_row\" style={{minWidth:\"60px\", border:\"1px solid black\", textAlign:\"center\"}}/>\r\n                                    \r\n                                )}\r\n                                </div>\r\n                                \r\n                                \r\n                            </div>\r\n                            )\r\n                :<div></div>\r\n            }\r\n    </div>   \r\n    );\r\n  }\r\n  \r\n}\r\n\r\nexport default connect(\r\n  state=>({state:state}),\r\n  dispatch => ({\r\n    InputSymPayT: (value) => {\r\n       \r\n    \r\n      dispatch(CreateAction(\"INPUT_SYMBOL_PAYTABLE\", value))\r\n    },\r\n  })\r\n)(Paytable);\r\n","import {keys} from \"lodash\"\r\nimport {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport {CreateAction} from '../../../../../Store/action/MainAction';\r\n\r\n\r\nclass Substiture extends Component {\r\n  \r\n  render(){\r\n    const{DefaultOperation}=this.props.state\r\n    const{Id}=this.props\r\n    return (\r\n      <div className=\"container_column\" style={{overflow:\"auto\", maxWidth:\"800px\"}}>\r\n          <div className=\"container_row\" >\r\n            <div className=\"container_row\" style={{minWidth:\"100px\",border:\"1px solid black\"}}>\r\n                Substiture\r\n            </div>\r\n            {\r\n                \r\n                keys(DefaultOperation.Game.SceneList[Id].Symbols).length!=0?\r\n                keys(DefaultOperation.Game.SceneList[Id].Symbols)\r\n                            .map((key)=>\r\n                            <div key={key}  className=\"container_row\" style={{minWidth:\"100px\", border:\"1px solid black\", justifyContent:\"center\"}}>\r\n                                {DefaultOperation.Game.SceneList[Id].Symbols[key].name}\r\n                            </div>)\r\n                :<div></div>\r\n            }\r\n          </div>\r\n          {\r\n                \r\n                keys(DefaultOperation.Game.SceneList[Id].Symbols).length!=0?\r\n                keys(DefaultOperation.Game.SceneList[Id].Symbols)\r\n                            .map((key)=>\r\n                            <div className=\"container_column\"  key={key}>\r\n                                <div className=\"container_row\">\r\n                                <div  className=\"container_row\" style={{minWidth:\"100px\", border:\"1px solid black\", justifyContent:\"center\", overflow:\"hidden\"}}>\r\n                                    {DefaultOperation.Game.SceneList[Id].Symbols[key].name}\r\n                                </div>\r\n                                {keys(DefaultOperation.Game.SceneList[Id].Symbols[key].Substiture).map((key1)=>\r\n                                    <div key={key1}  className=\"container_row\" style={{minWidth:\"100px\", border:\"1px solid black\", justifyContent:\"center\"}}>\r\n                                      <Checkbox\r\n                                        checked={DefaultOperation.Game.SceneList[Id].Symbols[key].Substiture[key1].value}\r\n                                        onChange={()=>this.props.InputSymSub({vID:Id, vKEY:key, vKEY1:key1})}\r\n                                        \r\n                                        color=\"primary\"\r\n                                      />\r\n                                      \r\n                                    </div>\r\n                                )}\r\n                                </div>\r\n                                \r\n                                \r\n                            </div>\r\n                            )\r\n                :<div></div>\r\n            }\r\n    </div>   \r\n    );\r\n  }\r\n  \r\n}\r\n\r\nexport default connect(\r\n  state=>({state:state}),\r\n  dispatch => ({\r\n    InputSymSub: (value) => {\r\n       \r\n    \r\n      dispatch(CreateAction(\"INPUT_SYMBOL_SUBSTITURE\", value))\r\n    },\r\n  })\r\n)(Substiture);\r\n","import {keys} from \"lodash\"\r\nimport {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\n\r\nimport {CreateAction} from '../../../../../Store/action/MainAction';\r\n\r\n\r\nclass Special extends Component {\r\n  \r\n  render(){\r\n    const{DefaultOperation}=this.props.state\r\n    const{Id}=this.props\r\n    return (\r\n      <div className=\"container_column\" style={{overflow:\"auto\", maxWidth:\"800px\"}}>\r\n          <div className=\"container_row\" >\r\n            <div className=\"container_row\" style={{minWidth:\"100px\",border:\"1px solid black\"}}>\r\n                Symbols\r\n            </div>\r\n            \r\n                \r\n                \r\n                            <div  className=\"container_row\" style={{minWidth:\"100px\", border:\"1px solid black\", justifyContent:\"center\"}}>\r\n                                isWild\r\n                            </div>\r\n                            <div  className=\"container_row\" style={{minWidth:\"100px\", border:\"1px solid black\", justifyContent:\"center\"}}>\r\n                                isScatter\r\n                            </div>\r\n                            <div  className=\"container_row\" style={{minWidth:\"100px\", border:\"1px solid black\", justifyContent:\"center\"}}>\r\n                                isSpecific\r\n                            </div>\r\n                \r\n            \r\n          </div>\r\n          {\r\n                \r\n                keys(DefaultOperation.Game.SceneList[Id].Symbols).length!=0?\r\n                keys(DefaultOperation.Game.SceneList[Id].Symbols)\r\n                            .map((key)=>\r\n                            <div className=\"container_column\"  key={key}>\r\n                                <div className=\"container_row\">\r\n                                <div  className=\"container_row\" style={{minWidth:\"100px\", border:\"1px solid black\", justifyContent:\"center\", overflow:\"hidden\"}}>\r\n                                    {DefaultOperation.Game.SceneList[Id].Symbols[key].name}\r\n                                </div>\r\n                                {keys(DefaultOperation.Game.SceneList[Id].Symbols[key].Special).map((key1)=>\r\n                                    <div key={key1}  className=\"container_row\" style={{minWidth:\"100px\", border:\"1px solid black\", justifyContent:\"center\"}}>\r\n                                        <Checkbox\r\n                                        checked={DefaultOperation.Game.SceneList[Id].Symbols[key].Special[key1]}\r\n                                        onChange={()=>this.props.InputSymSpec({vID:Id, vKEY:key, vKEY1:key1})}\r\n                                        color=\"primary\"\r\n                                      />\r\n                                        \r\n                                    </div>\r\n                                )}\r\n                                </div>\r\n                                \r\n                                \r\n                            </div>\r\n                            )\r\n                :<div></div>\r\n            }\r\n    </div>   \r\n    );\r\n  }\r\n  \r\n}\r\n\r\nexport default connect(\r\n  state=>({state:state}),\r\n  dispatch => ({\r\n    InputSymSpec: (value) => {\r\n       \r\n    \r\n        dispatch(CreateAction(\"INPUT_SYMBOL_SPECIAL\", value))\r\n      },\r\n  })\r\n)(Special);\r\n","import {keys} from \"lodash\"\r\nimport {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport {CreateAction} from '../../../../../Store/action/MainAction';\r\n\r\n\r\nclass Paytable extends Component {\r\n  \r\n  render(){\r\n    const{DefaultOperation}=this.props.state\r\n    const{Id}=this.props\r\n    return (\r\n      <div className=\"container_column\" style={{overflow:\"auto\", maxWidth:\"600px\"}}>\r\n          <div className=\"container_row\" >\r\n            <div className=\"container_row\" style={{minWidth:\"100px\",border:\"1px solid black\"}}>\r\n                Symbol\r\n            </div>\r\n            {\r\n                \r\n                keys(DefaultOperation.Game.SceneList[Id].Symbols).length!=0?\r\n                    DefaultOperation.Game.SceneList[Id].Symbols[keys(DefaultOperation.Game.SceneList[Id].Symbols)[0]].Reelstrip!=0?\r\n                keys(DefaultOperation.Game.SceneList[Id].Symbols[keys(DefaultOperation.Game.SceneList[Id].Symbols)[0]].Reelstrip)\r\n                            .map((key, n=1)=>\r\n                            <div key={key}  className=\"container_row\" style={{minWidth:\"60px\", border:\"1px solid black\", justifyContent:\"center\"}}>\r\n                                \r\n                                {\"Reel \"+(n+1)}\r\n                            </div>)\r\n                :<div style={{display:\"none\"}}></div>:<div style={{display:\"none\"}}></div>\r\n            }\r\n          </div>\r\n          {\r\n                \r\n                keys(DefaultOperation.Game.SceneList[Id].Symbols).length!=0?\r\n                keys(DefaultOperation.Game.SceneList[Id].Symbols)\r\n                            .map((key)=>\r\n                            <div className=\"container_column\"  key={key}>\r\n                                <div className=\"container_row\">\r\n                                <div  className=\"container_row\" style={{minWidth:\"100px\", border:\"1px solid black\", justifyContent:\"center\", overflow:\"hidden\"}}>\r\n                                    {DefaultOperation.Game.SceneList[Id].Symbols[key].name}\r\n                                </div>\r\n                                {\r\n                                    keys(DefaultOperation.Game.SceneList[Id].Symbols[key].Reelstrip).map((key1)=>\r\n                                        <input onChange={(e)=>this.props.InputSymReel({vID:Id, vKEY:key, vKEY1:key1, targetV:e})} value={DefaultOperation.Game.SceneList[Id].Symbols[key].Reelstrip[key1]} key={key1}  className=\"container_row\" style={{minWidth:\"60px\", border:\"1px solid black\", textAlign:\"center\"}}/>\r\n                                    \r\n                                    )\r\n                                }\r\n                                </div>\r\n                                \r\n                                \r\n                            </div>\r\n                            )\r\n                :<div style={{display:\"none\"}}></div>\r\n            }\r\n    </div>   \r\n    );\r\n  }\r\n  \r\n}\r\n\r\nexport default connect(\r\n  state=>({state:state}),\r\n  dispatch => ({\r\n    InputSymReel: (value) => {\r\n       \r\n    \r\n      dispatch(CreateAction(\"INPUT_SYMBOL_REELSTRIP\", value))\r\n    },\r\n  })\r\n)(Paytable);\r\n","\r\nimport {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport {CreateAction} from '../../../../Store/action/MainAction';\r\nimport './DetailСofiguration.css'\r\nimport Symbols from './Symbols/Symbols'\r\nimport Paytable from './Paytable/Paytable'\r\nimport Substiture from './Substitutes/Substitutes'\r\nimport Special from './Secial/Secial'\r\nimport Reelstrip from './Reelstrip/Reelstrip'\r\n\r\nlet butStyle={height:\"30px\", justifyContent:\"flex-start\" }\r\nlet SlectedB={background:\"green\",height:\"30px\", justifyContent:\"flex-start\" }\r\nlet SlectedD={display:\"flex\"}\r\nclass DetailСofiguration extends Component {\r\n\r\n  render(){\r\n    const{DefaultOperation}=this.props.state\r\n    const{Id}=this.props\r\n    return (\r\n        <div className=\"containe_column\" style={{marginTop:\"40px\",}}>\r\n            <div className=\"con_sub\" onClick={()=>this.props.SelectMC({v1:\"Symbols\",v2:Id})} style={DefaultOperation.Game.SceneList[Id].ScernTypeOfConf.Symbols?SlectedB:butStyle}>\r\n                Symbols\r\n            </div>\r\n            <div className=\"table_scrin\" style={DefaultOperation.Game.SceneList[Id].ScernTypeOfConf.Symbols?SlectedD:{display:\"none\"}}>\r\n                <Symbols\r\n                    Id={Id}\r\n                />\r\n            </div>\r\n            <div className=\"con_sub\" onClick={()=>this.props.SelectMC({v1:\"Paytable\",v2:Id})} style={DefaultOperation.Game.SceneList[Id].ScernTypeOfConf.Paytable?SlectedB:butStyle}>\r\n                Paytable\r\n            </div>\r\n            <div className=\"table_scrin\" style={DefaultOperation.Game.SceneList[Id].ScernTypeOfConf.Paytable?SlectedD:{display:\"none\"}}>\r\n                <Paytable\r\n                    Id={Id}\r\n                />\r\n            </div>\r\n            <div className=\"con_sub\" onClick={()=>this.props.SelectMC({v1:\"Substiture\",v2:Id})} style={DefaultOperation.Game.SceneList[Id].ScernTypeOfConf.Substiture?SlectedB:butStyle}>\r\n                Substiture\r\n            </div>\r\n            <div className=\"table_scrin\" style={DefaultOperation.Game.SceneList[Id].ScernTypeOfConf.Substiture?SlectedD:{display:\"none\"}}>\r\n                \r\n                <Substiture Id={Id}/>\r\n            </div>\r\n            <div className=\"con_sub\" onClick={()=>this.props.SelectMC({v1:\"Special\",v2:Id})} style={DefaultOperation.Game.SceneList[Id].ScernTypeOfConf.Special?SlectedB:butStyle}>\r\n                Special\r\n            </div>\r\n            <div className=\"table_scrin\" style={DefaultOperation.Game.SceneList[Id].ScernTypeOfConf.Special?SlectedD:{display:\"none\"}}>\r\n                <Special\r\n                     Id={Id}\r\n                />\r\n            </div>\r\n            <div className=\"con_sub\" onClick={()=>this.props.SelectMC({v1:\"Reelstrip\",v2:Id})} style={DefaultOperation.Game.SceneList[Id].ScernTypeOfConf.Reelstrip?SlectedB:butStyle}>\r\n                Reelstrip\r\n            </div>\r\n            <div className=\"table_scrin\" style={DefaultOperation.Game.SceneList[Id].ScernTypeOfConf.Reelstrip?SlectedD:{display:\"none\"}}>\r\n                <Reelstrip\r\n                    Id={Id}\r\n                />\r\n            </div>\r\n        </div>\r\n    );\r\n  }\r\n  \r\n}\r\n\r\nexport default connect(\r\n  state=>({state:state}),\r\n  dispatch => ({SelectMC: (value) => {\r\n    \r\n      dispatch(CreateAction(\"SELECT_MENU_CONFIG\", value))\r\n      \r\n  },\r\n})\r\n)(DetailСofiguration);\r\n","\r\nimport {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\nimport Select from '@material-ui/core/Select';\r\nimport InputLabel from '@material-ui/core/InputLabel'\r\nimport MenuItem from '@material-ui/core/MenuItem'\r\n\r\n\r\nimport {CreateAction} from '../../../Store/action/MainAction';\r\nimport './ScrenScene.css'\r\nimport DetailConfiguration from './DetailСofiguration/DetailСofiguration'\r\n\r\n\r\nclass ScrenScene extends Component {\r\n  NS=(event)=>{\r\n    this.props.InputNS({v1:event.target.value, v2:this.props.Id})\r\n  }\r\n  GT = (event) => {\r\n   \r\n    this.props.InputGT({v1:event.target.value, v2:this.props.Id} );\r\n  };\r\n  NOR=(event)=>{\r\n    let num\r\n    let a = NaN\r\n     if(event.target.value!=\"\"){\r\n      num = parseInt(event.target.value.replace(/\\D+/g,\"\"))\r\n      \r\n      if(isNaN(num)){\r\n        num = \"\"\r\n        \r\n      }\r\n      this.props.InputNOR({v1:num, v2:this.props.Id} );\r\n     }\r\n     \r\n    else {\r\n      num = \"\"\r\n      this.props.InputNOR({v1:num, v2:this.props.Id} );\r\n    }\r\n    \r\n  }\r\n  render(){\r\n    const{DefaultOperation}=this.props.state\r\n    const{Id}=this.props\r\n    return (\r\n      <div className=\"ScrenScene\" style={{display:DefaultOperation.ScrenList[Id].display}}>\r\n          <div className=\"container_column\">\r\n            <div   className=\"container_row\">\r\n\r\n            <div  className=\"container_column\">\r\n            \r\n            <InputLabel id=\"SceneName\">SceneName </InputLabel>\r\n            <input className=\"con_input\" value={DefaultOperation.Game.SceneList[Id].SceneName} onChange={this.NS} style={{height:\"30px\"}}/>\r\n          \r\n            <InputLabel id=\"GameType\">GameType</InputLabel>\r\n            <Select labelId=\"GameType\" id=\"select\" onChange={this.GT} value={DefaultOperation.Game.SceneList[Id].GameType}>\r\n              <MenuItem value=\"Slot\">Slot</MenuItem>\r\n              <MenuItem value=\"Bonus\">Bonus</MenuItem>\r\n            </Select>\r\n          \r\n          \r\n            <InputLabel id=\"NumberofReels\">Number of Reels </InputLabel>\r\n            <input className=\"con_input\" onChange={this.NOR} style={{height:\"30px\"}} value={DefaultOperation.Game.SceneList[Id].NumberOfReels}/>\r\n          \r\n          </div>\r\n          <div className=\"container_row\" style={{justifyContent:\"flex-end\"}}>\r\n            <div className=\"con_but\" style={{width:\"90px\",height:\"25px\"}} onClick={()=>this.props.Delete(Id)}>\r\n              Delete\r\n            </div>\r\n          </div>\r\n\r\n            </div>\r\n            <DetailConfiguration\r\n              Id={Id}\r\n            />\r\n          </div>  \r\n      </div>\r\n    );\r\n  }\r\n  \r\n}\r\n\r\nexport default connect(\r\n  state=>({state:state}),\r\n  dispatch => ({\r\n    Delete: (value) => {\r\n      dispatch(CreateAction(\"DELETE_SCENE\", value))\r\n    },\r\n    InputNS: (value) => {\r\n        dispatch(CreateAction(\"INPUT_SCENE_NAME\", value))\r\n    },\r\n    InputGT: (value) => {\r\n        dispatch(CreateAction(\"INPUT_GAME_TYPE\", value))\r\n    },\r\n    InputNOR: (value) => {\r\n      dispatch(CreateAction(\"INPUT_NUM_REELS\", value))\r\n  },\r\n  })\r\n)(ScrenScene);\r\n","import {keys} from \"lodash\"\r\nimport {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport {CreateAction} from '../../Store/action/MainAction';\r\nimport './SlotsScenes.css'\r\nimport Bookmark from './ScrenScene/Bookmark'\r\nimport ScrenScene from './ScrenScene/ScrenScene'\r\n\r\n\r\nclass SlotsScenes extends Component {\r\n   \r\n\r\n  render(){\r\n    const{DefaultOperation}=this.props.state\r\n    return (\r\n      <div className=\"SlotsScenes\">\r\n        <div className=\"container_row\" style={{height:\"50px\"}}>\r\n            <div  style={{display:\"flex\",maxWidth:\"100%\",overflow:\"auto\"}}>\r\n                \r\n                {\r\n                   DefaultOperation.Game!=undefined?\r\n                    keys(DefaultOperation.Game.SceneList)\r\n                    .map((key) =>\r\n                        <Bookmark key={key}\r\n                            Id={key}\r\n                        />\r\n                    ):<div style={{maxWidth:\"0\",display:\"none\"}}></div>\r\n                    \r\n                        \r\n                }\r\n            </div>\r\n            <div className=\"con_but\" style={{marginLeft:\"5px\",height:\"30px\", width:\"30px\", minWidth:\"30px\"}} onClick={this.props.AddScene}>\r\n                +\r\n            </div>\r\n        </div>\r\n        <div className=\"container_column\">\r\n        {\r\n                   DefaultOperation.Game!=undefined?\r\n                    keys(DefaultOperation.Game.SceneList)\r\n                    .map((key) =>\r\n                        <ScrenScene key={key}\r\n                            Id={key}\r\n                        />\r\n                    ):<div></div>\r\n                    \r\n                        \r\n                }\r\n             \r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n  \r\n}\r\n\r\nexport default connect(\r\n  state=>({state:state}),\r\n  dispatch => ({\r\n    AddScene: (state) => {\r\n        \r\n          dispatch(CreateAction(\"ADD_NEW_SCENE\"))\r\n          \r\n      },\r\n  })\r\n)(SlotsScenes);\r\n","import '../common/Style/main.css'\nimport {Component} from 'react'\nimport {connect} from 'react-redux'\n\nimport {CreateAction} from '../Store/action/MainAction';\nimport Header from '../componentsJS/Header/Header'\nimport SlotsScenes from '../componentsJS/SlotsScenes/SlotsScenes'\n\nclass App extends Component {\n  \n  render(){\n    return (\n      <div className=\"App\">\n         <Header/>\n         {\n                this.props.State.DefaultOperation.Game!=undefined?<SlotsScenes/>:<div></div>\n          }\n      </div>\n    );\n  }\n  \n}\n\nexport default connect(\n  state=>({State:state}),\n  dispatch => ({\n    AddContact: () => {\n      dispatch(CreateAction())\n    }\n  })\n)(App);\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","const initialState = {\r\n    FirstBut:\"Start\",\r\n    FirstInputId:\"\",\r\n    FirstInputName:\"\"\r\n}\r\n \r\nexport default initialState;","\r\nimport {keys} from \"lodash\"\r\nimport {omit} from 'lodash'\r\n\r\n\r\nfunction CreateScene(state){\r\n    if(state.FirstBut==\"Start\"){\r\n        return{\r\n            ...state,\r\n            Game:{\r\n                GameName:state.FirstInputName,\r\n                Id:state.FirstInputId,\r\n                SceneList:{\r\n                    0:{\r\n                        id:\"0\",\r\n                        SceneName : \"SceneName_\"+0,\r\n                        GameType : \"Slot\",\r\n                        NumberOfReels:5,\r\n                        Reels : {\r\n                            0:{\r\n                                name:\"Reel1\"\r\n                            },\r\n                            1:{\r\n                                name:\"Reel1\"\r\n                            },\r\n                            2:{\r\n                                name:\"Reel1\"\r\n                            },\r\n                            3:{\r\n                                name:\"Reel1\"\r\n                            },\r\n                            4:{\r\n                                name:\"Reel1\"\r\n                            },\r\n                        },\r\n                        ScernTypeOfConf:{\r\n                            Symbols:false,\r\n                            Paytable:false,\r\n                            Substitutes:false,\r\n                            Special:false,\r\n                            Reelstrip:false,\r\n                        },\r\n                        SlectedScernTypeOfConf:\"\",\r\n                        Symbols:{\r\n                            \r\n                        },\r\n                        \r\n                        TotalRTP: \"0\",\r\n                        BaseGameRTP: \"0\",\r\n                        FreespinsRTP: \"0\",\r\n                        BonusGameRTP: \"0\",\r\n                        BasegameHitRate: \"0\",\r\n                        HitRate:{},\r\n                        Combinations:{},\r\n                        Returns:{}\r\n                    }\r\n                }\r\n            },\r\n            \r\n            \r\n            ScrenList:{\r\n                ...state.ScrenList,\r\n                    0:{\r\n                        Id:\"\"+0+\"\",\r\n                        display:\"flex\"\r\n                    },\r\n                },\r\n                BookmarkList:{\r\n                    ...state.BookmarkList,\r\n                        0:{\r\n                            Id:\"\"+0+\"\",\r\n                            backg:\"green\"\r\n                        },\r\n                    },\r\n                BookmarkOn:0\r\n            \r\n        }\r\n           \r\n    }\r\n    else if(keys(state.Game.SceneList).length==0){\r\n        return{\r\n            ...state,\r\n            Game:{\r\n                GameName:state.FirstInputName,\r\n                Id:state.FirstInputId,\r\n                SceneList:{\r\n                    0:{\r\n                        id:\"0\",\r\n                        SceneName : \"SceneName_\"+0,\r\n                        GameType : \"Slot\",\r\n                        NumberOfReels:5,\r\n                        Reels : {\r\n                            0:{\r\n                                name:\"Reel1\"\r\n                            },\r\n                            1:{\r\n                                name:\"Reel1\"\r\n                            },\r\n                            2:{\r\n                                name:\"Reel1\"\r\n                            },\r\n                            3:{\r\n                                name:\"Reel1\"\r\n                            },\r\n                            4:{\r\n                                name:\"Reel1\"\r\n                            },\r\n                        },\r\n                        ScernTypeOfConf:{\r\n                            Symbols:false,\r\n                            Paytable:false,\r\n                            Substitutes:false,\r\n                            Special:false,\r\n                            Reelstrip:false,\r\n                        },\r\n                        SlectedScernTypeOfConf:\"\",\r\n                        Symbols:{\r\n                            \r\n                        },\r\n                        \r\n                        TotalRTP: \"0\",\r\n                        BaseGameRTP: \"0\",\r\n                        FreespinsRTP: \"0\",\r\n                        BonusGameRTP: \"0\",\r\n                        BasegameHitRate: \"0\",\r\n                        HitRate:{},\r\n                        Combinations:{},\r\n                        Returns:{}\r\n                    }\r\n                }\r\n            },\r\n            \r\n            \r\n            ScrenList:{\r\n                ...state.ScrenList,\r\n                    0:{\r\n                        Id:\"\"+0+\"\",\r\n                        display:\"flex\"\r\n                    },\r\n                },\r\n                BookmarkList:{\r\n                    ...state.BookmarkList,\r\n                        0:{\r\n                            Id:\"\"+0+\"\",\r\n                            backg:\"green\"\r\n                        },\r\n                    },\r\n                BookmarkOn:0\r\n            \r\n        }\r\n    }\r\n    else{\r\n        let N = 0\r\n        let C = false\r\n        while(!C){\r\n            \r\n            C=true;\r\n            for(let i = 0;i<keys(state.Game.SceneList).length;i++)\r\n            \r\n            {\r\n                if(N==keys(state.Game.SceneList)[i])\r\n                 C=false;\r\n            }\r\n            if(!C)\r\n                N++;\r\n            \r\n        }\r\n        \r\n        \r\n        \r\n        return{\r\n            ...state,\r\n            Game:{\r\n                ...state.Game,\r\n                SceneList:{\r\n                    ...state.Game.SceneList,\r\n                    [N]:{\r\n                        \r\n                        id:[N],\r\n                        SceneName : \"SceneName_\"+[N],\r\n                        GameType : \"Slot\",\r\n                        NumberOfReels:5,\r\n                        Reels : {\r\n                            0:{\r\n                                name:\"Reel1\"\r\n                            },\r\n                            1:{\r\n                                name:\"Reel1\"\r\n                            },\r\n                            2:{\r\n                                name:\"Reel1\"\r\n                            },\r\n                            3:{\r\n                                name:\"Reel1\"\r\n                            },\r\n                            4:{\r\n                                name:\"Reel1\"\r\n                            }\r\n                        },\r\n                        ScernTypeOfConf:{\r\n                            Symbols:false,\r\n                            Paytable:false,\r\n                            Substitutes:false,\r\n                            Special:false,\r\n                            Reelstrip:false,\r\n                        },\r\n                        SlectedScernTypeOfConf:\"\",\r\n                        Symbols:{\r\n                            \r\n                        },\r\n                        \r\n                        TotalRTP: \"0\",\r\n                        BaseGameRTP: \"0\",\r\n                        FreespinsRTP: \"0\",\r\n                        BonusGameRTP: \"0\",\r\n                        BasegameHitRate: \"0\",\r\n                        HitRate:{},\r\n                        Combinations:{},\r\n                        Returns:{}\r\n                    }\r\n                }\r\n            },\r\n            ScrenList:{\r\n            ...state.ScrenList,\r\n                [N]:{\r\n                    Id:\"\"+N+\"\",\r\n                    display:\"none\"\r\n                },\r\n            },\r\n            BookmarkList:{\r\n                ...state.BookmarkList,\r\n                    [N]:{\r\n                        Id:\"\"+N+\"\",\r\n                        backg:\"white\"\r\n                    },\r\n                },\r\n        }\r\n    }\r\n    return state\r\n}\r\nexport default CreateScene","import {keys} from \"lodash\"\r\nimport {omit} from 'lodash'\r\nimport Paytable from \"../../../componentsJS/SlotsScenes/ScrenScene/DetailСofiguration/Paytable/Paytable\"\r\n\r\nfunction InputFid(state, action){\r\n    return{\r\n        ...state,\r\n        FirstInputId: action.paylot\r\n    }\r\n}\r\nfunction InputFN(state, action){\r\n    return{\r\n        ...state,\r\n        FirstInputName: action.paylot\r\n    }\r\n}\r\nfunction InputSN(state, action){\r\n    return {\r\n        ...state,\r\n        Game:{\r\n            ...state.Game,\r\n            SceneList:{\r\n                ...state.Game.SceneList,\r\n                [action.paylot.v2]:{\r\n                    ...state.Game.SceneList[action.paylot.v2],\r\n                    SceneName : action.paylot.v1,\r\n                }\r\n            }\r\n        },\r\n        \r\n        \r\n    }\r\n}\r\nfunction InputGT(state, action){\r\n    return {\r\n        ...state,\r\n        Game:{\r\n            ...state.Game,\r\n            SceneList:{\r\n                ...state.Game.SceneList,\r\n                [action.paylot.v2]:{\r\n                    ...state.Game.SceneList[action.paylot.v2],\r\n                    GameType : action.paylot.v1,\r\n                }\r\n            }\r\n        },\r\n        \r\n        \r\n    }\r\n}\r\n\r\nfunction InputNOR(state, action){\r\n    let Nof = state.Game.SceneList[action.paylot.v2].NumberOfReels\r\n    let nValue = action.paylot.v1\r\n    let symbols=state.Game.SceneList[action.paylot.v2].Symbols\r\n    if(nValue<Nof){\r\n        for(let i = nValue+1;i<=Nof;i++){\r\n            for(let a = 0;a<keys(symbols).length;a++){\r\n                symbols={\r\n                    ...symbols,\r\n                    [keys(symbols)[a]]:{\r\n                        ...symbols[keys(symbols)[a]],\r\n                        Reelstrip:{\r\n                            ...omit(symbols[keys(symbols)[a]].Reelstrip, i)\r\n                        },\r\n                        Paytable:{\r\n                            ...omit(symbols[keys(symbols)[a]].Paytable, i)\r\n                        }\r\n                    }\r\n                }\r\n                \r\n            }\r\n        }\r\n    }\r\n    else if(nValue>Nof){\r\n        for(let i = Nof+1;i<=nValue;i++){\r\n            for(let a = 0;a<keys(symbols).length;a++){\r\n                symbols={\r\n                    ...symbols,\r\n                    [keys(symbols)[a]]:{\r\n                        ...symbols[keys(symbols)[a]],\r\n                        Reelstrip:{\r\n                            ...symbols[keys(symbols)[a]].Reelstrip,\r\n                            [i]:0\r\n                        },\r\n                        Paytable:{\r\n                            ...symbols[keys(symbols)[a]].Paytable,\r\n                            [i]:0\r\n                        }\r\n                    }\r\n                }\r\n                \r\n            }\r\n        }\r\n    }\r\n    return {\r\n        ...state,\r\n        Game:{\r\n            ...state.Game,\r\n            SceneList:{\r\n                ...state.Game.SceneList,\r\n                [action.paylot.v2]:{\r\n                    ...state.Game.SceneList[action.paylot.v2],\r\n                    NumberOfReels : nValue,\r\n                    Symbols:{\r\n                        ...symbols\r\n                    }\r\n                }\r\n            }\r\n        },\r\n        \r\n    }\r\n}\r\nfunction InputSymN(state, action){\r\n    let vID=action.paylot.vID, vKEY=action.paylot.vKEY, targetV=action.paylot.targetV.target.value\r\n        return {\r\n            ...state,\r\n            Game:{\r\n                ...state.Game,\r\n                SceneList:{\r\n                    ...state.Game.SceneList,\r\n                    [vID]:{\r\n                        ...state.Game.SceneList[vID],\r\n                        \r\n                        Symbols:{\r\n                            ...state.Game.SceneList[vID].Symbols,\r\n                            [vKEY]:{\r\n                                ...state.Game.SceneList[vID].Symbols[[vKEY]],\r\n                                name:targetV\r\n                            }\r\n                        },\r\n                    }\r\n                }\r\n            },\r\n            \r\n        }\r\n\r\n}\r\nfunction InputSymID(state, action){\r\n    let vID=action.paylot.vID, vKEY=action.paylot.vKEY, targetV=action.paylot.targetV.target.value\r\n        return {\r\n            ...state,\r\n            Game:{\r\n                ...state.Game,\r\n                SceneList:{\r\n                    ...state.Game.SceneList,\r\n                    [vID]:{\r\n                        ...state.Game.SceneList[vID],\r\n                        \r\n                        Symbols:{\r\n                            ...state.Game.SceneList[vID].Symbols,\r\n                            [vKEY]:{\r\n                                ...state.Game.SceneList[vID].Symbols[[vKEY]],\r\n                                id:targetV\r\n                            }\r\n                        },\r\n                    }\r\n                }\r\n            },\r\n            \r\n        }\r\n\r\n}\r\nfunction InputSymPayT(state, action){\r\n    let vID=action.paylot.vID, vKEY=action.paylot.vKEY, num\r\n    let vKEY1=action.paylot.vKEY1, targetV=action.paylot.targetV.target.value\r\n    if(targetV!=\"\"){\r\n             num = parseInt(targetV.replace(/\\D+/g,\"\"))\r\n             if(isNaN(num)){\r\n                num = \"\"\r\n                \r\n              }\r\n    }\r\n    else{\r\n        num=\"\"\r\n    }\r\n    \r\n        return {\r\n            ...state,\r\n            Game:{\r\n                ...state.Game,\r\n                SceneList:{\r\n                    ...state.Game.SceneList,\r\n                    [vID]:{\r\n                        ...state.Game.SceneList[vID],\r\n                        \r\n                        Symbols:{\r\n                            ...state.Game.SceneList[vID].Symbols,\r\n                            [vKEY]:{\r\n                                ...state.Game.SceneList[vID].Symbols[[vKEY]],\r\n                                Paytable:{\r\n                                    ...state.Game.SceneList[vID].Symbols[[vKEY]].Paytable,\r\n                                    [vKEY1]:num\r\n                                }\r\n                            }\r\n                        },\r\n                    }\r\n                }\r\n            },\r\n            \r\n        }\r\n\r\n}\r\n\r\nfunction InputSymSub(state, action){\r\n    let vID=action.paylot.vID, vKEY=action.paylot.vKEY\r\n    let vKEY1=action.paylot.vKEY1\r\n    let targetV=!state.Game.SceneList[vID].Symbols[vKEY].Substiture[vKEY1].value\r\n    \r\n    \r\n    \r\n        return {\r\n            ...state,\r\n            Game:{\r\n                ...state.Game,\r\n                SceneList:{\r\n                    ...state.Game.SceneList,\r\n                    [vID]:{\r\n                        ...state.Game.SceneList[vID],\r\n                        \r\n                        Symbols:{\r\n                            ...state.Game.SceneList[vID].Symbols,\r\n                            [vKEY]:{\r\n                                ...state.Game.SceneList[vID].Symbols[vKEY],\r\n                                Substiture:{\r\n                                    ...state.Game.SceneList[vID].Symbols[vKEY].Substiture,\r\n                                    [vKEY1]:{\r\n                                       ...state.Game.SceneList[vID].Symbols[vKEY].Substiture[vKEY1],\r\n                                       value:targetV \r\n                                    }\r\n                                }\r\n                                \r\n                            }\r\n                        },\r\n                    }\r\n                }\r\n            },\r\n            \r\n        }\r\n\r\n}\r\nfunction InputSymSpec(state, action){\r\n    let vID=action.paylot.vID, vKEY=action.paylot.vKEY\r\n    let vKEY1=action.paylot.vKEY1\r\n    let targetV=!state.Game.SceneList[vID].Symbols[vKEY].Special[vKEY1]\r\n    \r\n    \r\n    \r\n        return {\r\n            ...state,\r\n            Game:{\r\n                ...state.Game,\r\n                SceneList:{\r\n                    ...state.Game.SceneList,\r\n                    [vID]:{\r\n                        ...state.Game.SceneList[vID],\r\n                        \r\n                        Symbols:{\r\n                            ...state.Game.SceneList[vID].Symbols,\r\n                            [vKEY]:{\r\n                                ...state.Game.SceneList[vID].Symbols[vKEY],\r\n                                Special:{\r\n                                    ...state.Game.SceneList[vID].Symbols[vKEY].Special,\r\n                                    [vKEY1]:targetV \r\n                                }\r\n                                \r\n                            }\r\n                        },\r\n                    }\r\n                }\r\n            },\r\n            \r\n        }\r\n\r\n}\r\nfunction InputSymReel(state, action){\r\n    let vID=action.paylot.vID, vKEY=action.paylot.vKEY, num\r\n    let vKEY1=action.paylot.vKEY1, targetV=action.paylot.targetV.target.value\r\n    if(targetV!=\"\"){\r\n             num = parseInt(targetV.replace(/\\D+/g,\"\"))\r\n             if(isNaN(num)){\r\n                num = \"\"\r\n                \r\n              }\r\n    }\r\n    else{\r\n        num=\"\"\r\n    }\r\n    \r\n        return {\r\n            ...state,\r\n            Game:{\r\n                ...state.Game,\r\n                SceneList:{\r\n                    ...state.Game.SceneList,\r\n                    [vID]:{\r\n                        ...state.Game.SceneList[vID],\r\n                        \r\n                        Symbols:{\r\n                            ...state.Game.SceneList[vID].Symbols,\r\n                            [vKEY]:{\r\n                                ...state.Game.SceneList[vID].Symbols[[vKEY]],\r\n                                Reelstrip:{\r\n                                    ...state.Game.SceneList[vID].Symbols[[vKEY]].Reelstrip,\r\n                                    [vKEY1]:num\r\n                                }\r\n                            }\r\n                        },\r\n                    }\r\n                }\r\n            },\r\n            \r\n        }\r\n\r\n}\r\nexport {InputFid, InputFN, InputSN, InputGT, InputNOR, InputSymN, InputSymID, InputSymPayT, InputSymSub, InputSymSpec, InputSymReel}","import {keys} from \"lodash\"\r\nimport {omit} from 'lodash'\r\n\r\nfunction DeleteScene(state, action){\r\n    if(keys(state.BookmarkList).length==1){\r\n                let sceneList=state.Game.SceneList\r\n                let bookmarkList=state.BookmarkList\r\n                let screnList=state.ScrenList\r\n                sceneList={\r\n                    ...omit(state.Game.SceneList,action.paylot)\r\n                }\r\n                bookmarkList={\r\n                    ...omit(state.BookmarkList,action.paylot)\r\n                }\r\n                screnList={\r\n                    ...omit(state.ScrenList,action.paylot)\r\n                }\r\n                sceneList={\r\n                    0:{\r\n                        id:\"0\",\r\n                        SceneName : \"SceneName_\"+0,\r\n                        GameType : \"Slot\",\r\n                        NumberOfReels:5,\r\n                        Reels : {\r\n                            0:{\r\n                                name:\"Reel1\"\r\n                            },\r\n                            1:{\r\n                                name:\"Reel1\"\r\n                            },\r\n                            2:{\r\n                                name:\"Reel1\"\r\n                            },\r\n                            3:{\r\n                                name:\"Reel1\"\r\n                            },\r\n                            4:{\r\n                                name:\"Reel1\"\r\n                            },\r\n                        },\r\n\r\n                        ScernTypeOfConf:{\r\n                            Symbols:false,\r\n                            Paytable:false,\r\n                            Substitutes:false,\r\n                            Special:false,\r\n                            Reelstrip:false,\r\n                        },\r\n                        SlectedScernTypeOfConf:\"\",\r\n                        Symbols:{\r\n                            \r\n                        },\r\n                        \r\n                        TotalRTP: \"0\",\r\n                        BaseGameRTP: \"0\",\r\n                        FreespinsRTP: \"0\",\r\n                        BonusGameRTP: \"0\",\r\n                        BasegameHitRate: \"0\",\r\n                        HitRate:{},\r\n                        Combinations:{},\r\n                        Returns:{}\r\n                    }\r\n                }\r\n                bookmarkList={\r\n                    ...state.bookmarkList,\r\n                        0:{\r\n                            Id:\"\"+0+\"\",\r\n                            backg:\"green\"\r\n                        },\r\n                }\r\n                screnList={\r\n                    ...state.screnList,\r\n                    0:{\r\n                        Id:\"\"+0+\"\",\r\n                        display:\"flex\"\r\n                    },\r\n                }\r\n                return{\r\n                    ...state,\r\n                    Game:{\r\n                        ...state.Game,\r\n                        SceneList:{\r\n                            ...sceneList\r\n                        }\r\n                    \r\n                    },\r\n                    BookmarkList:{\r\n                        ...bookmarkList\r\n                    },\r\n                    ScrenList:{\r\n                        ...screnList\r\n                    },\r\n                    BookmarkOn:0\r\n                }\r\n        }\r\n         else{\r\n             let k = keys(omit(state.ScrenList,action.paylot))[0]\r\n             \r\n            return{\r\n                ...state,\r\n                Game:{\r\n                    ...state.Game,\r\n                    SceneList:{\r\n                        \r\n                        ...omit(state.Game.SceneList,action.paylot),\r\n                        \r\n                    }\r\n                    \r\n                },\r\n                BookmarkList:{\r\n                    \r\n                    ...omit(state.BookmarkList,action.paylot),\r\n                    [k]:{\r\n                        Id:\"\"+k+\"\",\r\n                        backg:\"green\"\r\n                    },\r\n                },\r\n                ScrenList:{\r\n                    \r\n                    ...omit(state.ScrenList,action.paylot),\r\n                    [k]:{\r\n                        Id:\"\"+k+\"\",\r\n                        display:\"flex\"\r\n                    },\r\n                },\r\n                BookmarkOn:k\r\n            }\r\n         }\r\n}\r\n\r\nexport {DeleteScene}","import {keys} from \"lodash\"\r\nimport {omit} from 'lodash'\r\n\r\nfunction Select(state, action){\r\n    \r\n    if(state.BookmarkOn!=action.paylot)\r\n    return{\r\n        ...state,\r\n        ScrenList:{\r\n            ...state.ScrenList,\r\n                [action.paylot]:{\r\n                    Id:\"\"+action.paylot+\"\",\r\n                    display:\"flex\"\r\n                },\r\n                [state.BookmarkOn]:{\r\n                    Id:\"\"+[state.BookmarkOn]+\"\",\r\n                    display:\"none\"\r\n                },\r\n            },\r\n        BookmarkList:{\r\n                ...state.BookmarkList,\r\n                    [action.paylot]:{\r\n                        Id:\"\"+action.paylot+\"\",\r\n                        backg:\"green\"\r\n                    },\r\n                    [state.BookmarkOn]:{\r\n                        Id:\"\"+[state.BookmarkOn]+\"\",\r\n                        backg:\"white\"\r\n                    },\r\n        },\r\n        BookmarkOn:action.paylot\r\n    }\r\n    else{\r\n        return{\r\n            ...state\r\n        }\r\n    }\r\n}\r\n\r\nfunction SelectMC(state, action){\r\n    \r\n    let v, s=action.paylot.v1, s2=\"\"\r\n    switch(action.paylot.v1){\r\n        case \"Symbols\":{\r\n            \r\n            if(state.Game.SceneList[action.paylot.v2].ScernTypeOfConf.Symbols){\r\n                s2=\"\"\r\n                v=false\r\n            }\r\n            else{\r\n                if(state.Game.SceneList[action.paylot.v2].SlectedScernTypeOfConf!=\"Symbols\")\r\n                    s2=state.Game.SceneList[action.paylot.v2].SlectedScernTypeOfConf\r\n                v=true\r\n            }\r\n            break\r\n        }\r\n        case \"Paytable\":{\r\n            if(state.Game.SceneList[action.paylot.v2].ScernTypeOfConf.Paytable){\r\n                s2=\"\"\r\n                v=false\r\n            }\r\n            else{\r\n                if(state.Game.SceneList[action.paylot.v2].SlectedScernTypeOfConf!=\"Paytable\")\r\n                    s2=state.Game.SceneList[action.paylot.v2].SlectedScernTypeOfConf\r\n                v=true\r\n            }\r\n            break\r\n        }\r\n        case \"Substiture\":{\r\n            if(state.Game.SceneList[action.paylot.v2].ScernTypeOfConf.Substiture){\r\n                s2=\"\"\r\n                v=false\r\n            }\r\n            else{\r\n                if(state.Game.SceneList[action.paylot.v2].SlectedScernTypeOfConf!=\"Substiture\")\r\n                    s2=state.Game.SceneList[action.paylot.v2].SlectedScernTypeOfConf\r\n                v=true\r\n            }\r\n            break\r\n        }\r\n        case \"Special\":{\r\n            if(state.Game.SceneList[action.paylot.v2].ScernTypeOfConf.Special){\r\n                s2=\"\"\r\n                v=false\r\n            }\r\n            else{\r\n                if(state.Game.SceneList[action.paylot.v2].SlectedScernTypeOfConf!=\"Special\")\r\n                    s2=state.Game.SceneList[action.paylot.v2].SlectedScernTypeOfConf\r\n                v=true\r\n            }\r\n            break\r\n        }\r\n        case \"Reelstrip\":{\r\n            if(state.Game.SceneList[action.paylot.v2].ScernTypeOfConf.Reelstrip){\r\n                s2=\"\"\r\n                v=false\r\n            }\r\n            else{\r\n                if(state.Game.SceneList[action.paylot.v2].SlectedScernTypeOfConf!=\"Reelstrip\")\r\n                    s2=state.Game.SceneList[action.paylot.v2].SlectedScernTypeOfConf\r\n                v=true\r\n            }\r\n            break\r\n        }\r\n    }\r\n    if(s!=s2) \r\n    if(state.Game.SceneList[action.paylot.v2].SlectedScernTypeOfConf!=\"\") \r\n    return{\r\n        ...state,\r\n        Game:{\r\n            ...state.Game,\r\n            SceneList:{\r\n                ...state.Game.SceneList,\r\n                [action.paylot.v2]:{\r\n                    ...state.Game.SceneList[action.paylot.v2],\r\n                    \r\n                    ScernTypeOfConf:{\r\n                        ...state.Game.SceneList[action.paylot.v2].ScernTypeOfConf,\r\n                        [s]:v,\r\n                        [s2]:!v,\r\n                    },\r\n                    SlectedScernTypeOfConf:action.paylot.v1\r\n                }\r\n            }\r\n        },\r\n        \r\n    }\r\n    else\r\n    return{\r\n        ...state,\r\n        Game:{\r\n            ...state.Game,\r\n            SceneList:{\r\n                ...state.Game.SceneList,\r\n                [action.paylot.v2]:{\r\n                    ...state.Game.SceneList[action.paylot.v2],\r\n                    \r\n                    ScernTypeOfConf:{\r\n                        ...state.Game.SceneList[action.paylot.v2].ScernTypeOfConf,\r\n                        [s]:v,\r\n                        \r\n                    },\r\n                    SlectedScernTypeOfConf:action.paylot.v1\r\n                }\r\n            }\r\n        },\r\n        \r\n    }\r\n    return{\r\n        ...state,\r\n        Game:{\r\n            ...state.Game,\r\n            SceneList:{\r\n                ...state.Game.SceneList,\r\n                [action.paylot.v2]:{\r\n                    ...state.Game.SceneList[action.paylot.v2],\r\n                    \r\n                    ScernTypeOfConf:{\r\n                        ...state.Game.SceneList[action.paylot.v2].ScernTypeOfConf,\r\n                        [s]:v,\r\n                        \r\n                    },\r\n                    SlectedScernTypeOfConf:\"\"\r\n                }\r\n            }\r\n        },\r\n        \r\n    }\r\n}\r\n\r\nexport {Select, SelectMC}","import {keys} from \"lodash\"\r\nimport {omit} from 'lodash'\r\n\r\nfunction StartReset(state, action){\r\n    if(state.FirstBut==\"Start\"){\r\n        return{\r\n            ...state,\r\n            FirstBut:\"Reset\"\r\n        }\r\n    }\r\n    else{\r\n        return{\r\n            \r\n            \r\n            \r\n                FirstBut:\"Start\",\r\n                FirstInputId:\"\",\r\n                FirstInputName:\"\"\r\n            \r\n        }\r\n    }\r\n\r\n}\r\nexport {StartReset}","import {keys} from \"lodash\"\r\nimport {omit} from 'lodash'\r\n\r\nfunction AddSymbol(state, action){\r\n    \r\n    let Subst={}\r\n    let Reel={}\r\n    \r\n    let N=0\r\n    let symbols=state.Game.SceneList[action.paylot].Symbols\r\n    let masKey=keys(symbols)\r\n    \r\n    if(keys(state.Game.SceneList[action.paylot].Symbols).length==0)\r\n    {\r\n        \r\n        \r\n        \r\n        for(let i = 0;i<state.Game.SceneList[action.paylot].NumberOfReels;i++){\r\n            Reel={\r\n                ...Reel,\r\n                [i+1]:0\r\n            }\r\n            \r\n        }\r\n        symbols={\r\n            \r\n            [N]:{\r\n                name:\"Symbol_\"+N,\r\n                id:\"s\"+N+\"w\",\r\n                Paytable:{\r\n                    ...Reel\r\n                },\r\n                Substiture:{\r\n                    [N]:{\r\n                        id:N,\r\n                        value:false\r\n                    }\r\n                   \r\n                },\r\n                Special:{\r\n                    isWild:false,\r\n                    isScatter:false,\r\n                    isSpecific:false\r\n                },\r\n                Reelstrip:{\r\n                    ...Reel\r\n                }\r\n            },\r\n            \r\n        }\r\n        \r\n    }\r\n        \r\n    else\r\n        {\r\n            \r\n            let C = false\r\n            while(!C){\r\n                \r\n                C=true;\r\n                for(let i = 0;i<keys(state.Game.SceneList[action.paylot].Symbols).length;i++)\r\n            \r\n                {\r\n                    if(N==keys(state.Game.SceneList[action.paylot].Symbols)[i])\r\n                    C=false;\r\n                }\r\n                if(!C)\r\n                    N++;\r\n            \r\n            }\r\n            \r\n            \r\n            \r\n            for(let i = 0;i<state.Game.SceneList[action.paylot].NumberOfReels;i++){\r\n                Reel={\r\n                    ...Reel,\r\n                    [i+1]:0\r\n                }\r\n            }\r\n                \r\n            \r\n            for(var i = 0;i<masKey.length+1;i++)\r\n            {\r\n                if(i<masKey.length)\r\n                symbols={\r\n                    ...symbols,\r\n                    [masKey[i]]:{\r\n                        ...symbols[masKey[i]],\r\n                        Substiture:{\r\n                            ...symbols[masKey[i]].Substiture,\r\n                            [N]:{\r\n                                id:N,\r\n                                value:false\r\n                            }\r\n                            \r\n                        }\r\n                    }\r\n                }\r\n                \r\n                \r\n            }\r\n            symbols={\r\n              ...symbols,\r\n              [N]:{\r\n                name:\"Symbol_\"+N,\r\n                id:\"s\"+N+\"w\",\r\n                Paytable:{\r\n                    ...Reel,\r\n                },\r\n                Substiture:{\r\n                    ...Subst\r\n                },\r\n                Special:{\r\n                    isWild:false,\r\n                    isScatter:false,\r\n                    isSpecific:false\r\n                },\r\n                Reelstrip:{\r\n                    ...Reel\r\n                }\r\n              }\r\n            }\r\n            \r\n        }\r\n    return {\r\n        ...state,\r\n        Game:{\r\n            ...state.Game,\r\n            SceneList:{\r\n                ...state.Game.SceneList,\r\n                [action.paylot]:{\r\n                    ...state.Game.SceneList[action.paylot],\r\n                    \r\n                    Symbols:{\r\n                        ...symbols\r\n                    },\r\n                }\r\n            }\r\n        },\r\n        \r\n    }\r\n}\r\n\r\nexport {AddSymbol}","import {keys} from \"lodash\"\r\nimport {omit} from 'lodash'\r\n\r\nfunction DeleteSymbol(state, action){\r\n    let symbols = state.Game.SceneList[action.paylot.v1].Symbols\r\n    \r\n    \r\n    symbols={\r\n        \r\n        ...omit(symbols,action.paylot.v2)\r\n    }\r\n    let sarray=keys(symbols)\r\n    \r\n    \r\n    for(let i = 0;i<sarray.length;i++){\r\n        \r\n        \r\n        symbols={\r\n            ...symbols,\r\n            [sarray[i]]:{\r\n                ...symbols[sarray[i]],\r\n                Paytable:{\r\n                    ...omit(symbols[sarray[i]].Paytable, sarray.length+1)\r\n\r\n                }\r\n            }\r\n        }\r\n       \r\n        \r\n    }\r\n    for(let i = 0;i<sarray.length;i++){\r\n        \r\n       \r\n        symbols={\r\n            ...symbols,\r\n            [sarray[i]]:{\r\n                ...symbols[sarray[i]],\r\n                Substiture:{\r\n                    ...omit(symbols[sarray[i]].Substiture, action.paylot.v2)\r\n\r\n                }\r\n            }\r\n        }\r\n       \r\n        \r\n    }\r\n    \r\n    \r\n    return {\r\n        ...state,\r\n        Game:{\r\n            ...state.Game,\r\n            SceneList:{\r\n                ...state.Game.SceneList,\r\n                [action.paylot.v1]:{\r\n                    ...state.Game.SceneList[action.paylot.v1],\r\n                    \r\n                    Symbols:{\r\n                        \r\n                        ...symbols\r\n                    },\r\n                }\r\n            }\r\n        },\r\n        \r\n    }\r\n}\r\nexport {DeleteSymbol}","import {keys} from \"lodash\"\r\nimport {omit} from 'lodash'\r\n\r\nimport initialState from './initialState';\r\nimport CreateScene from './components/CreateScene'\r\nimport {InputFid, InputFN, InputSN, InputGT, InputNOR, InputSymN, InputSymID, InputSymPayT, InputSymSub, InputSymSpec, InputSymReel} from './components/Inputs'\r\nimport {DeleteScene} from './components/Deletes'\r\nimport {Select, SelectMC} from './components/Select' \r\nimport {StartReset} from './components/StartReset'\r\nimport {AddSymbol} from './components/AddSymbol'\r\nimport {DeleteSymbol} from './components/DeleteSymbol'\r\n\r\n function DefaultOpration(state = initialState, action){\r\n    switch(action.type) {\r\n        \r\n        \r\n        case \"ADD_NEW_SCENE\": {\r\n            return CreateScene(state, action)\r\n        }\r\n        case \"ADD_SYMBOL\": {\r\n            return AddSymbol(state, action)\r\n        }\r\n        case \"DELETE_SCENE\":{\r\n         return DeleteScene(state, action)\r\n        }\r\n        case \"DELETE_SYMBOL\":{\r\n            return DeleteSymbol(state, action)\r\n           }\r\n        case \"SELECT\":{\r\n            return Select(state, action)\r\n        }\r\n        case \"SELECT_MENU_CONFIG\":{\r\n            return SelectMC(state, action)\r\n        }\r\n        case \"START_RESET\":{\r\n            return StartReset(state, action)\r\n        }\r\n        case \"INPUT_FID\":{\r\n            return InputFid(state, action)\r\n        }\r\n        case \"INPUT_FNAME\":{\r\n           return InputFN(state, action)\r\n        }\r\n        case \"INPUT_SCENE_NAME\": {\r\n            return InputSN(state, action)\r\n        }\r\n        case \"INPUT_NUM_REELS\": {\r\n            return InputNOR(state, action)\r\n        }\r\n        case \"INPUT_GAME_TYPE\": {\r\n            return InputGT(state, action)\r\n        }\r\n        case \"INPUT_SYMBOL_NAME\":{\r\n            return InputSymN(state, action)\r\n        }\r\n        case \"INPUT_SYMBOL_ID\":{\r\n            return InputSymID(state, action)\r\n        }\r\n\r\n        case \"INPUT_SYMBOL_PAYTABLE\":{\r\n            return InputSymPayT(state, action)\r\n        }\r\n        case \"INPUT_SYMBOL_SUBSTITURE\":{\r\n            return InputSymSub(state, action)\r\n        }\r\n        case \"INPUT_SYMBOL_SPECIAL\":{\r\n            return InputSymSpec(state, action)\r\n        }\r\n        case \"INPUT_SYMBOL_REELSTRIP\":{\r\n            return InputSymReel(state, action)\r\n        }\r\n        \r\n        default: return state;\r\n    }\r\n} \r\nexport default DefaultOpration;","\r\n\r\nimport DefaultOperation from './DefaultOperation'\r\n\r\nimport { combineReducers } from 'redux';\r\n  \r\nexport default combineReducers({\r\n    \r\n    DefaultOperation,\r\n    \r\n    \r\n    \r\n\r\n  })\r\n  ","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux'\nimport App from './App/App';\nimport reportWebVitals from './reportWebVitals';\n\nimport configureStore  from './Store/CreateStore';\n\n\n  const store = configureStore();\n \n  //Note that subscribe() returns a function for unregistering the listener\n   \n\n\n\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n\nreportWebVitals();\n","import {createStore} from 'redux';  \r\nimport MainReducer from './reducers/MainReducer';  \r\n \r\n/*Create a function called configureStore */\r\n \r\nexport default function configureStore() {  \r\n  return createStore(MainReducer);\r\n}"],"sourceRoot":""}